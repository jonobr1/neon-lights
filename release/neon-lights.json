{
	"config": {},
	"libraries": [
		"../release/third-party/url.js",
		"../release/third-party/has.js",
		"../release/third-party/signals.min.js",
		"../release/third-party/tween.js",
		"../release/third-party/three.js",
		"../release/third-party/three/js/effects/VREffect.js",
		"../release/third-party/three/js/loaders/FBXLoader2.js",
		"../release/third-party/three/js/controls/OrbitControls.js",
		"../release/third-party/three/js/controls/DeviceOrientationControls.js",
		"../release/third-party/three/js/controls/VRControls.js",
		"../release/third-party/three/js/vr/MouseController.js",
		"../release/third-party/three/js/vr/DaydreamController.js",
		"../release/third-party/orientation-arm-model.js",
		"../release/third-party/three/js/vr/ViveController.js"
	],
	"includes": [
		[
			"Setup",
			[
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = new THREE.WebGLRenderer( { antialias: true } );",
				"renderer.domElement.style.position = 'absolute';",
				"renderer.domElement.style.top = 0;",
				"renderer.domElement.style.left = 0;",
				"dom.appendChild( renderer.domElement );",
				"",
				"var scene = new THREE.Scene();",
				"scene.userData.clear = function() {",
				"",
				"\tvar children = scene.children.slice( 0 );",
				"\tfor ( var i = 0; i < children.length; i++ ) {",
				"\t\tvar child  = children[ i ];",
				"\t\tscene.remove( child );",
				"\t\tif ( child.dispose ) {",
				"\t\t\tchild.dispose();",
				"\t\t}",
				"\t}",
				"\t",
				"};",
				"",
				"var dolly = new THREE.Camera();",
				"var camera = new THREE.PerspectiveCamera( 75 );",
				"",
				"dolly.userData.distance = 2;",
				"dolly.userData.target = new THREE.Vector3( 0.0, 0.6, 0 );",
				"camera.userData.fov = {",
				"\tcurrent: camera.fov,",
				"\tdestination: camera.fov,",
				"\tdrag: 0.125,",
				"\tlimit: 0.01",
				"};",
				"",
				"dolly.add( camera );",
				"",
				"var controls = {",
				"\tvirtualReality: new THREE.VRControls( camera ),",
				"\tdeviceOrientation: new THREE.DeviceOrientationControls( camera )",
				"};",
				"",
				"controls.current = controls.virtualReality;",
				"\t",
				"var effect = new THREE.VREffect( renderer );",
				"",
				"if ( navigator.getVRDisplays ) {",
				"",
				"\tnavigator.getVRDisplays()",
				"\t\t.then( function ( displays ) {",
				"",
				"\t\t\tvar hmd = displays[ 0 ];",
				"\t\t\teffect.setVRDisplay( hmd );",
				"\t\t\tcontrols.virtualReality.setVRDisplay( hmd );",
				"",
				"\t\t\twindow.addEventListener( 'vrdisplayactivate', function () {",
				"\t\t\t\tcontrols.vr.resetPose();",
				"\t\t\t}, false );",
				"",
				"\t\t} )",
				"\t\t.catch( function () {",
				"",
				"\t\t\tcontrols.current = controls.deviceOrientation;\t\t",
				"",
				"\t\t} );",
				"",
				"}",
				"",
				"var resize = function ( event ) {",
				"\t",
				"\tvar width = dom.clientWidth;",
				"\tvar height = dom.clientHeight;",
				"",
				"\trenderer.setSize( width, height );",
				"\teffect.setSize( width, height );",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"\t",
				"\teffect.render( scene, camera );",
				"\t",
				"};",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"var isLocal = /localhost/i.test(window.location.href);",
				"var root = isLocal ? '../assets' : '//player-dev.cabrilleros.com/NEON_LIGHTS/assets';",
				"",
				"var loader = new THREE.FBXLoader();",
				"",
				"FRAME.addResource( 'renderer', renderer );",
				"FRAME.addResource( 'scene', scene );",
				"FRAME.addResource( 'dolly', dolly );",
				"FRAME.addResource( 'camera', camera );",
				"",
				"FRAME.addResource( 'controls', controls );",
				"FRAME.addResource( 'effect', effect );",
				"",
				"FRAME.addResource( 'root', root );",
				"FRAME.addResource( 'loader', loader );"
			]
		],
		[
			"Controllers",
			[
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var controllers = {",
				"",
				"\tmouse: new THREE.MouseController( renderer.domElement ),",
				"\tdaydream: new THREE.DaydreamController(),",
				"\tleft: new THREE.ViveController(0),",
				"\tright: new THREE.ViveController(1),",
				"",
				"\tdeltas: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler()",
				"\t},",
				"",
				"\tdragging: function () {",
				"\t\treturn controllers.mouse.userData.dragging",
				"\t\t\t|| controllers.daydream.userData.dragging",
				"\t\t\t|| controllers.left.userData.dragging",
				"\t\t\t|| controllers.right.userData.dragging;",
				"\t},",
				"\t",
				"\tprevious: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tupdate: function ( controller ) {",
				"",
				"\t\t\tvar obj = controllers.previous;",
				"\t\t\tvar d = controllers.deltas;",
				"",
				"\t\t\td.position.subVectors( controller.position, obj.position );",
				"",
				"\t\t\td.rotation.x = controller.rotation.x - obj.rotation.x;",
				"\t\t\td.rotation.y = controller.rotation.y - obj.rotation.y;",
				"\t\t\td.rotation.z = controller.rotation.z - obj.rotation.z;",
				"\t\t\t",
				"\t\t\tobj.position.copy( controller.position );",
				"\t\t\tobj.rotation.copy( controller.rotation );",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tsetup: function( parent ) {",
				"",
				"\t\tcontrollers.daydream.quaternion = new THREE.Quaternion();",
				"\t\tcontrollers.daydream.arm = new OrientationArmModel();",
				"",
				"\t\t// TODO: Create meshes for controllers here.",
				"",
				"\t\tparent.add( controllers.mouse );",
				"\t\tparent.add( controllers.daydream );",
				"\t\tparent.add( controllers.left );",
				"\t\tparent.add( controllers.right );",
				"",
				"\t\tcontrollers.mouse.addEventListener( 'mousedown', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.mouse );",
				"\t\t\tcontrollers.onTriggerDown( controllers.mouse );",
				"\t\t} );",
				"\t\tcontrollers.mouse.addEventListener( 'mouseup', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.mouse );",
				"\t\t} );",
				"",
				"\t\tcontrollers.left.addEventListener( 'triggerdown', function () {",
				"\t\t\tcontrollers.left.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.left );",
				"\t\t\tcontrollers.onTriggerDown( controllers.left );",
				"\t\t} );",
				"\t\tcontrollers.left.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.left.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.left );",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.right.addEventListener( 'triggerdown', function () {",
				"\t\t\tcontrollers.right.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.right );",
				"\t\t\tcontrollers.onTriggerDown( controllers.right );",
				"\t\t} );",
				"\t\tcontrollers.right.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.right.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.right );",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.daydream.addEventListener( 'touchpaddown', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.daydream );",
				"\t\t\tcontrollers.onTriggerDown( controllers.daydream );",
				"\t\t} );",
				"\t\tcontrollers.daydream.addEventListener( 'touchpadup', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.daydream );",
				"\t\t} );",
				"",
				"\t\treturn controllers;",
				"\t\t",
				"\t},",
				"\t",
				"\tupdate: function( camera ) {",
				"",
				"\t\tvar daydream, pad;",
				"\t\t",
				"\t\tif ( has.mobile ) {",
				"",
				"\t\t\tdaydream = controllers.daydream;",
				"\t\t\tdaydream.update();",
				"",
				"\t\t\tpad = daydream.getGamepad();",
				"\t\t\t",
				"\t\t\tif ( pad ) {",
				"",
				"\t\t\t\tvar pose = pad.pose;",
				"\t\t\t\tvar orientation = daydream.quaternion",
				"\t\t\t\t\t.fromArray( pose.orientation );",
				"\t\t\t\tvar arm = daydream.arm;",
				"\t\t\t\t",
				"\t\t\t\tarm.setHeadOrientation( camera.quaternion );",
				"\t\t\t\tarm.setHeadPosition( camera.position );",
				"\t\t\t\tarm.setControllerOrientation( orientation );",
				"\t\t\t\tarm.update();",
				"\t\t\t\t",
				"\t\t\t\tpose = arm.getPose();",
				"\t\t\t\tdaydream.position.copy( pose.position );",
				"\t\t\t\t",
				"\t\t\t}",
				"\t\t\t",
				"\t\t} else {",
				"",
				"\t\t\tcontrollers.left.update();",
				"\t\t\tcontrollers.right.update();",
				"\t\t\tcontrollers.mouse.update();",
				"\t\t\t",
				"\t\t}",
				"\t\t",
				"\t\tif ( controllers.daydream.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.daydream );",
				"",
				"\t\t} else if ( controllers.right.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.right );",
				"",
				"\t\t} else if ( controllers.left.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.left );",
				"",
				"\t\t} else if ( controllers.mouse.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.mouse );",
				"",
				"\t\t}",
				"\t\t",
				"\t},",
				"",
				"\tonTriggerDown: function( controller ) { },",
				"\tonTriggerUp: function( controller ) { }",
				"",
				"};",
				"",
				"FRAME.addResource( 'controllers', controllers );"
			]
		],
		[
			"Annie",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var path = [FRAME.getResource( 'root' ), '/models/annie/'].join('');",
				"var loader = FRAME.getResource( 'loader' );",
				"",
				"var annie = new THREE.Group();",
				"var files = {",
				"\tmodel: 'ani_chr_1-forest_bindpose_v03.fbx',",
				"\tanimations: {",
				"\t\trun: 'ani_chr_1-forest_run_v03.fbx',",
				"\t\tidle: 'ani_chr_1-forest_idle_v03.fbx'",
				"\t}",
				"};",
				"",
				"annie.userData.animations = {};",
				"annie.userData.currentAction = null;",
				"annie.userData.currentAnimation = null;",
				"annie.userData.play = function ( action ) {",
				"\t",
				"\tif ( annie.userData.currentAction === action ) return;",
				"\t",
				"\tfor ( var k in annie.userData.animations ) {",
				"\t",
				"\t\tvar animation = annie.userData.animations[ k ];",
				"\t\tanimation.action[ k === action ? 'play' : 'stop' ]();",
				"\t\tif ( k === action ) {",
				"\t\t\tannie.userData.currentAction = action;",
				"\t\t\tannie.userData.currentAnimation = animation;",
				"\t\t}",
				"",
				"\t}",
				"\t",
				"};",
				"",
				"loader.load( path + files.model, modelLoaded );",
				"",
				"FRAME.addResource( 'annie', annie );",
				"",
				"function modelLoaded ( fbx ) {",
				"\t",
				"\tannie.add( fbx );",
				"\tannie.userData.model = fbx;",
				"\tannie.userData.model.mixer = new THREE.AnimationMixer( fbx );",
				"\t",
				"\tfbx.traverse( function ( child ) {",
				"\t\t",
				"\t\tif ( child.isMesh ) {",
				"\t\t\t",
				"\t\t\tchild.material.side = THREE.DoubleSide;",
				"",
				"\t\t}",
				"\t\t",
				"\t} );",
				"\t",
				"\tfor ( var k in files.animations ) {",
				"",
				"\t\tvar animation = files.animations[ k ];",
				"\t\tloader.load( path + animation, animationLoaded( k ) );",
				"",
				"\t} ",
				"\t",
				"}",
				"",
				"function animationLoaded ( name ) {",
				"\t",
				"\treturn function ( fbx ) {",
				"",
				"\t\tvar animation = fbx.animations[ 0 ];",
				"\t\tanimation.name += ': ' + name;",
				"\t\tanimation.action = annie.userData.model.mixer.clipAction( animation );",
				"\t\tannie.userData.animations[ name ] = animation;",
				"\t\t",
				"\t};",
				"\t",
				"}"
			]
		],
		[
			"Models",
			[
				"var Signal = signals.Signal;",
				"var root = FRAME.getResource( 'root' );",
				"var loader = FRAME.getResource( 'loader' );",
				"",
				"var models = {",
				"\t",
				"\tforest: {",
				"\t\tname: 'forest',",
				"\t\tfiles: [",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_flower_a_v01.fbx',",
				"",
				"\t\t\t'mdl_env_1_forest_grass_a01_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_a02_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_b01_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_b02_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_c01_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_c02_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_c03_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_d_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_e_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_f_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_g_v01.fbx',",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_rock_a_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_rock_b_v01.fbx',",
				"",
				"\t\t\t'mdl_env_1_forest_mushroom_a_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_mushroom_b_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_mushroom_c_v01.fbx',",
				"",
				"\t\t\t'mdl_env_1_forest_tree_a_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_b_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_c_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_d_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_e_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_f_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_g_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_h_v01.fbx'",
				"\t\t\t",
				"\t\t]",
				"\t},",
				"",
				"\t/**",
				"\t * Environment Files for Stage 2",
				"\t */",
				"\thouse: {",
				"\t\tname: 'bedroom/environment',",
				"\t\tfiles: [",
				"",
				"\t\t\t'bed.fbx',",
				"\t\t\t'carpet.fbx', // TODO: binary needs reformat",
				"\t\t\t'castle.fbx', // TODO: rotation incorrect",
				"\t\t\t'closet.fbx',",
				"\t\t\t'slide.fbx',",
				"\t\t\t// 'tent.fbx',\t // TODO: rotation incorrect",
				"",
				"\t\t\t'cloud01.fbx',",
				"\t\t\t'moon.fbx',",
				"\t\t\t'pom-pom.fbx',",
				"\t\t\t'star.fbx',",
				"\t\t\t'star02.fbx'",
				"\t\t\t",
				"\t\t]",
				"\t},",
				"",
				"\t/**",
				"\t * Interactive Files for Stage 2",
				"\t */",
				"\tbedroom: {",
				"\t\tname: 'bedroom/interactive',",
				"\t\tfiles: [",
				"",
				"\t\t\t'ball-blue.fbx',",
				"\t\t\t'ball-green.fbx',",
				"\t\t\t'ball-purple.fbx',",
				"",
				"\t\t\t'pyramid-green.fbx',",
				"\t\t\t'pyramid-orange.fbx',",
				"",
				"\t\t\t'cube-blue.fbx',",
				"\t\t\t'cube-orange.fbx',",
				"\t\t\t'cube-purple.fbx',",
				"\t\t\t'cube-yellow.fbx',",
				"",
				"\t\t\t'bunny.fbx',",
				"\t\t\t'elephant.fbx',",
				"\t\t\t'giraffe.fbx',",
				"\t\t\t'teddy.fbx',",
				"\t\t\t'tricycle.fbx'",
				"",
				"\t\t]",
				"\t},",
				"\t",
				"\tcity: {",
				"\t\tname: 'city',",
				"\t\tfiles: [",
				"\t\t\t'building01.fbx',",
				"\t\t\t'building02.fbx',",
				"\t\t\t'building03.fbx',",
				"\t\t\t'building04.fbx',",
				"\t\t\t'building05.fbx',",
				"\t\t\t'building06.fbx',",
				"\t\t\t'building07.fbx',",
				"\t\t\t'building08.fbx',",
				"\t\t\t'building09.fbx',",
				"\t\t\t'building10.fbx',",
				"\t\t\t'building11.fbx',",
				"\t\t\t'building12.fbx',",
				"\t\t]",
				"\t}",
				"\t",
				"};",
				"",
				"for ( var name in models ) {",
				"",
				"\tvar stage = models[ name ];",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"",
				"\tenhance( stage );",
				"\t",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tload( stage, files[ i ] );",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"function enhance ( stage ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"\tvar loaded = 0;",
				"\tvar isComplete = false;",
				"\t",
				"\tstage.geometries = [];",
				"\tstage.onLoad = new Signal();",
				"\tstage.ready = function ( func ) {",
				"\t\tif ( isComplete ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tstage.onLoad.add( func );",
				"\t};",
				"\t",
				"\tfiles.complete = function ( path ) {",
				"",
				"\t\tloaded++;",
				"\t\t",
				"\t\tif ( !isComplete && loaded >= length ) {",
				"\t\t\tisComplete = true;",
				"\t\t\tstage.onLoad.dispatch();",
				"\t\t}",
				"\t\t",
				"\t\t",
				"\t};",
				"\t",
				"}",
				"",
				"function load ( stage, path ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar url = [ root, 'models', stage.name, path ].join ( '/' );",
				"",
				"\tloader.load( url, function ( fbx ) {",
				"",
				"\t\textract( stage, fbx, path );",
				"\t\tfiles.complete( path );",
				"\t\t",
				"\t} );",
				"\t",
				"}",
				"",
				"function extract ( stage, fbx, path ) {",
				"\t",
				"\tvar geometries = stage.geometries;",
				"",
				"\tfbx.traverse( function( child ) {",
				"",
				"\t\tif ( child.isMesh ) {",
				"",
				"\t\t\tif ( child.rotation.x !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateX( child.rotation.x );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.y !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateY( child.rotation.y );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.z !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateZ( child.rotation.z );",
				"\t\t\t}",
				"",
				"\t\t\tchild.geometry.name = path;",
				"\t\t\tchild.geometry.computeBoundingSphere();",
				"",
				"\t\t\tgeometries.push( child.geometry );",
				"",
				"\t\t}",
				"\t\t",
				"\t} );",
				"",
				"}",
				"",
				"FRAME.addResource( 'models', models );"
			]
		],
		[
			"Materials",
			[
				"var road = {",
				"",
				"\tuniforms: {",
				"",
				"\t\tcursor: { type: 'v2', value: new THREE.Vector2() },",
				"\t\t",
				"\t\tsubdivisions: { type: 'f', value: 32 },",
				"\t\tcurvature: { type: 'f', value: 1 },",
				"\t\tsize: { type: 'f', value: 1 },",
				"",
				"\t\tmedian: { type: 'c', value: new THREE.Color( 'red' ) },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }",
				"",
				"\t},",
				"\t",
				"\tvertexShader: [",
				"",
				"\t\t'uniform float curvature;',",
				"\t\t'uniform float size;',",
				"\t\t'varying vec2 vUv;',",
				"\t\t",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec3 pos = vec3( position );',",
				"",
				"\t\t\t'float x = pos.x / size;',",
				"\t\t\t'float y = pos.y / size;',",
				"",
				"\t\t\t'float x2 = x * 2.0;',",
				"\t\t\t'float y2 = y * 2.0;',",
				"",
				"\t\t\t'float dist = curvature * sqrt( x2 * x2 + y2 * y2 );',",
				"",
				"\t\t\t'pos.z = size * ( dist * dist ) / 2.0;',",
				"\t\t",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t\t'}'",
				"\t\t",
				"\t].join( '\\n' ),",
				"\t",
				"\tfragmentShader: [",
				"",
				"\t\t'float PI = ' + Math.PI + ';',",
				"",
				"\t\t'uniform vec2 cursor;',",
				"\t\t'uniform float subdivisions;',",
				"\t\t'uniform float size;',",
				"",
				"\t\t'uniform vec3 median;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"",
				"\t\t'varying vec2 vUv;',",
				"\t\t",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float threshold = 16.0 / size;',",
				"",
				"\t\t\t'vec2 pos = vec2( cursor.x + vUv.x, - cursor.y + vUv.y );',",
				"\t\t\t'pos = mod( pos, 1.0 );',",
				"\t\t\t'pos = mod( subdivisions * pos, 1.0 );',",
				"",
				"\t\t\t'vec2 isMedian = vec2( sin( pos * PI ) );',",
				"\t\t\t'vec2 isIntersection = vec2( 1.0 - isMedian.y, 1.0 - isMedian.x );',",
				"",
				"\t\t\t'isMedian = step( vec2( threshold ), isMedian );',",
				"\t\t\t'isIntersection = step( vec2( 0.66 ), isIntersection );',",
				"",
				"\t\t\t'float t = clamp( isMedian.x + isIntersection.x, 0.0, 1.0 );',",
				"\t\t\t'vec3 layer = mix( median, color, t );',",
				"",
				"\t\t\t't = clamp( isMedian.y + isIntersection.y, 0.0, 1.0 );',",
				"\t\t\t'layer = mix( median, layer, t );',",
				"",
				"\t\t\t'float dist = distance( vec2( 0.5 ), vUv ) * 2.0;',",
				"\t\t\t't = clamp( dist, 0.0, 1.0 );',",
				"",
				"\t\t\t'gl_FragColor = vec4( mix( layer, fog, pow( t, 0.5 ) ), 1.0 );',",
				"",
				"\t\t'}'",
				"\t\t",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var floor = {",
				"",
				"\tuniforms: {",
				"\t\tamount: { type: 'f', value: 6 },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }",
				"\t},",
				"",
				"\tvertexShader: [",
				"",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform float amount;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float dist = distance( vec2( 0.5 ), vUv ) * 2.0;',",
				"\t\t\t'float t = clamp( floor( pow( dist, 0.4 ) * amount ) / amount, 0.0, 1.0 );',",
				"\t\t\t'gl_FragColor = vec4( mix( mix( color, fog, t ), fog, pow( dist, 0.5 ) ), 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var backdrop = {",
				"",
				"\tuniforms: {",
				"\t\toffset: { type: 'f', value: 0.5 },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }",
				"\t},",
				"",
				"\tvertexShader: [",
				"",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform float offset;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float t = smoothstep( offset, 1.0, vUv.y );',",
				"\t\t\t'gl_FragColor = vec4( mix( fog, color, pow( t, 3.0 ) ), 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var wave = {",
				"",
				"\tuniforms: {",
				"\t\ttime: { type: 'f', value: 0 },",
				"\t\tfogColor: { type: 'c', value: new THREE.Color() },",
				"\t\tfogNear: { type: 'f', value: 0 },",
				"\t\tfogFar: { type: 'f', value: 50 }",
				"\t},",
				"\t",
				"\tvertexShader: [",
				"",
				"\t\t'float PI = ' + Math.PI + ';',",
				"\t\t",
				"\t\t'uniform float time;',",
				"",
				"\t\t'varying vec4 mvPosition;',",
				"\t\t'varying vec3 vertexColor;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec3 pos = vec3( position );',",
				"\t\t\t'vec4 t = projectionMatrix * vec4( 1.0 );',",
				"\t\t",
				"\t\t\t'float osc = ( 1.0 + sin( time + PI * ( t.x + t.y + t.z ) / 3.0 ) ) / 2.0;',",
				"\t\t\t'float sway = pow( pos.y, 2.0 ) * osc;',",
				"\t\t",
				"\t\t\t'pos.x += sway / 100.0;',",
				"",
				"\t\t\t'vertexColor = color;',",
				"\t\t\t'mvPosition = modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t\t\t'gl_Position = projectionMatrix * mvPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\t",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform vec3 fogColor;',",
				"\t\t'uniform float fogNear;',",
				"\t\t'uniform float fogFar;',",
				"\t\t",
				"\t\t'varying vec2 vUv;',",
				"\t\t'varying vec4 mvPosition;',",
				"\t\t'varying vec3 vertexColor;',",
				"\t\t",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float fogDepth = - mvPosition.z;',",
				"\t\t\t'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',",
				"",
				"\t\t\t'gl_FragColor = vec4( mix( vertexColor, fogColor, fogFactor ), 1.0 );',",
				"",
				"\t\t'}'",
				"\t\t",
				"\t].join( '\\n' )",
				"\t",
				"};",
				"",
				"var materials = {",
				"",
				"\tforest: {",
				"\t\t",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( floor.uniforms ),",
				"\t\t\tvertexShader: floor.vertexShader,",
				"\t\t\tfragmentShader: floor.fragmentShader",
				"\t\t\t",
				"\t\t} ),",
				"\t\t",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: false,",
				"\t\t\t",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"\t\t\t",
				"\t\t} ),",
				"\t\t",
				"\t\twave: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tvertexColors: true,",
				"\t\t\tfog: true,",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\t",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( wave.uniforms ),",
				"\t\t\tvertexShader: wave.vertexShader,",
				"\t\t\tfragmentShader: wave.fragmentShader",
				"\t\t\t",
				"\t\t} )",
				"",
				"\t},",
				"\t",
				"\thouse: {",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( floor.uniforms ),",
				"\t\t\tvertexShader: floor.vertexShader,",
				"\t\t\tfragmentShader: floor.fragmentShader",
				"\t\t\t",
				"\t\t} )",
				"",
				"\t},",
				"\t",
				"\tcity: {",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( road.uniforms ),",
				"\t\t\tvertexShader: road.vertexShader,",
				"\t\t\tfragmentShader: road.fragmentShader",
				"\t\t} ),",
				"",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: false,",
				"\t\t\t",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"\t\t\t",
				"\t\t} ),",
				"\t\t",
				"\t\tbuilding: new THREE.MeshBasicMaterial( {",
				"\t\t\tcolor: 'white',",
				"\t\t\tvertexColors: true",
				"\t\t} )",
				"\t\t",
				"\t}",
				"\t",
				"};",
				"",
				"FRAME.addResource( 'materials', materials );"
			]
		]
	],
	"effects": [
		[
			"Forest",
			[
				"var TWO_PI = Math.PI * 2;",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).forest;",
				"var materials = FRAME.getResource( 'materials' ).forest;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 1024 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 ),",
				"\tforceField: new FRAME.Parameters.Float( 'Field', 0.025 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var material = materials.wave;",
				"",
				"var theta = {",
				"\tdestination: 0,",
				"\tcurrent: 0,",
				"\tdrag: 0.66,",
				"\tclear: function () {",
				"\t\ttheta.destination = theta.current = 0;",
				"\t}",
				"};",
				"",
				"var step = {",
				"\tdestination: 0.1 * parameters.step.value,",
				"\tcurrent: 0.1 * parameters.step.value,",
				"\tdrag: 0.0625,",
				"\tclear: function () {",
				"\t\tstep.destination = step.current = 0;",
				"\t}",
				"};",
				"",
				"var direction = {",
				"\tdestination: 0,",
				"\tcurrent: 0,",
				"\tdrag: 0.0625,",
				"\tclear: function () {",
				"\t\tdirection.destination = direction.current = 0;",
				"\t}",
				"};",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.66 );",
				"",
				"materials.floor.uniforms.color.value.set( 0x72fa8c );",
				"materials.backdrop.uniforms.color.value.set( 0xdde9ab );",
				"",
				"materials.floor.uniforms.fog.value = group.fog.color;",
				"materials.floor.uniforms.fog.needsUpdate = true;",
				"materials.backdrop.uniforms.fog.value = group.fog.color;",
				"materials.backdrop.uniforms.fog.needsUpdate = true;",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 1, 1 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value ),",
				"\tmaterials.backdrop",
				");",
				"group.add( backdrop );",
				"",
				"var elements = [];",
				"var sections = {",
				"\ta: [],",
				"\tb: [],",
				"\tc: []",
				"};",
				"",
				"for ( var k in sections ) {",
				"",
				"\tenhance( sections[ k ] );",
				"",
				"}",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"",
				"\t\tmesh.scale.setScalar( Math.random() / 2 + 0.5 );",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"",
				"\t\tif ( /(grass)/i.test( name ) ) {",
				"\t\t\tsections.a.push( mesh );",
				"\t\t\tmesh.visible = false;",
				"\t\t} else if ( /(mushroom|rock)/i.test( name ) ) {",
				"\t\t\tsections.b.push( mesh );",
				"\t\t\tmesh.visible = false;",
				"\t\t} else if (/tree/i.test( name ) ) {",
				"\t\t\tsections.c.push( mesh );",
				"\t\t\tmesh.visible = false;",
				"\t\t}",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"FRAME.addResource( 'Stage 1', {",
				"",
				"\tsections: sections",
				"",
				"} );",
				"",
				"function start () {",
				"",
				"\tcursor.set( 0, 0 );",
				"",
				"\ttheta.clear();",
				"\tstep.clear();",
				"\tdirection.clear();",
				"",
				"\tfor ( var k in sections ) {",
				"\t\tsections[ k ].disable();",
				"\t}",
				"",
				"\tannie.rotation.y = 0;",
				"\tdolly.position.set( 0, 0.6, - 2 );",
				"\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );",
				"",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"\t",
				"\tif ( material.uniforms && material.uniforms.time ) {",
				"\t\tmaterial.uniforms.time.value += (dt || 0 ) * 4;",
				"\t}",
				"\t",
				"\tannie.userData.play( 'run' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.6;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"",
				"\tdirection.destination = theta.current;",
				"",
				"\tstep.current += ( step.destination - step.current ) * theta.drag;",
				"\ttheta.current += ( theta.destination - theta.current ) * theta.drag;",
				"\tdirection.current += ( direction.destination - direction.current ) * direction.drag;",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.current - direction.current );",
				"\tdolly.position.z = - distance * Math.cos( theta.current - direction.current );",
				"\tdolly.lookAt( dolly.userData.target );\t",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar amplitude = step.current * ( dt || 0 );",
				"\tvar forceField = parameters.forceField.value;",
				"",
				"\tcursor.x += amplitude * Math.cos( theta.current );",
				"\tcursor.y += amplitude * Math.sin( theta.current );",
				"\t",
				"\tgroup.rotation.y = direction.current - Math.PI / 2;",
				"\t",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 2 ) - 1;",
				"\t\tvar y = mod( cursor.y + offset.y, 2 ) - 1;",
				"\t\t",
				"\t\tvar angle = Math.atan2( - y, - x );",
				"\t\tvar buffer = forceField * ( 128 / size );",
				"\t\tvar phi = angle + Math.PI;",
				"\t\t",
				"\t\tmesh.position.x = x + Math.cos( phi ) * buffer;",
				"\t\tmesh.position.z = y + Math.sin( phi ) * buffer;",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t}",
				"\t",
				"}",
				"",
				"function enhance ( section ) {",
				"",
				"\tsection.enabled = false;",
				"\tsection.enable = function () {",
				"\t\tsection.enabled = true;",
				"\t\tfor ( var i = 0; i < section.length; i++ ) {",
				"\t\t\tvar mesh = section[ i ];",
				"\t\t\tmesh.visible = true;\t// TODO: Smooth",
				"\t\t}",
				"\t};",
				"\tsection.disable = function () {",
				"\t\tsection.enabled = false;",
				"\t\tfor ( var i = 0; i < section.length; i++ ) {",
				"\t\t\tvar mesh = section[ i ];",
				"\t\t\tmesh.visible = false;\t// TODO: Smooth",
				"\t\t}",
				"\t}",
				"",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"House",
			[
				"var TWO_PI = Math.PI * 2;",
				"var identity = function () {};",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).bedroom;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 128 ),",
				"\tpillars: new FRAME.Parameters.Integer( 'Pillars', 12 ),",
				"\tmargin: new FRAME.Parameters.Integer( 'Margin', 2 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 )",
				"};",
				"",
				"var theta = {",
				"\tdestination: 0,",
				"\tcurrent: 0,",
				"\tdrag: 0.66,",
				"\tclear: function ( v ) {",
				"\t\ttheta.destination = theta.current = ( v || 0 );",
				"\t}",
				"};",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( 0x333333, 0, parameters.size.value * 0.5 );",
				"",
				"var environment = new THREE.Group();",
				"group.add( environment );",
				"",
				"materials.floor.uniforms.amount.value = 12;",
				"materials.floor.uniforms.color.value.set( 0x64939e );",
				"materials.floor.uniforms.fog.value = group.fog.color;",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 1, 1 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"environment.add( ground );",
				"",
				"var pillars = [];",
				"pillars.radius = 3;",
				"",
				"for ( var i = 0; i < parameters.pillars.value; i++ ) {",
				"",
				"\tvar pillar = new THREE.Group();",
				"",
				"\tpillar.userData.tween = new TWEEN.Tween( pillar.position )",
				"\t\t.easing( TWEEN.Easing.Back.Out );",
				"",
				"\tenvironment.add( pillar );",
				"\tpillars.push( pillar );",
				"",
				"}",
				"",
				"var elements = [];",
				"elements.next = function() {",
				"\tvar index = elements.index;",
				"\telements.index = ( elements.index + 1 ) % elements.length;",
				"\treturn elements[ index ];",
				"};",
				"elements.index = 0;",
				"",
				"var material = new THREE.MeshBasicMaterial( {",
				"\tcolor: 'white',",
				"\tvertexColors: true,",
				"\tside: THREE.DoubleSide",
				"} );",
				"",
				"model.ready( function () {",
				"\t",
				"\tvar size = parameters.size.value;",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"FRAME.getResource( 'models' ).house.ready( function () {",
				"",
				"\tvar geometries = FRAME.getResource( 'models' )",
				"\t\t.house.geometries;",
				"\tvar length = geometries.length;",
				"\tvar radius = pillars.radius + 1;",
				"\t",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tvar geometry = geometries[ i ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"",
				"\t\tvar angle = Math.random() * TWO_PI;",
				"\t\tvar r = Math.random() * radius + radius;",
				"",
				"\t\tmesh.position.x = r * Math.cos( angle );",
				"\t\tmesh.position.y = 0.1;",
				"\t\tmesh.position.z = r * Math.sin( angle );",
				"\t\tmesh.lookAt( annie.position );",
				"",
				"\t\tenvironment.add( mesh );",
				"",
				"\t}",
				"",
				"} );",
				"",
				"FRAME.addResource( 'Stage 2', {",
				"",
				"\telements: elements,",
				"\tpillars: pillars,",
				"\tadd: add,",
				"\taddAll: addAll,",
				"\tscene: group,",
				"\ttheta: theta",
				"",
				"} );",
				"",
				"function start () {",
				"",
				"\ttheta.clear( Math.PI );",
				"",
				"\tfor ( var i = 0; i < pillars.length; i++ ) {",
				"",
				"\t\tvar pillar = pillars[ i ];",
				"\t\tvar angle = TWO_PI * i / parameters.pillars.value;",
				"",
				"\t\tpillar.position.x = pillars.radius * Math.cos( angle );",
				"\t\tpillar.position.z = pillars.radius * Math.sin( angle );",
				"",
				"\t\tpillar.rotation.y = angle;",
				"\t\tpillar.userData.index = 0;",
				"\t\tpillar.visible = true;",
				"\t\t",
				"\t\tclearTween( pillar.userData.tween );",
				"",
				"\t}",
				"",
				"\tannie.rotation.y = 0;",
				"\tdolly.position.set( 0, 0.6, - 2 );",
				"\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );",
				"",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tannie.rotation.y = 0;",
				"\tscene.remove( group );",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tannie.userData.play( 'idle' );",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"\t\t",
				"\t}",
				"",
				"\ttheta.current += ( theta.destination - theta.current ) * theta.drag;",
				"\tenvironment.rotation.y = theta.current;",
				"\tannie.rotation.y = theta.current;",
				"",
				"}",
				"",
				"function add () {",
				"",
				"\tvar margin = parameters.margin.value / 10;",
				"\tvar angle = mod( theta.destination + Math.PI / 2, TWO_PI );",
				"\tvar id = Math.round( pillars.length * angle / TWO_PI ) % pillars.length;",
				"",
				"\tvar pillar = pillars[ id ];",
				"\tvar elem = elements.next();",
				"",
				"\tpillar.userData.index++;",
				"",
				"\tvar height = elem.geometry.boundingSphere.radius * 2 + margin;",
				"",
				"\telem.position.y = - ( height + pillar.position.y );",
				"\t",
				"\tpillar.add( elem );",
				"\tpillar.userData.tween",
				"\t\t.to( { y: - elem.position.y }, 150 )",
				"\t\t.easing( TWEEN.Easing.Back.Out )",
				"\t\t.start();",
				"",
				"}",
				"",
				"function addAll () {",
				"",
				"\tvar margin = parameters.margin.value / 10;",
				"",
				"\tfor ( var i = 0; i < pillars.length; i++ ) {",
				"",
				"\t\tvar pillar = pillars[ i ];",
				"\t\tvar elem = elements.next();",
				"",
				"\t\tpillar.userData.index++;",
				"",
				"\t\tvar height = elem.geometry.boundingSphere.radius * 2 + margin;",
				"",
				"\t\telem.position.y = - ( height + pillar.position.y );",
				"",
				"\t\tpillar.add( elem );",
				"\t\tpillar.userData.tween",
				"\t\t\t.to( { y: - elem.position.y }, 150 )",
				"\t\t\t.easing( TWEEN.Easing.Back.Out )",
				"\t\t\t.start();",
				"",
				"\t}",
				"",
				"}",
				"",
				"function clearTween ( tween ) {",
				"\ttween.onComplete( identity );",
				"}",
				"",
				"function isNumber( n ) {",
				"\treturn (typeof n).toLowerCase() == 'number';",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"City",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).city;",
				"var materials = FRAME.getResource( 'materials' ).city;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 1000 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 1024 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.1 ),",
				"\tdistance: new FRAME.Parameters.Float( 'Distance', 2 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"var theta = {",
				"\tdestination: 0,",
				"\tcurrent: 0,",
				"\tdrag: 0.66,",
				"\tclear: function () {",
				"\t\ttheta.destination = theta.current = 0;",
				"\t}",
				"};",
				"",
				"var step = {",
				"\tdestination: 0.1 * parameters.step.value,",
				"\tcurrent: 0.1 * parameters.step.value,",
				"\tdrag: 0.0625,",
				"\tclear: function () {",
				"\t\tstep.destination = step.current = 0;",
				"\t}",
				"};",
				"",
				"var direction = {",
				"\tdestination: 0,",
				"\tcurrent: 0,",
				"\tdrag: 0.125,",
				"\tclear: function () {",
				"\t\tdirection.destination = direction.current = 0;",
				"\t}",
				"};",
				"",
				"var block = new THREE.Vector2();",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.4 );",
				"",
				"materials.floor.uniforms.cursor.value = cursor;",
				"materials.floor.uniforms.subdivisions.value = cols;",
				"materials.floor.uniforms.size.value = parameters.size.value;",
				"materials.floor.uniforms.fog.value = group.fog.color;",
				"materials.floor.uniforms.color.value.set( 0x262532 );",
				"materials.floor.uniforms.median.value.set( 0x3a394a );",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 1024, 1024 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"materials.backdrop.uniforms.offset.value = 0.66;",
				"materials.backdrop.uniforms.color.value.set( 0x420c6b );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value ),",
				"\tmaterials.backdrop",
				");",
				"group.add( backdrop );",
				"",
				"var elements = [];",
				"",
				"var material = new THREE.MeshBasicMaterial( {",
				"\tcolor: 'white',",
				"\tvertexColors: true",
				"} );",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = Math.floor( Math.random() * length );",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\t",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"\t\t",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"\t\t",
				"\t\t// mesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"\t\t",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"function start () {",
				"",
				"\tcursor.set( 0, 0 );",
				"",
				"\ttheta.clear();",
				"\tstep.clear();",
				"\tdirection.clear();",
				"",
				"\tannie.rotation.y = 0;",
				"",
				"\tdolly.userData.distance = parameters.distance.value;",
				"\tdolly.position.set( 0, dolly.userData.target.y, - dolly.userData.distance );",
				"\tdolly.lookAt( dolly.userData.target );",
				"",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"\t",
				"\tif ( material.uniforms && material.uniforms.time ) {",
				"\t\tmaterial.uniforms.time.value += (dt || 0 ) * 4;",
				"\t}",
				"",
				"\tannie.userData.play( 'run' );",
				"\t",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.6;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"",
				"\tupdateDirection();",
				"\t",
				"\tstep.current += ( step.destination - step.current ) * theta.drag;",
				"\ttheta.current += ( theta.destination - theta.current ) * theta.drag;",
				"\tdirection.current += ( direction.destination - direction.current ) * direction.drag;",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.current - direction.current );",
				"\tdolly.position.z = - distance * Math.cos( theta.current - direction.current );",
				"\tdolly.lookAt( dolly.userData.target );",
				"\t",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = step.current * ( dt || 0 );",
				"\tvar curvature = Math.min( progress * 2, 1.0 );",
				"",
				"\tcursor.x += amplitude * Math.cos( direction.current );",
				"\tcursor.y += amplitude * Math.sin( direction.current );",
				"\t",
				"\tgroup.rotation.y = direction.current - Math.PI / 2;",
				"",
				"\tground.material.uniforms.curvature.value = curvature;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"\t\tvar x2 = x * 2;",
				"\t\tvar y2 = y * 2;",
				"",
				"\t\tvar phi = Math.atan2( - y, - x );",
				"\t\tvar dist = curvature * Math.sqrt( x2 * x2 + y2 * y2 );",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"",
				"\t\tmesh.rotation.x = Math.sin( phi );",
				"\t\tmesh.rotation.z = Math.cos( phi );",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.y = size * ( dist * dist ) / 2;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t\tmesh.rotation.x *= - HALF_PI * dist;",
				"\t\tmesh.rotation.z *= HALF_PI * dist;",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"function updateDirection() {",
				"\t",
				"\tvar cx = Math.floor( ( cursor.x - 0.5 ) * cols );",
				"\tvar cy = Math.floor( ( cursor.y - 0.5 ) * rows );",
				"",
				"\tif ( cx !== block.x || cy !== block.y ) {",
				"\t\tdirection.destination = TWO_PI * Math.round( 4 * theta.destination / TWO_PI ) / 4;",
				"\t\tblock.set( cx, cy );",
				"\t}",
				"",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"Effect",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"// function init(){}",
				"",
				"function start(){}",
				"",
				"function update( progress ){",
				"",
				"\tannie.userData.play( 'run' );",
				"",
				"}"
			]
		],
		[
			"Effect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var clock = FRAME.getResource( 'clock' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"scene.userData.clear();",
				"scene.add( dolly );",
				"scene.add( new THREE.AmbientLight( 0xffffff ) );",
				"scene.add( annie );",
				"",
				"var controls = FRAME.getResource( 'controls' );",
				"var controllers = FRAME.getResource( 'controllers' )",
				"\t.setup( dolly );",
				"",
				"function update ( progress ) {",
				"",
				"\tTWEEN.update();",
				"",
				"\tcontrols.current.update();",
				"\tcontrollers.update( camera );",
				"",
				"\tvar fov = camera.userData.fov;",
				"\tvar changed = false;",
				"\tif ( Math.abs( fov.destination - fov.current ) > fov.limit ) {",
				"\t\tfov.current += ( fov.destination - fov.current ) * fov.drag;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t} else if ( fov.current !== fov.destination ) {",
				"\t\tfov.current = fov.destination;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Effect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tif ( annie.userData.model ) {",
				"\t\tannie.userData.model.mixer.update( dt );",
				"\t}",
				"",
				"\teffect.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Bedroom.add",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Bedroom.addAll",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Bedroom.addAll Loop",
			[
				"var frameCount = 0;",
				"",
				"function start () {}",
				"",
				"function end(){}",
				"",
				"function update ( progress ){",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"",
				"\tif ( bedroom && !( frameCount % 5 ) ) {",
				"\t\tbedroom.addAll();",
				"\t}",
				"",
				"\tframeCount++;",
				"",
				"}"
			]
		],
		[
			"Spin Bedroom Elements",
			[
				"var TWO_PI = Math.PI * 2;",
				"",
				"var parameters = {",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1.0 )",
				"};",
				"",
				"function start(){}",
				"",
				"function end() {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( !bedroom ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar pillars = bedroom.pillars;",
				"\tvar length = pillars.length;",
				"\tvar radius = pillars.radius * 8;",
				"",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tvar pillar = pillars[ i ];",
				"\t\tvar angle = TWO_PI * i / length;",
				"",
				"\t\tanimateOut( pillar, angle, radius );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function update( progress, dt ) {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( !bedroom ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar elements = bedroom.elements;",
				"\tvar step = parameters.step.value;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"\t\tvar elem = elements[ i ];",
				"\t\telem.rotation.y += step * ( dt || 0 );",
				"\t}",
				"",
				"}",
				"",
				"function animateOut ( pillar, angle, radius ) {",
				"",
				"\tvar x = radius * Math.cos( angle );",
				"\tvar y = radius * Math.sin( angle );",
				"",
				"\tpillar.userData.tween",
				"\t\t.to( { x: x, z: y }, 1000 )",
				"\t\t.easing( TWEEN.Easing.Sinusoidal.InOut )",
				"\t\t.onComplete( function () {",
				"\t\t\tpillar.visible = false;",
				"\t\t} )",
				"\t\t.start();",
				"",
				"}"
			]
		],
		[
			"Forest.sections.a.enable",
			[
				"function start () {",
				"",
				"\tvar forest = FRAME.getResource( 'Stage 1' );",
				"\tif ( forest ) {",
				"\t\tforest.sections.a.enable();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Forest.sections.b.enable",
			[
				"function start () {",
				"",
				"\tvar forest = FRAME.getResource( 'Stage 1' );",
				"\tif ( forest ) {",
				"\t\tforest.sections.b.enable();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Forest.sections.c.enable",
			[
				"function start () {",
				"",
				"\tvar forest = FRAME.getResource( 'Stage 1' );",
				"\tif ( forest ) {",
				"\t\tforest.sections.c.enable();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( bedroom ) {",
				"\t\tbedroom.add();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Mirror Dance",
			[
				"var renderer = FRAME.getResource( 'renderer' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Resolution', 256 )",
				"};",
				"",
				"var reference = new THREE.PerspectiveCamera();",
				"var renderTarget = new THREE.WebGLRenderTarget(",
				"\tparameters.size.value, parameters.size.value );",
				"",
				"var width = 2;",
				"var height = 4;",
				"",
				"var mirror = new THREE.Group();",
				"",
				"var mesh = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( width, height, 1, 1 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x999999,",
				"\t\tmap: renderTarget.texture,",
				"\t\tside: THREE.BackSide",
				"\t} )",
				");",
				"",
				"mesh.scale.x = - 1;",
				"",
				"var backboard = new THREE.Mesh(",
				"\tmesh.geometry,",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\tside: THREE.BackSide",
				"\t} )",
				");",
				"",
				"backboard.position.z -= 0.01;",
				"",
				"mirror.add( mesh );",
				"mirror.add( backboard );",
				"mirror.add( reference );",
				"",
				"reference.aspect = width / height;",
				"reference.updateProjectionMatrix();",
				"",
				"FRAME.addResource( 'mirror', mirror );",
				"",
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( !bedroom ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tbedroom.scene.add( mirror );",
				"",
				"\tmirror.position.z = 2;",
				"\tmirror.rotation.y = 0;",
				"\t",
				"\treference.position.y = - 0.4;",
				"\treference.position.z = 0.66;",
				"\treference.rotation.y = Math.PI;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( !bedroom ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tbedroom.scene.remove( mirror );",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tmirror.visible = false;",
				"\trenderer.render( scene, reference, renderTarget, true );",
				"\tmirror.visible = true;",
				"",
				"}"
			]
		],
		[
			"Animate Mirror In",
			[
				"",
				"",
				"function start () {",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar mirror = FRAME.getResource( 'mirror' );",
				"\tif ( !mirror ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.Out( progress );",
				"",
				"\tmirror.position.y = - 3 * ( 1 - t ) + 1;",
				"",
				"}"
			]
		],
		[
			"Animate Mirror Around",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"",
				"var radius = 2;",
				"",
				"function start () {",
				"",
				"\tvar mirror = FRAME.getResource( 'mirror' );",
				"\tif ( !mirror ) {",
				"\t\treturn;",
				"\t}",
				"\t",
				"\tif ( mirror.position.z !== 0 ) {",
				"\t\tradius = Math.abs( mirror.position.z );",
				"\t}",
				"",
				"}",
				"",
				"function end () {",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar mirror = FRAME.getResource( 'mirror' );",
				"\tif ( !mirror ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar t = TWEEN.Easing.Circular.InOut( progress );",
				"\tvar angle = - TWO_PI * t + HALF_PI;",
				"",
				"\tmirror.position.x = radius * Math.cos( angle );",
				"\tmirror.position.z = radius * Math.sin( angle );",
				"\t",
				"\tmirror.rotation.y = - angle + HALF_PI;",
				"\tif ( angle <= - 0.5221111501081905 ) {",
				"\t\tmirror.rotation.y += Math.PI;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Bedroom.theta.center",
			[
				"function start () {",
				"",
				"\tvar bedroom = FRAME.getResource( 'Stage 2' );",
				"\tif ( !bedroom ) {",
				"\t\treturn;",
				"\t}",
				"\tvar theta = bedroom.theta;",
				"\ttheta.clear();",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		]
	],
	"animations": [
		[
			"Stage 1",
			0,
			73.7606409027744,
			1,
			0
		],
		[
			"VR Update",
			0,
			266.422875,
			0,
			4
		],
		[
			"Render",
			0,
			266.422875,
			5,
			5
		],
		[
			"Enable Grass",
			2.533333333333333,
			26.111556111806447,
			2,
			56
		],
		[
			"Enable Mushrooms",
			26.127659574468087,
			42.02127659574469,
			3,
			57
		],
		[
			"Enable Trees",
			42,
			73.76470588235294,
			2,
			58
		],
		[
			"Stage 2",
			73.76015817143694,
			153.02223562393067,
			1,
			1
		],
		[
			"Vocals, \"As\"",
			73.90833333333329,
			74.55000000000021,
			2,
			59
		],
		[
			"Vocals, \"She\"",
			74.30833333333328,
			74.91666666666625,
			3,
			60
		],
		[
			"Vocals, \"Moves\"",
			74.68333333333334,
			75.33333333333285,
			2,
			61
		],
		[
			"Vocals, \"To\"",
			75.07499999999992,
			75.69166666666638,
			3,
			62
		],
		[
			"Vocals, \"Su-\"",
			75.49999999999996,
			76.14166666666583,
			2,
			63
		],
		[
			"Vocals, \"-i-\"",
			75.77499999999996,
			76.40833333333276,
			4,
			64
		],
		[
			"Vocals, \"-side\"",
			76.13333333333334,
			77.2499999999997,
			3,
			65
		],
		[
			"Vocals, \"In\"",
			77.6822429906542,
			78.29890965732095,
			2,
			6
		],
		[
			"Vocals, \"And\"",
			78.19166666666662,
			78.77500000000003,
			3,
			7
		],
		[
			"Vocals, \"Un-\"",
			78.58333333333333,
			79.20000000000007,
			2,
			8
		],
		[
			"Vocals, \"-der\"",
			78.95,
			79.55000000000008,
			3,
			9
		],
		[
			"Vocals, \"Ne-\"",
			79.28333333333333,
			79.8833333333334,
			2,
			10
		],
		[
			"Vocals, \"-on\"",
			79.61666666666666,
			80.2333333333334,
			3,
			11
		],
		[
			"Vocals, \"Lights\"",
			80.11666666666666,
			81.55000000000003,
			2,
			12
		],
		[
			"Vocals, \"Got\"",
			81.50265957446808,
			82.27003546099299,
			3,
			13
		],
		[
			"Vocals, \"No\"",
			81.83333333333334,
			82.57765957446817,
			2,
			14
		],
		[
			"Vocals, \"Hus-\"",
			82.31666666666668,
			83.06560283687945,
			3,
			15
		],
		[
			"Vocals, \"-band\"",
			82.76666666666668,
			83.5386524822696,
			2,
			16
		],
		[
			"Vocals, \"Got\"",
			83.25,
			84.0202127659575,
			3,
			17
		],
		[
			"Vocals, \"No\"",
			83.71382978723405,
			84.49326241134759,
			2,
			18
		],
		[
			"Vocals, \"Wife\"",
			84.08049645390071,
			85.6971631205674,
			3,
			19
		],
		[
			"Vocals, \"All\"",
			85.59574468085107,
			86.38297872340428,
			2,
			20
		],
		[
			"Vocals, \"I\"",
			86,
			86.78723404255321,
			3,
			21
		],
		[
			"Vocals, \"Want\"",
			86.48936170212765,
			87.25531914893618,
			2,
			22
		],
		[
			"Vocals, \"'s A\"",
			86.9583333333333,
			87.72429078014183,
			3,
			23
		],
		[
			"Vocals, \"View\"",
			87.29875886524819,
			88.06471631205672,
			4,
			24
		],
		[
			"Vocals, \"To-\"",
			87.59999999999995,
			88.23333333333301,
			2,
			25
		],
		[
			"Vocals, \"-night\"",
			88.10000000000001,
			89.47634408602161,
			3,
			26
		],
		[
			"Vocals, \"All\"",
			89.6304347826087,
			90.32608695652182,
			2,
			27
		],
		[
			"Vocals, \"I\"",
			89.96739130434783,
			90.65217391304355,
			3,
			28
		],
		[
			"Vocals, \"Want\"",
			90.51086956521739,
			91.2173913043479,
			2,
			29
		],
		[
			"Vocals, \"-'s A\"",
			90.85869565217392,
			91.57608695652182,
			3,
			30
		],
		[
			"Vocals, \"View\"",
			91.18478260869566,
			91.91304347826095,
			4,
			31
		],
		[
			"Vocals, \"To-\"",
			91.58695652173914,
			92.33695652173921,
			2,
			32
		],
		[
			"Vocals, \"-night\"",
			91.97826086956522,
			93.304347826087,
			3,
			33
		],
		[
			"Vocals, \"All\"",
			93.53079710144918,
			94.18079710144914,
			2,
			34
		],
		[
			"Vocals, \"I\"",
			93.94999999999996,
			94.59166666666636,
			3,
			35
		],
		[
			"Vocals, \"Want\"",
			94.39999999999999,
			95.0666666666662,
			2,
			36
		],
		[
			"Vocals, \"-'s A\"",
			94.82499999999995,
			95.433333333333,
			3,
			37
		],
		[
			"Vocals, \"View\"",
			95.19166666666666,
			95.8749999999996,
			4,
			38
		],
		[
			"Vocals, \"To-\"",
			95.475,
			96.14999999999962,
			2,
			39
		],
		[
			"Vocals, \"Night\"",
			95.99166666666666,
			97.55688405797103,
			3,
			40
		],
		[
			"Vocals, \"All\"",
			97.50649350649351,
			98.22077922077939,
			2,
			41
		],
		[
			"Vocals, \"I\"",
			97.90909090909093,
			98.6103896103898,
			4,
			42
		],
		[
			"Vocals, \"Want\"",
			98.35064935064936,
			99.03896103896122,
			3,
			43
		],
		[
			"Vocals, \"-'s A\"",
			98.72727272727273,
			99.50649350649364,
			2,
			44
		],
		[
			"Vocals, \"View\"",
			99.14285714285715,
			99.90909090909108,
			3,
			45
		],
		[
			"Vocals, \"To\"",
			99.45454545454548,
			100.2207792207794,
			4,
			46
		],
		[
			"Vocals, \"Night\"",
			99.93506493506497,
			101.10897797854328,
			2,
			47
		],
		[
			"Vocals, \"All\"",
			101.51086956521739,
			102.13043478260877,
			3,
			48
		],
		[
			"Vocals, \"I\"",
			101.86956521739131,
			102.4782608695653,
			4,
			49
		],
		[
			"Vocals, \"Want\"",
			102.30434782608695,
			102.94565217391312,
			2,
			50
		],
		[
			"Vocals, \"-'s A\"",
			102.68478260869566,
			103.27173913043487,
			3,
			51
		],
		[
			"Vocals, \"View\"",
			103.09782608695653,
			103.71739130434791,
			4,
			52
		],
		[
			"Vocals, \"To-\"",
			103.47826086956522,
			104.0978260869566,
			2,
			53
		],
		[
			"Vocals, \"-night\"",
			103.91304347826087,
			105.55434782608698,
			3,
			54
		],
		[
			"Vocals, \"Let It Go\"",
			105.51063829787235,
			121.3404255319147,
			2,
			55
		],
		[
			"Animation",
			121.33529411764707,
			124.75196078431381,
			3,
			67
		],
		[
			"Vocals, \"Eye to Eye\"",
			121.3404255319149,
			152.9874843554444,
			2,
			66
		],
		[
			"Animation",
			125.39166666666667,
			128.48333333333343,
			4,
			68
		],
		[
			"Stage 3",
			152.99289910975358,
			232.4501528808272,
			1,
			2
		],
		[
			"Stage 4: Neon Lights",
			232.44999999999993,
			266.422875,
			1,
			3
		]
	]
}