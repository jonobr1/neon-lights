{
	"config": {},
	"libraries": [
		"../release/third-party/url.js",
		"../release/third-party/has.js",
		"../release/third-party/signals.min.js",
		"../release/third-party/tween.js",
		"../release/third-party/three.js",
		"../release/third-party/three/js/effects/VREffect.js",
		"../release/third-party/three/js/loaders/FBXLoader2.js",
		"../release/third-party/three/js/controls/OrbitControls.js",
		"../release/third-party/three/js/controls/DeviceOrientationControls.js",
		"../release/third-party/three/js/controls/VRControls.js",
		"../release/third-party/three/js/vr/MouseController.js",
		"../release/third-party/three/js/vr/DaydreamController.js",
		"../release/third-party/orientation-arm-model.js",
		"../release/third-party/three/js/vr/ViveController.js"
	],
	"includes": [
		[
			"Setup",
			[
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = new THREE.WebGLRenderer( { antialias: true } );",
				"renderer.domElement.style.position = 'absolute';",
				"renderer.domElement.style.top = 0;",
				"renderer.domElement.style.left = 0;",
				"dom.appendChild( renderer.domElement );",
				"",
				"var scene = new THREE.Scene();",
				"scene.userData.clear = function() {",
				"",
				"\tvar children = scene.children.slice( 0 );",
				"\tfor ( var i = 0; i < children.length; i++ ) {",
				"\t\tvar child  = children[ i ];",
				"\t\tscene.remove( child );",
				"\t\tif ( child.dispose ) {",
				"\t\t\tchild.dispose();",
				"\t\t}",
				"\t}",
				"\t",
				"};",
				"",
				"var dolly = new THREE.Camera();",
				"var camera = new THREE.PerspectiveCamera();",
				"dolly.add( camera );",
				"",
				"var controls = {",
				"\tvirtualReality: new THREE.VRControls( camera ),",
				"\tdeviceOrientation: new THREE.DeviceOrientationControls( camera )",
				"};",
				"",
				"controls.current = controls.virtualReality;",
				"\t",
				"var effect = new THREE.VREffect( renderer );",
				"",
				"if ( navigator.getVRDisplays ) {",
				"",
				"\tnavigator.getVRDisplays()",
				"\t\t.then( function ( displays ) {",
				"",
				"\t\t\tvar hmd = displays[ 0 ];",
				"\t\t\teffect.setVRDisplay( hmd );",
				"\t\t\tcontrols.virtualReality.setVRDisplay( hmd );",
				"",
				"\t\t} )",
				"\t\t.catch( function () {",
				"",
				"\t\t\tcontrols.current = controls.deviceOrientation;\t\t",
				"",
				"\t\t} );",
				"",
				"}",
				"",
				"var resize = function ( event ) {",
				"\t",
				"\tvar width = dom.clientWidth;",
				"\tvar height = dom.clientHeight;",
				"",
				"\trenderer.setSize( width, height );",
				"\teffect.setSize( width, height );",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"\t",
				"\teffect.render( scene, camera );",
				"\t",
				"};",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"var isLocal = /localhost/i.test(window.location.href);",
				"var root = isLocal ? '../assets' : '//player-dev.cabrilleros.com/NEON_LIGHTS/assets';",
				"",
				"var loader = new THREE.FBXLoader();",
				"",
				"FRAME.addResource( 'renderer', renderer );",
				"FRAME.addResource( 'scene', scene );",
				"FRAME.addResource( 'dolly', dolly );",
				"FRAME.addResource( 'camera', camera );",
				"",
				"FRAME.addResource( 'controls', controls );",
				"FRAME.addResource( 'effect', effect );",
				"",
				"FRAME.addResource( 'root', root );",
				"FRAME.addResource( 'loader', loader );"
			]
		],
		[
			"Controllers",
			[
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var controllers = {",
				"",
				"\tmouse: new THREE.MouseController( renderer.domElement ),",
				"\tdaydream: new THREE.DaydreamController(),",
				"\tleft: new THREE.ViveController(0),",
				"\tright: new THREE.ViveController(1),",
				"",
				"\tdeltas: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler()",
				"\t},",
				"",
				"\tdragging: function () {",
				"\t\treturn controllers.mouse.userData.dragging",
				"\t\t\t|| controllers.daydream.userData.dragging",
				"\t\t\t|| controllers.left.userData.dragging",
				"\t\t\t|| controllers.right.userData.dragging;",
				"\t},",
				"\t",
				"\tprevious: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tupdate: function ( controller ) {",
				"",
				"\t\t\tvar obj = controllers.previous;",
				"\t\t\tvar d = controllers.deltas;",
				"",
				"\t\t\td.position.subVectors( controller.position, obj.position );",
				"",
				"\t\t\td.rotation.x = controller.rotation.x - obj.rotation.x;",
				"\t\t\td.rotation.y = controller.rotation.y - obj.rotation.y;",
				"\t\t\td.rotation.z = controller.rotation.z - obj.rotation.z;",
				"\t\t\t",
				"\t\t\tobj.position.copy( controller.position );",
				"\t\t\tobj.rotation.copy( controller.rotation );",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tsetup: function( parent ) {",
				"",
				"\t\tcontrollers.daydream.quaternion = new THREE.Quaternion();",
				"\t\tcontrollers.daydream.arm = new OrientationArmModel();",
				"",
				"\t\t// TODO: Create meshes for controllers here.",
				"",
				"\t\tparent.add( controllers.mouse );",
				"\t\tparent.add( controllers.daydream );",
				"\t\tparent.add( controllers.left );",
				"\t\tparent.add( controllers.right );",
				"",
				"\t\tcontrollers.mouse.addEventListener( 'mousedown', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.mouse );",
				"\t\t\tcontrollers.onTriggerDown( controllers.mouse );",
				"\t\t} );",
				"\t\tcontrollers.mouse.addEventListener( 'mouseup', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.mouse );",
				"\t\t} );",
				"",
				"\t\tcontrollers.left.addEventListener( 'triggerdown', function () {",
				"\t\t\tcontrollers.left.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.left );",
				"\t\t\tcontrollers.onTriggerDown( controllers.left );",
				"\t\t} );",
				"\t\tcontrollers.left.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.left.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.left );",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.right.addEventListener( 'triggerdown', function () {",
				"\t\t\tcontrollers.right.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.right );",
				"\t\t\tcontrollers.onTriggerDown( controllers.right );",
				"\t\t} );",
				"\t\tcontrollers.right.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.right.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.right );",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.daydream.addEventListener( 'touchpaddown', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = true;",
				"\t\t\tcontrollers.previous.update( controllers.daydream );",
				"\t\t\tcontrollers.onTriggerDown( controllers.daydream );",
				"\t\t} );",
				"\t\tcontrollers.daydream.addEventListener( 'touchpadup', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.daydream );",
				"\t\t} );",
				"",
				"\t\treturn controllers;",
				"\t\t",
				"\t},",
				"\t",
				"\tupdate: function( camera ) {",
				"",
				"\t\tvar daydream, pad;",
				"\t\t",
				"\t\tif ( has.mobile ) {",
				"",
				"\t\t\tdaydream = controllers.daydream;",
				"\t\t\tdaydream.update();",
				"",
				"\t\t\tpad = daydream.getGamepad();",
				"\t\t\t",
				"\t\t\tif ( pad ) {",
				"",
				"\t\t\t\tvar pose = pad.pose;",
				"\t\t\t\tvar orientation = daydream.quaternion",
				"\t\t\t\t\t.fromArray( pose.orientation );",
				"\t\t\t\tvar arm = daydream.arm;",
				"\t\t\t\t",
				"\t\t\t\tarm.setHeadOrientation( camera.quaternion );",
				"\t\t\t\tarm.setHeadPosition( camera.position );",
				"\t\t\t\tarm.setControllerOrientation( orientation );",
				"\t\t\t\tarm.update();",
				"\t\t\t\t",
				"\t\t\t\tpose = arm.getPose();",
				"\t\t\t\tdaydream.position.copy( pose.position );",
				"\t\t\t\t",
				"\t\t\t}",
				"\t\t\t",
				"\t\t} else {",
				"",
				"\t\t\tcontrollers.left.update();",
				"\t\t\tcontrollers.right.update();",
				"\t\t\tcontrollers.mouse.update();",
				"\t\t\t",
				"\t\t}",
				"\t\t",
				"\t\tif ( controllers.daydream.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.daydream );",
				"",
				"\t\t} else if ( controllers.right.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.right );",
				"",
				"\t\t} else if ( controllers.left.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.left );",
				"",
				"\t\t} else if ( controllers.mouse.userData.dragging ) {",
				"",
				"\t\t\tcontrollers.previous.update( controllers.mouse );",
				"",
				"\t\t}",
				"\t\t",
				"\t},",
				"",
				"\tonTriggerDown: function( controller ) { },",
				"\tonTriggerUp: function( controller ) { }",
				"",
				"};",
				"",
				"FRAME.addResource( 'controllers', controllers );"
			]
		],
		[
			"Annie",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var path = [FRAME.getResource( 'root' ), '/models/annie/'].join('');",
				"var loader = FRAME.getResource( 'loader' );",
				"",
				"var annie = new THREE.Group();",
				"var files = {",
				"\tmodel: 'ani_chr_1-forest_bindpose_v03.fbx',",
				"\tanimations: {",
				"\t\trun: 'ani_chr_1-forest_run_v03.fbx'",
				"\t}",
				"};",
				"",
				"annie.userData.currentAnimation = null;",
				"annie.userData.animations = {};",
				"annie.userData.play = function ( action ) {",
				"\t",
				"\tfor ( var k in annie.userData.animations ) {",
				"\t",
				"\t\tvar animation = annie.userData.animations[ k ];",
				"\t\tanimation.action[ k === action ? 'play' : 'stop' ]();",
				"\t\tif ( k === action ) { ",
				"\t\t\tannie.userData.currentAnimation = animation;",
				"\t\t}",
				"",
				"\t}",
				"\t",
				"};",
				"loader.load( path + files.model, modelLoaded );",
				"",
				"FRAME.addResource( 'annie', annie );",
				"",
				"function modelLoaded ( fbx ) {",
				"\t",
				"\tannie.add( fbx );",
				"\tannie.userData.model = fbx;",
				"\tannie.userData.model.mixer = new THREE.AnimationMixer( fbx );",
				"\t",
				"\tfbx.traverse( function ( child ) {",
				"\t\t",
				"\t\tif ( child.isMesh ) {",
				"\t\t\t",
				"\t\t\tchild.material.side = THREE.DoubleSide;",
				"",
				"\t\t}",
				"\t\t",
				"\t} );",
				"\t",
				"\tfor ( var k in files.animations ) {",
				"",
				"\t\tvar animation = files.animations[ k ];",
				"\t\tloader.load( path + animation, animationLoaded( k ) );",
				"",
				"\t} ",
				"\t",
				"}",
				"",
				"function animationLoaded ( name ) {",
				"\t",
				"\treturn function ( fbx ) {",
				"",
				"\t\tvar animation = fbx.animations[ 0 ];",
				"\t\tanimation.name += ': ' + name;",
				"\t\tanimation.action = annie.userData.model.mixer.clipAction( animation );",
				"\t\tannie.userData.animations[ name ] = animation;",
				"\t\t",
				"\t};",
				"\t",
				"}"
			]
		],
		[
			"Models",
			[
				"var Signal = signals.Signal;",
				"var root = FRAME.getResource( 'root' );",
				"var loader = FRAME.getResource( 'loader' );",
				"",
				"var models = {",
				"\t",
				"\tforest: {",
				"\t\tname: 'forest',",
				"\t\tfiles: [",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_flower_a_v01.fbx',",
				"",
				"\t\t\t'mdl_env_1_forest_grass_a01_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_a02_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_b01_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_b02_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_c01_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_c02_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_c03_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_d_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_e_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_f_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_grass_g_v01.fbx',",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_rock_a_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_rock_b_v01.fbx',",
				"",
				"\t\t\t'mdl_env_1_forest_mushroom_a_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_mushroom_b_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_mushroom_c_v01.fbx',",
				"",
				"\t\t\t'mdl_env_1_forest_tree_a_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_b_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_c_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_d_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_e_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_f_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_g_v01.fbx',",
				"\t\t\t'mdl_env_1_forest_tree_h_v01.fbx'",
				"\t\t\t",
				"\t\t]",
				"\t},",
				"",
				"\thouse: {",
				"\t\tname: 'house',",
				"\t\tfiles: []",
				"\t},",
				"\t",
				"\tcity: {",
				"\t\tname: 'city',",
				"\t\tfiles: [",
				"\t\t\t'building01.fbx',",
				"\t\t\t'building02.fbx',",
				"\t\t\t'building03.fbx',",
				"\t\t\t'building04.fbx',",
				"\t\t\t'building05.fbx',",
				"\t\t\t'building06.fbx',",
				"\t\t\t'building07.fbx',",
				"\t\t\t'building08.fbx',",
				"\t\t\t'building09.fbx',",
				"\t\t\t'building10.fbx',",
				"\t\t\t'building11.fbx',",
				"\t\t\t'building12.fbx',",
				"\t\t]",
				"\t}",
				"\t",
				"};",
				"",
				"for ( var name in models ) {",
				"",
				"\tvar stage = models[ name ];",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"",
				"\tenhance( stage );",
				"\t",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tload( stage, files[ i ] );",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"function enhance ( stage ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"\tvar loaded = 0;",
				"\tvar isComplete = false;",
				"",
				"\tstage.geometries = [];",
				"\tstage.onLoad = new Signal();",
				"\tstage.ready = function ( func ) {",
				"\t\tif ( isComplete ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tstage.onLoad.add( func );",
				"\t};",
				"\t",
				"\tfiles.complete = function () {",
				"",
				"\t\tloaded++;",
				"",
				"\t\tif ( !isComplete && loaded >= length ) {",
				"\t\t\tisComplete = true;",
				"\t\t\tstage.onLoad.dispatch();",
				"\t\t}",
				"\t\t",
				"\t\t",
				"\t};",
				"\t",
				"}",
				"",
				"function load ( stage, path ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar url = [ root, 'models', stage.name, path ].join ( '/' );",
				"\t",
				"\tloader.load( url, function ( fbx ) {",
				"",
				"\t\textract( stage, fbx );",
				"\t\tfiles.complete();",
				"\t\t",
				"\t} );",
				"\t",
				"}",
				"",
				"function extract ( stage, fbx ) {",
				"\t",
				"\tvar geometries = stage.geometries;",
				"\t",
				"\tfbx.traverse( function( child ) {",
				"",
				"\t\tif ( child.isMesh ) {",
				"\t\t\tgeometries.push( child.geometry );",
				"\t\t}",
				"\t\t",
				"\t} );",
				"",
				"}",
				"",
				"FRAME.addResource( 'models', models );"
			]
		],
		[
			"Materials",
			[
				"var road = {",
				"",
				"\tuniforms: {",
				"",
				"\t\tcursor: { type: 'v2', value: new THREE.Vector2() },",
				"\t\t",
				"\t\tsubdivisions: { type: 'f', value: 32 },",
				"\t\tcurvature: { type: 'f', value: 1 },",
				"\t\tsize: { type: 'f', value: 1 },",
				"",
				"\t\tmedian: { type: 'c', value: new THREE.Color( 'red' ) },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }",
				"",
				"\t},",
				"\t",
				"\tvertexShader: [",
				"",
				"\t\t'uniform float curvature;',",
				"\t\t'uniform float size;',",
				"\t\t'varying vec2 vUv;',",
				"\t\t",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec3 pos = vec3( position );',",
				"",
				"\t\t\t'float x = pos.x / size;',",
				"\t\t\t'float y = pos.y / size;',",
				"",
				"\t\t\t'float x2 = x * 2.0;',",
				"\t\t\t'float y2 = y * 2.0;',",
				"",
				"\t\t\t'float dist = curvature * sqrt( x2 * x2 + y2 * y2 );',",
				"",
				"\t\t\t'pos.z = size * ( dist * dist ) / 2.0;',",
				"\t\t",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t\t'}'",
				"\t\t",
				"\t].join( '\\n' ),",
				"\t",
				"\tfragmentShader: [",
				"",
				"\t\t'float PI = ' + Math.PI + ';',",
				"",
				"\t\t'uniform vec2 cursor;',",
				"\t\t'uniform float subdivisions;',",
				"\t\t'uniform float size;',",
				"",
				"\t\t'uniform vec3 median;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"",
				"\t\t'varying vec2 vUv;',",
				"\t\t",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float threshold = 25.0 / size;',",
				"",
				"\t\t\t'vec2 pos = vec2( cursor.x + vUv.x, - cursor.y + vUv.y );',",
				"\t\t\t'pos = mod( pos, 1.0 );',",
				"\t\t\t'pos = mod( subdivisions * pos, 1.0 );',",
				"",
				"\t\t\t'vec2 isMedian = vec2( sin( pos * PI ) );',",
				"\t\t\t'vec2 isIntersection = vec2( 1.0 - isMedian.y, 1.0 - isMedian.x );',",
				"",
				"\t\t\t'isMedian = step( vec2( threshold ), isMedian );',",
				"\t\t\t'isIntersection = step( vec2( 0.75 ), isIntersection );',",
				"",
				"\t\t\t'float t = clamp( isMedian.x + isIntersection.x, 0.0, 1.0 );',",
				"\t\t\t'vec3 layer = mix( median, color, t );',",
				"",
				"\t\t\t't = clamp( isMedian.y + isIntersection.y, 0.0, 1.0 );',",
				"\t\t\t'layer = mix( median, layer, t );',",
				"",
				"\t\t\t'float dist = distance( vec2( 0.5 ), vUv ) * 2.0;',",
				"\t\t\t't = clamp( dist, 0.0, 1.0 );',",
				"",
				"\t\t\t'gl_FragColor = vec4( mix( layer, fog, pow( t, 0.5 ) ), 1.0 );',",
				"",
				"\t\t'}'",
				"\t\t",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var floor = {",
				"",
				"\tuniforms: {",
				"\t\tamount: { type: 'f', value: 6 },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }",
				"\t},",
				"",
				"\tvertexShader: [",
				"",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform float amount;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float dist = distance( vec2( 0.5 ), vUv ) * 2.0;',",
				"\t\t\t'float t = clamp( floor( pow( dist, 0.4 ) * amount ) / amount, 0.0, 1.0 );',",
				"\t\t\t'gl_FragColor = vec4( mix( mix( color, fog, t ), fog, pow( dist, 0.5 ) ), 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var backdrop = {",
				"",
				"\tuniforms: {",
				"\t\toffset: { type: 'f', value: 0.5 },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }",
				"\t},",
				"",
				"\tvertexShader: [",
				"",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform float offset;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float t = smoothstep( offset, 1.0, vUv.y );',",
				"\t\t\t'gl_FragColor = vec4( mix( fog, color, pow( t, 3.0 ) ), 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var wave = {",
				"",
				"\tuniforms: {",
				"\t\ttime: { type: 'f', value: 0 },",
				"\t\tfogColor: { type: 'c', value: new THREE.Color() },",
				"\t\tfogNear: { type: 'f', value: 0 },",
				"\t\tfogFar: { type: 'f', value: 50 }",
				"\t},",
				"\t",
				"\tvertexShader: [",
				"",
				"\t\t'float PI = ' + Math.PI + ';',",
				"\t\t",
				"\t\t'uniform float time;',",
				"",
				"\t\t'varying vec4 mvPosition;',",
				"\t\t'varying vec3 vertexColor;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec3 pos = vec3( position );',",
				"\t\t\t'vec4 t = projectionMatrix * vec4( 1.0 );',",
				"\t\t",
				"\t\t\t'float osc = ( 1.0 + sin( time + PI * ( t.x + t.y + t.z ) / 3.0 ) ) / 2.0;',",
				"\t\t\t'float sway = pow( pos.y, 2.0 ) * osc;',",
				"\t\t",
				"\t\t\t'pos.x += sway / 100.0;',",
				"",
				"\t\t\t'vertexColor = color;',",
				"\t\t\t'mvPosition = modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t\t\t'gl_Position = projectionMatrix * mvPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\t",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform vec3 fogColor;',",
				"\t\t'uniform float fogNear;',",
				"\t\t'uniform float fogFar;',",
				"\t\t",
				"\t\t'varying vec2 vUv;',",
				"\t\t'varying vec4 mvPosition;',",
				"\t\t'varying vec3 vertexColor;',",
				"\t\t",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float fogDepth = - mvPosition.z;',",
				"\t\t\t'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',",
				"",
				"\t\t\t'gl_FragColor = vec4( mix( vertexColor, fogColor, fogFactor ), 1.0 );',",
				"",
				"\t\t'}'",
				"\t\t",
				"\t].join( '\\n' )",
				"\t",
				"};",
				"",
				"var materials = {",
				"",
				"\tforest: {",
				"\t\t",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( floor.uniforms ),",
				"\t\t\tvertexShader: floor.vertexShader,",
				"\t\t\tfragmentShader: floor.fragmentShader",
				"\t\t\t",
				"\t\t} ),",
				"\t\t",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: false,",
				"\t\t\t",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"\t\t\t",
				"\t\t} ),",
				"\t\t",
				"\t\twave: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tvertexColors: true,",
				"\t\t\tfog: true,",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\t",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( wave.uniforms ),",
				"\t\t\tvertexShader: wave.vertexShader,",
				"\t\t\tfragmentShader: wave.fragmentShader",
				"\t\t\t",
				"\t\t} )",
				"",
				"\t},",
				"\t",
				"\thouse: {",
				"\t},",
				"\t",
				"\tcity: {",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"//\t\t\twireframe: true,",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( road.uniforms ),",
				"\t\t\tvertexShader: road.vertexShader,",
				"\t\t\tfragmentShader: road.fragmentShader",
				"\t\t} ),",
				"",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: false,",
				"\t\t\t",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"\t\t\t",
				"\t\t} ),",
				"\t\t",
				"\t\tbuilding: new THREE.MeshBasicMaterial( {",
				"\t\t\tcolor: 'white',",
				"\t\t\tvertexColors: true",
				"\t\t} )",
				"\t\t",
				"\t}",
				"\t",
				"};",
				"",
				"FRAME.addResource( 'materials', materials );"
			]
		]
	],
	"effects": [
		[
			"Forest",
			[
				"var TWO_PI = Math.PI * 2;",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).forest;",
				"var materials = FRAME.getResource( 'materials' ).forest;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 1024 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 ),",
				"\tforceField: new FRAME.Parameters.Float( 'Field', 0.025 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"",
				"var theta = {",
				"\tdestination: 0,",
				"\tcurrent: 0,",
				"\tdrag: 0.66",
				"};",
				"",
				"var step = {",
				"\tdestination: 0.1 * parameters.step.value,",
				"\tcurrent: 0.1 * parameters.step.value,",
				"\tdrag: 0.0625",
				"};",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.66 );",
				"",
				"materials.floor.uniforms.color.value.set( 0x72fa8c );",
				"materials.backdrop.uniforms.color.value.set( 0xdde9ab );",
				"",
				"materials.floor.uniforms.fog.value = group.fog.color;",
				"materials.floor.uniforms.fog.needsUpdate = true;",
				"materials.backdrop.uniforms.fog.value = group.fog.color;",
				"materials.backdrop.uniforms.fog.needsUpdate = true;",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 1, 1 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value ),",
				"\tmaterials.backdrop",
				");",
				"group.add( backdrop );",
				"",
				"var elements = [];",
				"",
				"material = materials.wave;",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"\t\t",
				"\t\tmesh.scale.setScalar( Math.random() / 2 + 0.5 );",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"\t\t",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"function start () {",
				"",
				"\tannie.userData.play( 'run' );",
				"\t",
				"\tdolly.position.set( 0, 0.6, - 2 );",
				"\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"\t",
				"\tif ( material.uniforms && material.uniforms.time ) {",
				"\t\tmaterial.uniforms.time.value += (dt || 0 ) * 4;",
				"\t}",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.05 * parameters.step.value;",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 0.75;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"",
				"\t}",
				"",
				"\tstep.current += ( step.destination - step.current ) * theta.drag;",
				"\ttheta.current += ( theta.destination - theta.current ) * theta.drag;",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar amplitude = step.current * ( dt || 0 );",
				"\tvar forceField = parameters.forceField.value;",
				"",
				"\tcursor.x += amplitude * Math.cos( theta.current );",
				"\tcursor.y += amplitude * Math.sin( theta.current );",
				"\t",
				"\tgroup.rotation.y = theta.current - Math.PI / 2;",
				"\t",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 2 ) - 1;",
				"\t\tvar y = mod( cursor.y + offset.y, 2 ) - 1;",
				"\t\t",
				"\t\tvar angle = Math.atan2( - y, - x );",
				"\t\tvar buffer = forceField * ( 128 / size );",
				"\t\tvar phi = angle + Math.PI;",
				"\t\t",
				"\t\tmesh.position.x = x + Math.cos( phi ) * buffer;",
				"\t\tmesh.position.z = y + Math.sin( phi ) * buffer;",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t}",
				"\t",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"House",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"",
				"// House",
				"",
				"var group = new THREE.Group();",
				"",
				"var geometry = new THREE.BoxBufferGeometry( 4, 4, 4 );",
				"geometry.translate( 0, 2, 0 );",
				"",
				"var material = new THREE.MeshNormalMaterial( { side: THREE.BackSide } );",
				"var mesh = new THREE.Mesh( geometry, material );",
				"group.add( mesh );",
				"",
				"// function init(){}",
				"",
				"function start(){",
				"\t",
				"\tscene.add( group );",
				"\t",
				"}",
				"",
				"function end() {",
				"\t",
				"\tscene.remove( group );",
				"\t",
				"}",
				"",
				"function update( progress ){",
				"",
				"\tdolly.position.set( Math.sin( progress * 80 ) * 2, 0.6, Math.cos( progress * 80 ) * 2 );",
				"\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );",
				"",
				"}"
			]
		],
		[
			"City",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).city;",
				"var materials = FRAME.getResource( 'materials' ).city;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 1000 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 1024 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.33 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"var theta = {",
				"\tdestination: 0,",
				"\tcurrent: 0,",
				"\tdrag: 0.66",
				"};",
				"",
				"var step = {",
				"\tdestination: 0.1 * parameters.step.value,",
				"\tcurrent: 0.1 * parameters.step.value,",
				"\tdrag: 0.0625",
				"};",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.4 );",
				"",
				"materials.floor.uniforms.cursor.value = cursor;",
				"materials.floor.uniforms.subdivisions.value = cols;",
				"materials.floor.uniforms.size.value = parameters.size.value;",
				"materials.floor.uniforms.fog.value = group.fog.color;",
				"materials.floor.uniforms.color.value.set( 0x262532 );",
				"materials.floor.uniforms.median.value.set( 0x3a394a );",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 1024, 1024 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"materials.backdrop.uniforms.color.value.set( 0x420c6b );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value ),",
				"\tmaterials.backdrop",
				");",
				"group.add( backdrop );",
				"",
				"var elements = [];",
				"",
				"var material = new THREE.MeshBasicMaterial( {",
				"\tcolor: 'white',",
				"\tvertexColors: true",
				"} );",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = Math.floor( Math.random() * length );",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\t",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"\t\t",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"\t\t",
				"\t\t// mesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"\t\t",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"function start () {",
				"",
				"\tannie.userData.play( 'run' );",
				"\t",
				"\tdolly.position.set( 0, 0.6, - 2 );",
				"\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"\t",
				"\tif ( material.uniforms && material.uniforms.time ) {",
				"\t\tmaterial.uniforms.time.value += (dt || 0 ) * 4;",
				"\t}",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.05 * parameters.step.value;",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 0.75;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"",
				"\t}",
				"",
				"\tstep.current += ( step.destination - step.current ) * theta.drag;",
				"\ttheta.current += ( theta.destination - theta.current ) * theta.drag;",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = step.current * ( dt || 0 );",
				"\tvar curvature = Math.min( progress * 2, 1.0 );",
				"",
				"\tcursor.x += amplitude * Math.cos( theta.current );",
				"\tcursor.y += amplitude * Math.sin( theta.current );",
				"\t",
				"\tgroup.rotation.y = theta.current - Math.PI / 2;",
				"",
				"\tground.material.uniforms.curvature.value = curvature;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"\t\tvar x2 = x * 2;",
				"\t\tvar y2 = y * 2;",
				"",
				"\t\tvar phi = Math.atan2( - y, - x );",
				"\t\tvar dist = curvature * Math.sqrt( x2 * x2 + y2 * y2 );",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"",
				"\t\tmesh.rotation.x = Math.sin( phi );",
				"\t\tmesh.rotation.z = Math.cos( phi );",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.y = size * ( dist * dist ) / 2;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t\tmesh.rotation.x *= - HALF_PI * dist;",
				"\t\tmesh.rotation.z *= HALF_PI * dist;",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"Effect",
			[
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"// function init(){}",
				"",
				"function start(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var clock = FRAME.getResource( 'clock' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"scene.userData.clear();",
				"scene.add( dolly );",
				"scene.add( new THREE.AmbientLight( 0xffffff ) );",
				"scene.add( annie );",
				"",
				"var controls = FRAME.getResource( 'controls' );",
				"var controllers = FRAME.getResource( 'controllers' )",
				"\t.setup( dolly );",
				"",
				"function update ( progress ) {",
				"",
				"\tcontrols.current.update();",
				"\tcontrollers.update( camera );",
				"",
				"}"
			]
		],
		[
			"Effect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"scene.userData.clear();",
				"scene.add( dolly );",
				"scene.add( new THREE.AmbientLight( 0xffffff ) );",
				"scene.add( annie );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tif ( annie.userData.model ) {",
				"\t\tannie.userData.model.mixer.update( dt );",
				"\t}",
				"",
				"\teffect.render( scene, camera );",
				"",
				"}"
			]
		]
	],
	"animations": [
		[
			"Render",
			0,
			266.422875,
			4,
			5
		],
		[
			"VR Update",
			0,
			266.422875,
			0,
			4
		],
		[
			"Stage 1",
			0,
			73.7606409027744,
			1,
			0
		],
		[
			"Stage 2",
			73.7442447766915,
			153.01816332926148,
			1,
			1
		],
		[
			"Stage 3",
			153.02515717426974,
			232.48241094534336,
			2,
			2
		],
		[
			"Stage 4: Neon Lights",
			232.4999999999999,
			266.422875,
			1,
			3
		]
	]
}