{
	"config": {},
	"libraries": [
		"../release/third-party/url.js",
		"../release/third-party/has.js",
		"../release/third-party/xhr.js",
		"../release/third-party/signals.min.js",
		"../release/third-party/tween.js",
		"../release/third-party/three.js",
		"../release/third-party/three/js/ShaderPass.js",
		"../release/third-party/three/js/effects/VREffect.js",
		"../release/third-party/three/js/loaders/FBXLoader2.js",
		"../release/third-party/three/js/controls/OrbitControls.js",
		"../release/third-party/three/js/controls/DeviceOrientationControls.js",
		"../release/third-party/three/js/controls/VRControls.js",
		"../release/third-party/three/js/vr/MouseController.js",
		"../release/third-party/three/js/vr/DaydreamController.js",
		"../release/third-party/orientation-arm-model.js",
		"../release/third-party/three/js/vr/ViveController.js",
		"../release/third-party/texture-animator.js",
		"../release/third-party/storyline.js",
		"../release/src/NeonEffect.js"
	],
	"includes": [
		[
			"Ease",
			[
				"var Ease = function( value, drag ) {",
				"",
				"\tthis.original = value || 0;",
				"",
				"\tthis.value = this.original;",
				"\tthis.destination = this.original;",
				"",
				"\tif ( ( typeof drag ) == 'number' ) {",
				"\t\tthis.drag = drag;",
				"\t}",
				"",
				"};",
				"",
				"Ease.Resolution = 50;",
				"",
				"Ease.prototype = {",
				"",
				"\tdrag: 0.33,",
				"",
				"\tupdate: function( timeDelta ) {",
				"\t\tif ( ( typeof timeDelta ) == 'number' ) {",
				"\t\t\tvar drag = timeDelta * this.drag;",
				"\t\t\tthis.value += ( this.destination - this.value ) * drag * Ease.Resolution;",
				"\t\t\treturn this;",
				"\t\t}",
				"\t\tthis.value += ( this.destination - this.value ) * this.drag;",
				"\t\treturn this;",
				"\t},",
				"",
				"\tclear: function() {",
				"\t\tthis.destination = this.value = this.original;",
				"\t\treturn this;",
				"\t}",
				"",
				"};",
				"",
				"FRAME.addResource( 'Ease', Ease );"
			]
		],
		[
			"Setup",
			[
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = new THREE.WebGLRenderer( { antialias: true } );",
				"renderer.domElement.style.position = 'absolute';",
				"renderer.domElement.style.top = 0;",
				"renderer.domElement.style.left = 0;",
				"dom.appendChild( renderer.domElement );",
				"",
				"var scene = new THREE.Scene();",
				"scene.userData.clear = function() {",
				"",
				"\tvar children = scene.children.slice( 0 );",
				"\tfor ( var i = 0; i < children.length; i++ ) {",
				"\t\tvar child  = children[ i ];",
				"\t\tscene.remove( child );",
				"\t\tif ( child.dispose ) {",
				"\t\t\tchild.dispose();",
				"\t\t}",
				"\t}",
				"\t",
				"};",
				"",
				"var dolly = new THREE.Camera();",
				"var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 500 );",
				"",
				"dolly.userData.distance = 2;",
				"dolly.userData.target = new THREE.Vector3( 0.0, 0.6, 0 );",
				"dolly.userData.reset = function() {",
				"",
				"\tdolly.position.copy( dolly.userData.target );",
				"\tdolly.position.z -= dolly.userData.distance;",
				"\tdolly.lookAt( dolly.userData.target );",
				"",
				"};",
				"",
				"camera.userData.fov = {",
				"\tcurrent: camera.fov,",
				"\tdestination: camera.fov,",
				"\tdrag: 0.125,",
				"\tlimit: 0.01",
				"};",
				"",
				"dolly.add( camera );",
				"",
				"var controls = {",
				"\tvirtualReality: new THREE.VRControls( camera ),",
				"\tdeviceOrientation: new THREE.DeviceOrientationControls( camera ),",
				"\tupdate: function () {",
				"",
				"\t\tif ( controls.hasWebVR ) {",
				"\t\t\tcontrols.virtualReality.update();",
				"\t\t} else if ( has.mobile ) {",
				"\t\t\tcontrols.deviceOrientation.update();",
				"\t\t}",
				"",
				"\t}",
				"};",
				"\t",
				"var effect = new THREE.VREffect( renderer );",
				"",
				"var neon = new THREE.NeonEffect( effect, renderer );",
				"neon.enabled = false;",
				"neon.scale = 0.3;",
				"",
				"if ( navigator.getVRDisplays ) {",
				"",
				"\tnavigator.getVRDisplays()",
				"\t\t.then( function ( displays ) {",
				"",
				"\t\t\tcontrols.hasWebVR = true;",
				"\t\t",
				"\t\t\tvar hmd = displays[ 0 ];",
				"\t\t\teffect.setVRDisplay( hmd );",
				"\t\t\tcontrols.virtualReality.setVRDisplay( hmd );",
				"",
				"\t\t\twindow.addEventListener( 'vrdisplayactivate', function () {",
				"\t\t\t\tcontrols.virtualReality.resetPose();",
				"\t\t\t}, false );",
				"\t\t",
				"\t\t\twindow.addEventListener( 'vrdisplaydeactivate', function () {",
				"\t\t\t\t// TODO: Check",
				"\t\t\t\tdolly.userData.reset();",
				"\t\t\t} );",
				"",
				"\t\t} )",
				"\t\t.catch( function () {",
				"",
				"\t\t} );",
				"",
				"}",
				"",
				"var resize = function ( event ) {",
				"\t",
				"\tvar width = dom.clientWidth;",
				"\tvar height = dom.clientHeight;",
				"",
				"\trenderer.setSize( width, height );",
				"\teffect.setSize( width, height );",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"\t",
				"\teffect.render( scene, camera );",
				"\t",
				"};",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"var isLocal = /localhost/i.test(window.location.href);",
				"var root = isLocal ? '../assets' : '//player-dev.cabrilleros.com/NEON_LIGHTS/assets';",
				"",
				"var loader = new THREE.FBXLoader();",
				"",
				"FRAME.addResource( 'renderer', renderer );",
				"FRAME.addResource( 'scene', scene );",
				"FRAME.addResource( 'dolly', dolly );",
				"FRAME.addResource( 'camera', camera );",
				"",
				"FRAME.addResource( 'controls', controls );",
				"FRAME.addResource( 'effect', effect );",
				"FRAME.addResource( 'neon', neon );",
				"",
				"FRAME.addResource( 'root', root );",
				"FRAME.addResource( 'loader', loader );"
			]
		],
		[
			"Controllers",
			[
				"var renderer = FRAME.getResource( 'renderer' );",
				"var v3 = new THREE.Vector3();",
				"var eu = new THREE.Euler();",
				"",
				"var controllers = {",
				"",
				"\tmouse: new THREE.MouseController( renderer.domElement ),",
				"\tdaydream: new THREE.DaydreamController(),",
				"\tleft: new THREE.ViveController(0),",
				"\tright: new THREE.ViveController(1),",
				"",
				"\tactive: '',",
				"",
				"\tdeltas: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler()",
				"\t},",
				"\t",
				"\torigin: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tthresholds: {",
				"\t\t\tposition: 0.1,",
				"\t\t\trotation: 0.1",
				"\t\t},",
				"\t\tclicked: function ( controller ) {",
				"",
				"\t\t\tvar origin = controllers.origin;",
				"\t\t\tvar tp = origin.thresholds.position;",
				"\t\t\tvar tr = origin.thresholds.rotation;",
				"",
				"\t\t\tv3.x = Math.abs( controller.position.x - origin.position.x );",
				"\t\t\tv3.y = Math.abs( controller.position.y - origin.position.y );",
				"\t\t\tv3.z = Math.abs( controller.position.z - origin.position.z );",
				"",
				"\t\t\teu.x = Math.abs( controller.rotation.x - origin.rotation.x );",
				"\t\t\teu.y = Math.abs( controller.rotation.y - origin.rotation.y );",
				"\t\t\teu.z = Math.abs( controller.rotation.z - origin.rotation.z );",
				"",
				"\t\t\treturn v3.x < tp && v3.y < tp && v3.z < tp",
				"\t\t\t\t&& eu.x < tr && eu.y < tr && eu.z < tr;",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tdragging: function () {",
				"\t\treturn controllers.mouse.userData.dragging",
				"\t\t\t|| controllers.daydream.userData.dragging",
				"\t\t\t|| controllers.left.userData.dragging",
				"\t\t\t|| controllers.right.userData.dragging;",
				"\t},",
				"\t",
				"\tprevious: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tupdate: function ( controller ) {",
				"",
				"\t\t\tvar obj = controllers.previous;",
				"\t\t\tvar d = controllers.deltas;",
				"",
				"\t\t\td.position.subVectors( controller.position, obj.position );",
				"",
				"\t\t\td.rotation.x = controller.rotation.x - obj.rotation.x;",
				"\t\t\td.rotation.y = controller.rotation.y - obj.rotation.y;",
				"\t\t\td.rotation.z = controller.rotation.z - obj.rotation.z;",
				"\t\t\t",
				"\t\t\tobj.position.copy( controller.position );",
				"\t\t\tobj.rotation.copy( controller.rotation );",
				"",
				"\t\t},",
				"\t\tset: function ( controller ) {",
				"",
				"\t\t\tvar previous = controllers.previous;",
				"\t\t\tvar deltas = controllers.deltas;",
				"\t\t\tvar origin = controllers.origin;",
				"\t\t\t",
				"\t\t\tdeltas.rotation.x = deltas.rotation.y = deltas.rotation.z = 0;",
				"\t\t\tdeltas.position.set( 0, 0, 0 );",
				"\t\t\t",
				"\t\t\tprevious.position.copy( controller.position );",
				"\t\t\tprevious.rotation.copy( controller.rotation );",
				"",
				"\t\t\torigin.position.copy( controller.position );",
				"\t\t\torigin.rotation.copy( controller.rotation );",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tsetup: function( parent ) {",
				"\t\t",
				"\t\tcontrollers.daydream.quaternion = new THREE.Quaternion();",
				"\t\tcontrollers.daydream.arm = new OrientationArmModel();",
				"\t\t",
				"\t\tvar root = FRAME.getResource( 'root' );",
				"\t\tvar loader = FRAME.getResource( 'loader' );",
				"\t\tvar url = root + '/models/controllers/hand.fbx';",
				"\t\t",
				"\t\tloader.load(url, function( fbx ) {",
				"",
				"\t\t\tvar geo = fbx.skeleton.bones[ 0 ].geometry;",
				"\t\t\tvar mat = new THREE.MeshBasicMaterial({",
				"\t\t\t\tvertexColors: THREE.VertexColors",
				"\t\t\t});",
				"\t\t\t",
				"\t\t\tvar handRight = new THREE.Mesh( geo, mat );",
				"\t\t\tvar handLeft = new THREE.Mesh( geo, mat );",
				"\t\t\tvar handDaydream = new THREE.Mesh( geo, mat );",
				"",
				"\t\t\thandLeft.scale.x *= - 1;",
				"",
				"\t\t\tcontrollers.right.add( handRight );",
				"\t\t\tcontrollers.left.add( handLeft );",
				"\t\t\tcontrollers.daydream.add( handDaydream );",
				"",
				"\t\t});",
				"",
				"\t\tcontrollers.daydream.visible = controllers.left.visible",
				"\t\t\t= controllers.right.visible = false;",
				"",
				"\t\tparent.add( controllers.mouse );",
				"\t\tparent.add( controllers.daydream );",
				"\t\tparent.add( controllers.left );",
				"\t\tparent.add( controllers.right );",
				"",
				"\t\tcontrollers.mouse.addEventListener( 'mousedown', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'mouse';",
				"\t\t\tcontrollers.previous.set( controllers.mouse );",
				"\t\t\tcontrollers.onTriggerDown( controllers.mouse );",
				"\t\t} );",
				"\t\tcontrollers.mouse.addEventListener( 'mouseup', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.mouse );",
				"\t\t\tif ( controllers.origin.clicked( controllers.mouse ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.mouse );",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\tcontrollers.left.addEventListener( 'triggerdown', function () {",
				"\t\t\tcontrollers.left.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'left';",
				"\t\t\tcontrollers.previous.set( controllers.left );",
				"\t\t\tcontrollers.onTriggerDown( controllers.left );",
				"\t\t} );",
				"\t\tcontrollers.left.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.left.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.left );",
				"\t\t\tif ( controllers.origin.clicked( controllers.left ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.left );",
				"\t\t\t}",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.right.addEventListener( 'triggerdown', function () {",
				"\t\t\tcontrollers.right.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'right';",
				"\t\t\tcontrollers.previous.set( controllers.right );",
				"\t\t\tcontrollers.onTriggerDown( controllers.right );",
				"\t\t} );",
				"\t\tcontrollers.right.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.right.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.right );",
				"\t\t\tif ( controllers.origin.clicked( controllers.right ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.right );",
				"\t\t\t}",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.daydream.addEventListener( 'touchpaddown', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'daydream';",
				"\t\t\tcontrollers.previous.set( controllers.daydream );",
				"\t\t\tcontrollers.onTriggerDown( controllers.daydream );",
				"\t\t} );",
				"\t\tcontrollers.daydream.addEventListener( 'touchpadup', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.daydream );",
				"\t\t\tif ( controllers.origin.clicked( controllers.daydream ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.daydream );",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\treturn controllers;",
				"\t\t",
				"\t},",
				"\t",
				"\tupdate: function( camera ) {",
				"",
				"\t\tif ( !navigator.getGamepads ) {",
				"",
				"\t\t\tcontrollers.mouse.update();",
				"\t\t\treturn;\t// Safari hack",
				"",
				"\t\t}",
				"\t\t",
				"\t\tvar daydream, pad;",
				"\t\t",
				"\t\tif ( has.mobile ) {",
				"",
				"\t\t\tdaydream = controllers.daydream;",
				"\t\t\tdaydream.update();",
				"",
				"\t\t\tpad = daydream.getGamepad();",
				"\t\t\t",
				"\t\t\tif ( pad && pad.pose ) {",
				"",
				"\t\t\t\tvar pose = pad.pose;",
				"\t\t\t\tvar orientation = daydream.quaternion",
				"\t\t\t\t\t.fromArray( pose.orientation );",
				"\t\t\t\tvar arm = daydream.arm;",
				"\t\t\t\t",
				"\t\t\t\tarm.setHeadOrientation( camera.quaternion );",
				"\t\t\t\tarm.setHeadPosition( camera.position );",
				"\t\t\t\tarm.setControllerOrientation( orientation );",
				"\t\t\t\tarm.update();",
				"\t\t\t\t",
				"\t\t\t\tpose = arm.getPose();",
				"\t\t\t\tdaydream.position.copy( pose.position );",
				"\t\t\t\t",
				"\t\t\t}",
				"\t\t\t",
				"\t\t} else {",
				"",
				"\t\t\tcontrollers.left.update();",
				"\t\t\tcontrollers.right.update();",
				"\t\t\tcontrollers.mouse.update();",
				"\t\t\t",
				"\t\t}",
				"",
				"\t\tvar active = controllers[ controllers.active ];",
				"",
				"\t\tif ( active ) {",
				"\t\t\tcontrollers.previous.update( active );",
				"\t\t}",
				"\t\t",
				"\t},",
				"",
				"\tonTriggerDown: function ( controller ) {},",
				"",
				"\tonTriggerUp: function ( controller ) {},",
				"\t",
				"\tonTriggerClick: function ( controller ) {}",
				"",
				"};",
				"",
				"FRAME.addResource( 'controllers', controllers );"
			]
		],
		[
			"Annie",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var root = FRAME.getResource( 'root' );",
				"var path = [root, '/models/annie/'].join('');",
				"var loader = FRAME.getResource( 'loader' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"",
				"var annie = new THREE.Group();",
				"var files = {",
				"\tmodels: {",
				"\t\tchild: 'ani_chr_1-forest_bindpose_v01.fbx',",
				"\t\tteenager: 'ani_chr_2-house_bindpose_v01.fbx',",
				"\t\tadult: 'ani_chr_3-city_bindpose_v01.fbx'",
				"\t},",
				"\tanimations: {",
				"\t\tchild: {",
				"\t\t\trun: 'ani_chr_1-forest_run_v01.fbx',",
				"\t\t\tturn: 'ani_chr_1-forest_turn_v01.fbx'",
				"\t\t},",
				"\t\tteenager: {",
				"\t\t\trun: 'ani_chr_2-house_run_v01.fbx',",
				"\t\t\tturn: 'ani_chr_2-house_turn_v01.fbx'",
				"\t\t},",
				"\t\tadult: {",
				"\t\t\trun: 'ani_chr_3-city_run_v01.fbx',",
				"\t\t\tturn: 'ani_chr_3-city_turn_v01.fbx'",
				"\t\t}",
				"\t}",
				"};",
				"",
				"annie.userData.models = {};",
				"annie.userData.age = 'child';",
				"annie.userData.animations = { child: {}, teenager: {}, adult: {} };",
				"annie.userData.model = null;",
				"",
				"enhance( annie.userData.models, 4 );",
				"enhance( annie.userData.animations, 6 );",
				"",
				"annie.userData.age = function ( age ) {",
				"\tannie.userData.models.complete.ready( function () {",
				"",
				"\t\tif ( annie.userData.model ) {",
				"\t\t\tannie.userData.model.visible = false;",
				"\t\t}",
				"",
				"\t\tvar model = annie.userData.models[ age ];",
				"\t\tmodel.visible = true;",
				"\t\tannie.userData.model = model;",
				"",
				"\t\tvar bb = model.userData.boundingBox;",
				"\t\tvar height = bb.max.y - bb.min.y;",
				"\t\tdolly.userData.target.y = height * 0.66;",
				"",
				"\t} );",
				"};",
				"",
				"annie.userData.play = function ( action ) {",
				"",
				"\tannie.userData.animations.complete.ready( function () {",
				"",
				"\t\tif ( !annie.userData.model ) return;",
				"",
				"\t\tvar model = annie.userData.model;",
				"\t\tvar animations = model.userData.animations;",
				"",
				"\t\tfor ( var k in animations ) {",
				"\t\t\tvar animation = animations[ k ];",
				"\t\t\tanimation.action[ k === action ? 'play' : 'stop' ]();",
				"\t\t}",
				"",
				"\t} );",
				"\t",
				"};",
				"",
				"for ( var age in files.models ) {",
				"",
				"\tloader.load( path + files.models[ age ], loadModel( age ) );",
				"",
				"\tvar animations = files.animations[ age ];",
				"",
				"\tfor ( var action in animations ) {",
				"",
				"\t\tvar animation = animations[ action ];",
				"\t\tloader.load( path + animation, animationLoaded( age, action ) );",
				"",
				"\t}",
				"",
				"}",
				"",
				"var faceImage = document.createElement('img');",
				"faceImage.crossOrigin = 'anonymous';",
				"faceImage.src = root + '/textures/TX_annieFacial_A01_C.png';",
				"",
				"faceImage.onload = function() {",
				"",
				"\tvar models = annie.userData.models;",
				"",
				"\tmodels.complete.ready( function () {",
				"",
				"\t\tfor ( var age in files.models ) {",
				"",
				"\t\t\tmodels[ age ].userData.eyeLeft.texture.needsUpdate = true;",
				"\t\t\tmodels[ age ].userData.eyeRight.texture.needsUpdate = true;",
				"\t\t\tmodels[ age ].userData.mouth.texture.needsUpdate = true;",
				"",
				"\t\t}",
				"",
				"\t} );",
				"",
				"\tmodels.complete();",
				"",
				"};",
				"",
				"annie.userData.models.complete.ready( function () {",
				"",
				"\tvar models = annie.userData.models;",
				"",
				"\t// child",
				"",
				"\tmodels.child.userData.eyeLeft.animator.currentTile = 0;",
				"\tmodels.child.userData.eyeRight.animator.currentTile = 0;",
				"",
				"\tvar childEyeLeft = models.child.userData.eyeLeft.mesh;",
				"\tchildEyeLeft.position.set( 0.106, 0.129, 0.134 );",
				"\tchildEyeLeft.rotation.x = THREE.Math.degToRad( 11.182 );",
				"\tchildEyeLeft.rotation.y = THREE.Math.degToRad( 22.183 );",
				"\tchildEyeLeft.rotation.z = THREE.Math.degToRad( 1.924 );",
				"\tchildEyeLeft.scale.set( 0.77, 0.77, 0.77 );",
				"",
				"\tvar childEyeRight = models.child.userData.eyeRight.mesh;",
				"\tchildEyeRight.position.set( -0.106, 0.129, 0.134 );",
				"\tchildEyeRight.rotation.x = THREE.Math.degToRad( 11.182 );",
				"\tchildEyeRight.rotation.y = THREE.Math.degToRad( -22.183 );",
				"\tchildEyeRight.rotation.z = THREE.Math.degToRad( 1.924 );",
				"\tchildEyeRight.scale.set( 0.77, 0.77, 0.77 );",
				"",
				"\tvar childMouth = models.child.userData.mouth.mesh;",
				"\tchildMouth.position.set( 0, 0.058, 0.131 );",
				"\tchildMouth.rotation.x = THREE.Math.degToRad( 29.534 );",
				"\tchildMouth.scale.set( 1.28, 1.28, 1.28 );",
				"",
				"\t// teen",
				"",
				"\tmodels.teenager.userData.eyeLeft.animator.currentTile = 2;",
				"\tmodels.teenager.userData.eyeRight.animator.currentTile = 2;",
				"",
				"\tvar teenEyeLeft = models.teenager.userData.eyeLeft.mesh;",
				"\tteenEyeLeft.position.set( 0.108, 0.116, 0.146 );",
				"\tteenEyeLeft.rotation.x = THREE.Math.degToRad( 15.641 );",
				"\tteenEyeLeft.rotation.y = THREE.Math.degToRad( 33.377 );",
				"\tteenEyeLeft.rotation.z = THREE.Math.degToRad( 0.148 );",
				"",
				"\tvar teenEyeRight = models.teenager.userData.eyeRight.mesh;",
				"\tteenEyeRight.position.set( -0.108, 0.116, 0.146 );",
				"\tteenEyeRight.rotation.x = THREE.Math.degToRad( 15.641 );",
				"\tteenEyeRight.rotation.y = THREE.Math.degToRad( -33.377 );",
				"\tteenEyeRight.rotation.z = THREE.Math.degToRad( 0.148 );",
				"",
				"\tvar teenMouth = models.teenager.userData.mouth.mesh;",
				"\tteenMouth.position.set( 0, 0.049, 0.154 );",
				"\tteenMouth.rotation.x = THREE.Math.degToRad( 28.713 );",
				"\tteenMouth.scale.set( 1.1, 1.1, 1.1 );",
				"",
				"\t// adult",
				"",
				"\tmodels.adult.userData.eyeLeft.animator.currentTile = 2;",
				"\tmodels.adult.userData.eyeRight.animator.currentTile = 2;",
				"",
				"\tvar adultEyeLeft = models.adult.userData.eyeLeft.mesh;",
				"\tadultEyeLeft.position.set( 0.113, 0.132, 0.156 );",
				"\tadultEyeLeft.rotation.x = THREE.Math.degToRad( 5.452 );",
				"\tadultEyeLeft.rotation.y = THREE.Math.degToRad( 30.268 );",
				"\tadultEyeLeft.scale.set( 1.2, 1.2, 1.2 );",
				"",
				"\tvar adultEyeRight = models.adult.userData.eyeRight.mesh;",
				"\tadultEyeRight.position.set( -0.113, 0.132, 0.156 );",
				"\tadultEyeRight.rotation.x = THREE.Math.degToRad( 5.452 );",
				"\tadultEyeRight.rotation.y = THREE.Math.degToRad( -30.268 );",
				"\tadultEyeRight.scale.set( 1.2, 1.2, 1.2 );",
				"",
				"\tvar adultMouth = models.adult.userData.mouth.mesh;",
				"\tadultMouth.position.set( 0, 0.056, 0.167 );",
				"\tadultMouth.rotation.x = THREE.Math.degToRad( 28.975 );",
				"\tadultMouth.scale.set( 1.28, 1.28, 1.28 );",
				"",
				"} );",
				"",
				"var facePlaneGeo = new THREE.PlaneBufferGeometry( 0.1, 0.1, 0.1 );",
				"",
				"",
				"var FacePlane = function( parent ) {",
				"\tvar texture = this.texture = new THREE.Texture( faceImage );",
				"\tthis.animator = new TextureAnimator( texture, 4, 4 );",
				"\tthis.animator.currentTile = 0;",
				"\tvar material = new THREE.MeshBasicMaterial({ transparent: true, map: texture });",
				"\tvar mesh = this.mesh = new THREE.Mesh( facePlaneGeo, material );",
				"\tparent.add( mesh );",
				"}",
				"",
				"FRAME.addResource( 'annie', annie );",
				"",
				"function loadModel ( age ) {",
				"",
				"\treturn function ( fbx ) {",
				"",
				"\t\tannie.userData.models[ age ] = fbx;",
				"\t\tannie.add( fbx );",
				"",
				"\t\tfbx.mixer = new THREE.AnimationMixer( fbx );",
				"\t\tfbx.visible = false;",
				"\t\tfbx.userData.animations = {};",
				"",
				"\t\tfbx.traverse( function ( child ) {",
				"",
				"\t\t\tif ( child.isMesh ) {",
				"",
				"\t\t\t\tchild.material.side = THREE.DoubleSide;",
				"\t\t\t\tchild.material.vertexColors = THREE.VertexColors;",
				"\t\t\t\tchild.geometry.computeBoundingBox();",
				"\t\t\t\tfbx.userData.boundingBox = child.geometry.boundingBox;",
				"",
				"\t\t\t}",
				"",
				"\t\t} );",
				"",
				"\t\tvar headBone = fbx.children[1].skeleton.bones[16];",
				"",
				"\t\tfbx.userData.eyeLeft = new FacePlane( headBone );",
				"\t\tfbx.userData.eyeRight = new FacePlane( headBone );",
				"\t\tfbx.userData.mouth = new FacePlane( headBone );",
				"\t\tfbx.userData.mouth.animator.currentTile = 4;",
				"",
				"\t\tannie.userData.models.complete();",
				"",
				"\t};",
				"\t",
				"}",
				"",
				"function animationLoaded ( age, action ) {",
				"\t",
				"\treturn function ( fbx ) {",
				"",
				"\t\tannie.userData.models.complete.ready( function () {",
				"",
				"\t\t\tvar model = annie.userData.models[ age ];",
				"",
				"\t\t\tvar animation = fbx.animations[ 0 ];",
				"\t\t\tanimation.name += ': ' + age + ' : ' + action;",
				"\t\t\tanimation.action = model.mixer.clipAction( animation );",
				"",
				"\t\t\tmodel.userData.animations[ action ] = animation;",
				"\t\t\tannie.userData.animations[ age ][ action ] = animation;",
				"\t\t\tannie.userData.animations.complete();",
				"",
				"\t\t} );",
				"\t\t",
				"\t};",
				"\t",
				"}",
				"",
				"function enhance ( obj, length ) {",
				"",
				"\tvar complete = function () {",
				"",
				"\t\tcomplete.index++;",
				"",
				"\t\tif ( !complete.completed && complete.index >= complete.amount ) {",
				"\t\t\tfor ( var i = 0; i < complete.callbacks.length; i++ ) {",
				"\t\t\t\tcomplete.callbacks[ i ]();",
				"\t\t\t}",
				"\t\t\tcomplete.callbacks.length = 0;",
				"\t\t\tcomplete.completed = true;",
				"\t\t}",
				"",
				"\t};",
				"",
				"\tcomplete.ready = function ( func ) {",
				"\t\tif ( complete.completed ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tcomplete.callbacks.push( func );",
				"\t};",
				"",
				"\tcomplete.completed = false;",
				"\tcomplete.index = 0;",
				"\tcomplete.amount = length;",
				"\tcomplete.callbacks = [];",
				"",
				"\tobj.complete = complete;",
				"",
				"}"
			]
		],
		[
			"Models",
			[
				"// BufferGeometryLoader",
				"",
				"var Signal = signals.Signal;",
				"var root = FRAME.getResource( 'root' );",
				"var loader = new THREE.BufferGeometryLoader();",
				"",
				"var models = {",
				"\t",
				"\tforest: {",
				"\t\tname: 'forest',",
				"\t\tfiles: [",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_flower_a_v01.json',",
				"",
				"\t\t\t'mdl_env_1_forest_grass_a01_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_a02_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_b01_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_b02_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_c01_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_c02_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_c03_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_d_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_e_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_f_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_g_v01.json',",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_rock_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_rock_b_v01.json',",
				"",
				"\t\t\t'mdl_env_1_forest_mushroom_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_mushroom_b_v01.json',",
				"\t\t\t'mdl_env_1_forest_mushroom_c_v01.json',",
				"",
				"\t\t\t'mdl_env_1_forest_tree_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_b_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_c_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_d_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_e_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_f_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_g_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_h_v01.json'",
				"\t\t\t",
				"\t\t]",
				"\t},",
				"",
				"\thouse: {",
				"\t\tname: 'house',",
				"\t\tfiles: [",
				"\t\t\t'bedroom.json',",
				"\t\t\t'kitchen.json',",
				"\t\t\t'living-room.json',",
				"\t\t\t'office.json'",
				"\t\t]",
				"\t},",
				"",
				"\t/**",
				"\t * Interactive Files for Stage 2",
				"\t */",
				"\tbedroom: {",
				"\t\tname: 'bedroom/interactive',",
				"\t\tfiles: [",
				"",
				"\t\t\t'ball-blue.json',",
				"\t\t\t'ball-green.json',",
				"\t\t\t'ball-purple.json',",
				"",
				"\t\t\t'pyramid-green.json',",
				"\t\t\t'pyramid-orange.json',",
				"",
				"\t\t\t'cube-blue.json',",
				"\t\t\t'cube-orange.json',",
				"\t\t\t'cube-purple.json',",
				"\t\t\t'cube-yellow.json',",
				"",
				"\t\t\t'bunny.json',",
				"\t\t\t'elephant.json',",
				"\t\t\t'giraffe.json',",
				"\t\t\t'teddy.json',",
				"\t\t\t'tricycle.json'",
				"",
				"\t\t]",
				"\t},",
				"\t",
				"\tcity: {",
				"\t\tname: 'city',",
				"\t\tfiles: [",
				"\t\t\t'building-block-mid.json',",
				"\t\t\t'building-block-small.json',",
				"\t\t\t'building-block-tall.json'",
				"\t\t]",
				"\t}",
				"\t",
				"};",
				"",
				"for ( var name in models ) {",
				"",
				"\tvar stage = models[ name ];",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"",
				"\tenhance( stage );",
				"\t",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tload( stage, files[ i ] );",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"function enhance ( stage ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"\tvar loaded = 0;",
				"\tvar isComplete = false;",
				"\t",
				"\tstage.geometries = [];",
				"\tstage.onLoad = new Signal();",
				"\tstage.ready = function ( func ) {",
				"\t\tif ( isComplete ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tstage.onLoad.add( func );",
				"\t};",
				"\t",
				"\tfiles.complete = function ( path ) {",
				"",
				"\t\tloaded++;",
				"\t\t",
				"\t\tif ( !isComplete && loaded >= length ) {",
				"\t\t\tisComplete = true;",
				"\t\t\tstage.onLoad.dispatch();",
				"\t\t}",
				"\t\t",
				"\t\t",
				"\t};",
				"\t",
				"}",
				"",
				"function load ( stage, path ) {",
				"\t",
				"\tvar files = stage.files;",
				"\tvar url = [ root, 'models', stage.name, path ].join ( '/' );",
				"",
				"\tloader.load( url, function ( geometry ) {",
				"",
				"\t\tgeometry.name = path;",
				"\t\tgeometry.computeBoundingSphere();",
				"",
				"\t\tstage.geometries.push( geometry );",
				"\t\tfiles.complete( path );",
				"\t\t",
				"\t} );",
				"\t",
				"}",
				"",
				"function extract ( stage, fbx, path ) {",
				"\t",
				"\tvar geometries = stage.geometries;",
				"",
				"\tfbx.traverse( function( child ) {",
				"",
				"\t\tif ( child.isMesh ) {",
				"",
				"\t\t\tif ( child.rotation.x !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateX( child.rotation.x );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.y !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateY( child.rotation.y );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.z !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateZ( child.rotation.z );",
				"\t\t\t}",
				"",
				"\t\t\tchild.geometry.name = path;",
				"\t\t\tchild.geometry.computeBoundingSphere();",
				"",
				"\t\t\tgeometries.push( child.geometry );",
				"",
				"\t\t}",
				"\t\t",
				"\t} );",
				"",
				"}",
				"",
				"FRAME.addResource( 'models', models );"
			]
		],
		[
			"Materials",
			[
				"var chunks = {",
				"\t'vec4ToFloat': [",
				"\t\t'float vec4ToFloat(vec4 c){',",
				"\t\t'\treturn 1.0/255.0 * (floor(c.r*255.0/64.0)*64.0 + floor(c.g*255.0/64.0)*16.0 + floor(c.b*255.0/64.0)*4.0 + floor(c.a*255.0/64.0));',",
				"\t\t'}',",
				"\t].join( '\\n' ),",
				"}",
				"",
				"var road = {",
				"",
				"\tuniforms: {",
				"",
				"\t\tcursor: { type: 'v2', value: new THREE.Vector2() },",
				"",
				"\t\tsubdivisions: { type: 'f', value: 32 },",
				"\t\tcurvature: { type: 'f', value: 1 },",
				"\t\tsize: { type: 'f', value: 1 },",
				"\t\tneon: { type: 'f', value: 0 },",
				"",
				"\t\tmedian: { type: 'c', value: new THREE.Color( 'red' ) },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }",
				"",
				"\t},",
				"",
				"\tvertexShader: [",
				"\t\t'uniform float curvature;',",
				"\t\t'uniform float size;',",
				"\t\t'varying vec4 mPosition;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec3 pos = vec3( position );',",
				"",
				"\t\t\t'float x = pos.x / size;',",
				"\t\t\t'float y = pos.y / size;',",
				"",
				"\t\t\t'float x2 = x * 2.0;',",
				"\t\t\t'float y2 = y * 2.0;',",
				"",
				"\t\t\t'float dist = curvature * sqrt( x2 * x2 + y2 * y2 );',",
				"",
				"\t\t\t'pos.z = size * ( dist * dist ) / 2.0;',",
				"",
				"\t\t\t'mPosition = modelMatrix * vec4( pos, 1.0 );',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'gl_Position = projectionMatrix * viewMatrix * mPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"\t\tchunks['vec4ToFloat'],",
				"",
				"\t\t'float PI = ' + Math.PI + ';',",
				"",
				"\t\t'uniform vec2 cursor;',",
				"\t\t'uniform float subdivisions;',",
				"\t\t'uniform float size;',",
				"",
				"\t\t'uniform vec3 median;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"\t\t'uniform float neon;',",
				"",
				"\t\t'varying vec4 mPosition;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float threshold = 16.0 / size;',",
				"",
				"\t\t\t'vec2 pos = vec2( cursor.x + vUv.x, - cursor.y + vUv.y );',",
				"\t\t\t'pos = mod( pos, 1.0 );',",
				"\t\t\t'pos = mod( subdivisions * pos, 1.0 );',",
				"",
				"\t\t\t'vec2 isMedian = vec2( sin( pos * PI ) );',",
				"\t\t\t'vec2 isIntersection = vec2( 1.0 - isMedian.y, 1.0 - isMedian.x );',",
				"",
				"\t\t\t'isMedian = step( vec2( threshold ), isMedian );',",
				"\t\t\t'isIntersection = step( vec2( 0.66 ), isIntersection );',",
				"",
				"\t\t\t'float t = clamp( isMedian.x + isIntersection.x, 0.0, 1.0 );',",
				"\t\t\t'vec3 layer = mix( median, color, t );',",
				"",
				"\t\t\t't = clamp( isMedian.y + isIntersection.y, 0.0, 1.0 );',",
				"\t\t\t'layer = mix( median, layer, t );',",
				"",
				"\t\t\t'float dist = distance( vec2( 0.5 ), vUv ) * 2.0;',",
				"\t\t\t't = clamp( dist, 0.0, 1.0 );',",
				"",
				"\t\t\t'vec3 col = mix( layer, fog, pow( t, 0.5 ) );',",
				"\t\t\t'if (neon == 0.0) gl_FragColor = vec4( col, 1.0 );',",
				"\t\t\t'else gl_FragColor = vec4(mPosition.xyz, vec4ToFloat(vec4(col.rgb, 1.0)));',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var floor = {",
				"",
				"\tuniforms: {",
				"\t\tamount: { type: 'f', value: 6 },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) },",
				"\t\tneon: { type: 'f', value: 0 },",
				"\t},",
				"",
				"\tvertexShader: [",
				"",
				"\t\t'varying vec2 vUv;',",
				"\t\t'varying vec4 mPosition;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'mPosition = modelMatrix * vec4( position, 1.0 );',",
				"\t\t\t'gl_Position = projectionMatrix * viewMatrix * mPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"\t\tchunks['vec4ToFloat'],",
				"",
				"\t\t'uniform float amount;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"\t\t'uniform float neon;',",
				"\t\t'varying vec4 mPosition;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float dist = distance( vec2( 0.5 ), vUv ) * 2.0;',",
				"\t\t\t'float t = clamp( floor( pow( dist, 0.4 ) * amount ) / amount, 0.0, 1.0 );',",
				"",
				"\t\t\t'vec3 col = mix( mix( color, fog, t ), fog, pow( dist, 0.5 ) );',",
				"\t\t\t'if (neon == 0.0) gl_FragColor = vec4( col, 1.0 );',",
				"\t\t\t'else gl_FragColor = vec4(mPosition.xyz, vec4ToFloat(vec4(col.rgb, 1.0)));',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var backdrop = {",
				"",
				"\tuniforms: {",
				"\t\toffset: { type: 'f', value: 0.5 },",
				"\t\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) },",
				"\t\tneon: { type: 'f', value: 0 },",
				"\t},",
				"",
				"\tvertexShader: [",
				"",
				"\t\t'varying vec2 vUv;',",
				"\t\t'varying vec4 mPosition;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'mPosition = modelMatrix * vec4( position, 1.0 );',",
				"\t\t\t'gl_Position = projectionMatrix * viewMatrix * mPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"\t\tchunks['vec4ToFloat'],",
				"",
				"\t\t'uniform float offset;',",
				"\t\t'uniform vec3 fog;',",
				"\t\t'uniform vec3 color;',",
				"\t\t'uniform float neon;',",
				"\t\t'varying vec4 mPosition;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float t = smoothstep( offset, 1.0, vUv.y );',",
				"",
				"\t\t\t'vec3 col = mix( fog, color, pow( t, 3.0 ) );',",
				"\t\t\t'if (neon == 0.0) gl_FragColor = vec4( col, 1.0 );',",
				"\t\t\t'else gl_FragColor = vec4(0.0, 0.0, 0.0, vec4ToFloat(vec4(0.0)));',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var wave = {",
				"",
				"\tuniforms: {",
				"\t\ttime: { type: 'f', value: 0 },",
				"\t\tfogColor: { type: 'c', value: new THREE.Color() },",
				"\t\tfogNear: { type: 'f', value: 0 },",
				"\t\tfogFar: { type: 'f', value: 50 },",
				"\t\tneon: { type: 'f', value: 0 },",
				"\t},",
				"",
				"\tvertexShader: [",
				"",
				"\t\t'float PI = ' + Math.PI + ';',",
				"",
				"\t\t'uniform float time;',",
				"",
				"\t\t'varying vec4 mPosition;',",
				"\t\t'varying vec4 mvPosition;',",
				"\t\t'varying vec3 vertexColor;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec3 pos = vec3( position );',",
				"\t\t\t'vec4 t = projectionMatrix * vec4( 1.0 );',",
				"",
				"\t\t\t'float osc = ( 1.0 + sin( time + PI * ( t.x + t.y + t.z ) / 3.0 ) ) / 2.0;',",
				"\t\t\t'float sway = pow( pos.y, 2.0 ) * osc;',",
				"",
				"\t\t\t'pos.x += sway / 100.0;',",
				"",
				"\t\t\t'vertexColor = color;',",
				"\t\t\t'mPosition = modelMatrix * vec4( pos, 1.0 );',",
				"\t\t\t'mvPosition = viewMatrix * mPosition;',",
				"",
				"\t\t\t'gl_Position = projectionMatrix * mvPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"",
				"\tfragmentShader: [",
				"\t\tchunks['vec4ToFloat'],",
				"",
				"\t\t'uniform vec3 fogColor;',",
				"\t\t'uniform float fogNear;',",
				"\t\t'uniform float fogFar;',",
				"\t\t'uniform float neon;',",
				"",
				"\t\t'varying vec2 vUv;',",
				"\t\t'varying vec4 mPosition;',",
				"\t\t'varying vec4 mvPosition;',",
				"\t\t'varying vec3 vertexColor;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'float fogDepth = - mvPosition.z;',",
				"\t\t\t'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',",
				"",
				"\t\t\t'vec3 col = mix( vertexColor, fogColor, fogFactor );',",
				"\t\t\t'if (neon == 0.0) gl_FragColor = vec4( col, 1.0 );',",
				"\t\t\t'else gl_FragColor = vec4(mPosition.xyz, vec4ToFloat(vec4(col.rgb, 1.0)));',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"",
				"};",
				"",
				"var materials = {",
				"",
				"\tforest: {",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( floor.uniforms ),",
				"\t\t\tvertexShader: floor.vertexShader,",
				"\t\t\tfragmentShader: floor.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: false,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\twave: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tvertexColors: true,",
				"\t\t\tfog: true,",
				"\t\t\tside: THREE.DoubleSide,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( wave.uniforms ),",
				"\t\t\tvertexShader: wave.vertexShader,",
				"\t\t\tfragmentShader: wave.fragmentShader",
				"",
				"\t\t} )",
				"",
				"\t},",
				"",
				"\thouse: {",
				"",
				"\t\troom: new THREE.MeshBasicMaterial( {",
				"\t\t\tcolor: 0xffffff,",
				"\t\t\tvertexColors: true",
				"\t\t} ),",
				"",
				"\t\ttoy: new THREE.MeshBasicMaterial( {",
				"\t\t\tcolor: 0xffffff,",
				"\t\t\tvertexColors: true,",
				"\t\t\tside: THREE.DoubleSide",
				"\t\t} ),",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( floor.uniforms ),",
				"\t\t\tvertexShader: floor.vertexShader,",
				"\t\t\tfragmentShader: floor.fragmentShader",
				"",
				"\t\t} )",
				"",
				"\t},",
				"",
				"\tcity: {",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( road.uniforms ),",
				"\t\t\tvertexShader: road.vertexShader,",
				"\t\t\tfragmentShader: road.fragmentShader",
				"\t\t} ),",
				"",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: false,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\tbuilding: new THREE.MeshBasicMaterial( {",
				"\t\t\tcolor: 'white',",
				"\t\t\tvertexColors: true,",
				"\t\t\tside: THREE.DoubleSide",
				"\t\t} )",
				"",
				"\t}",
				"",
				"};",
				"",
				"FRAME.addResource( 'materials', materials );",
				""
			]
		]
	],
	"effects": [
		[
			"Forest",
			[
				"var TWO_PI = Math.PI * 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).forest;",
				"var materials = FRAME.getResource( 'materials' ).forest;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 1024 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 ),",
				"\tforceField: new FRAME.Parameters.Float( 'Field', 0.025 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var material = materials.wave;",
				"",
				"var theta = new Ease( 0, 0.66 );",
				"var step = new Ease( 0.1 * parameters.step.value, 0.0625 );",
				"var direction = new Ease( 0, 0.033 );",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( 0x372f5c, 0, parameters.size.value * 0.66 );",
				"",
				"materials.floor.uniforms.color.value.set( 0x72fa8c );",
				"materials.backdrop.uniforms.color.value.set( 0xdde9ab );",
				"",
				"materials.floor.uniforms.fog.value = group.fog.color;",
				"materials.floor.uniforms.fog.needsUpdate = true;",
				"materials.backdrop.uniforms.fog.value = group.fog.color;",
				"materials.backdrop.uniforms.fog.needsUpdate = true;",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value ),",
				"\tmaterials.backdrop",
				");",
				"group.add( backdrop );",
				"",
				"var elements = [];",
				"var sections = {",
				"\ta: [],",
				"\tb: [],",
				"\tc: []",
				"};",
				"",
				"for ( var k in sections ) {",
				"",
				"\tenhance( sections[ k ] );",
				"",
				"}",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"",
				"\t\tmesh.scale.setScalar( Math.random() / 2 + 0.5 );",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"",
				"\t\tif ( /(grass)/i.test( name ) ) {",
				"\t\t\tsections.a.push( mesh );",
				"\t\t\tmesh.visible = false;",
				"\t\t} else if ( /(mushroom|rock)/i.test( name ) ) {",
				"\t\t\tsections.b.push( mesh );",
				"\t\t\tmesh.visible = false;",
				"\t\t} else if (/tree/i.test( name ) ) {",
				"\t\t\tsections.c.push( mesh );",
				"\t\t\tmesh.visible = false;",
				"\t\t}",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"FRAME.addResource( 'Stage 1', {",
				"",
				"\tsections: sections",
				"",
				"} );",
				"",
				"function start () {",
				"",
				"\tcursor.set( 0, 0 );",
				"",
				"\ttheta.clear();",
				"\tstep.clear();",
				"\tdirection.clear();",
				"",
				"\tfor ( var k in sections ) {",
				"\t\tsections[ k ].disable();",
				"\t}",
				"",
				"\tannie.userData.age( 'child' );",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"\t",
				"\tif ( material.uniforms && material.uniforms.time ) {",
				"\t\tmaterial.uniforms.time.value += (dt || 0 ) * 4;",
				"\t}",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\ttheta.destination = - controllers.previous.rotation.y;",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\t// theta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.6;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"\t\tdirection.destination = theta.value;",
				"",
				"\t}",
				"",
				"\ttheta.update( dt );",
				"\tstep.update( dt );",
				"\tdirection.update( dt );",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.value - direction.value );",
				"\tdolly.position.z = - distance * Math.cos( theta.value - direction.value );",
				"\tdolly.lookAt( dolly.userData.target );\t",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar amplitude = step.value * ( dt || 0 );",
				"\tvar forceField = parameters.forceField.value;",
				"\tvar buffer = forceField * ( 128 / size );",
				"",
				"\tcursor.x += amplitude * Math.cos( direction.value );",
				"\tcursor.y += amplitude * Math.sin( direction.value );",
				"",
				"\tgroup.rotation.y = direction.value - Math.PI / 2;",
				"\t",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 2 ) - 1;",
				"\t\tvar y = mod( cursor.y + offset.y, 2 ) - 1;",
				"\t\t",
				"\t\tvar angle = Math.atan2( - y, - x );",
				"\t\tvar phi = angle + Math.PI;",
				"\t\t",
				"\t\tmesh.position.x = x + Math.cos( phi ) * buffer;",
				"\t\tmesh.position.z = y + Math.sin( phi ) * buffer;",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t}",
				"\t",
				"}",
				"",
				"function enhance ( section ) {",
				"",
				"\tsection.enabled = false;",
				"\tsection.enable = function () {",
				"\t\tsection.enabled = true;",
				"\t\tfor ( var i = 0; i < section.length; i++ ) {",
				"\t\t\tvar mesh = section[ i ];",
				"\t\t\tmesh.visible = true;\t// TODO: Smooth",
				"\t\t}",
				"\t};",
				"\tsection.disable = function () {",
				"\t\tsection.enabled = false;",
				"\t\tfor ( var i = 0; i < section.length; i++ ) {",
				"\t\t\tvar mesh = section[ i ];",
				"\t\t\tmesh.visible = false;\t// TODO: Smooth",
				"\t\t}",
				"\t}",
				"",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"House",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).house;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Float( 'Size', 12 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 25 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.75 ),",
				"\tdistance: new FRAME.Parameters.Float( 'Distance', 2 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"var theta = new Ease( 0, 0.66 );",
				"var step = new Ease( 0.1 * parameters.step.value, 0.0625 );",
				"var direction = new Ease( 0, 0.125 );",
				"",
				"var room = new THREE.Vector2();",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( 0x333333, parameters.size.value, parameters.size.value * 2 );",
				"group.position.y -= 0.2;",
				"var elements = [];",
				"var material = materials.room;",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\tvar size = parameters.size.value;",
				"",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"\t",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"\t\tmesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"\t\t",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"\t",
				"\t}",
				"\t",
				"} );",
				"",
				"FRAME.addResource( 'Stage 2', {",
				"",
				"\telements: elements",
				"",
				"} );",
				"",
				"function start () {",
				"",
				"\tcursor.set( 0, 0 );",
				"\tpc.copy( cursor );",
				"\t",
				"\ttheta.clear();",
				"\tstep.clear();",
				"\tdirection.clear();",
				"",
				"\tannie.userData.age( 'teenager' );",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"\t",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\ttheta.destination = - controllers.previous.rotation.y;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\t// theta.destination -= controllers.deltas.rotation.y;",
				"",
				"\t} else {",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"\t",
				"\tstep.update( dt );",
				"\ttheta.update( dt );",
				"\tdirection.update( dt );",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.value - direction.value );",
				"\tdolly.position.z = - distance * Math.cos( theta.value - direction.value );",
				"\tdolly.lookAt( dolly.userData.target );",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = step.value * ( dt || 0 );",
				"",
				"\tcursor.x += amplitude * Math.cos( direction.value );",
				"\tcursor.y += amplitude * Math.sin( direction.value );",
				"",
				"\tgroup.rotation.y = direction.value - HALF_PI;",
				"\t",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"\t\t",
				"\t\tmesh.position.x *= - size * cols;",
				"\t\tmesh.position.z *= - size * rows;",
				"",
				"\t}",
				"",
				"\tupdateDirection();",
				"",
				"}",
				"",
				"var pc = new THREE.Vector2();",
				"",
				"function updateDirection () {",
				"",
				"\tvar dx = cursor.x - pc.x;",
				"\tvar dy = cursor.y - pc.y;",
				"",
				"\tif ( dx === 0 && dy === 0) return;",
				"",
				"\tvar tx = dx > 0 ? 1 : ( dx === 0 ? 0 : - 1 );",
				"\tvar ty = dy > 0 ? 1 : ( dy === 0 ? 0 : - 1 );",
				"",
				"\tvar cx = Math.floor( cursor.x * cols + 0.0625 * tx );",
				"\tvar cy = Math.floor( cursor.y * rows + 0.0625 * ty );",
				"",
				"\tif ( cx !== room.x || cy !== room.y ) { ",
				"\t\tvar angle = TWO_PI * Math.round( 4 * theta.destination / TWO_PI ) / 4;",
				"\t\tdirection.destination += HALF_PI * Math.sin( angle - direction.destination );",
				"\t\troom.set( cx, cy );",
				"\t}",
				"\t",
				"\tpc.copy( cursor );",
				"\t",
				"}",
				"",
				"function mod ( v, l ) {",
				"  while ( v < 0 ) { v += l; }",
				"  return v % l;",
				"}"
			]
		],
		[
			"City",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).city;",
				"var materials = FRAME.getResource( 'materials' ).city;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 1000 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 400 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.1 ),",
				"\tdistance: new FRAME.Parameters.Float( 'Distance', 2 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"var theta = new Ease( 0, 0.66 );",
				"var step = new Ease( 0.1 * parameters.step.value, 0.0625 );",
				"var direction = new Ease( 0, 0.125 );",
				"",
				"var block = new THREE.Vector2();",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.4 );",
				"",
				"materials.floor.uniforms.cursor.value = cursor;",
				"materials.floor.uniforms.subdivisions.value = cols;",
				"materials.floor.uniforms.size.value = parameters.size.value;",
				"materials.floor.uniforms.fog.value = group.fog.color;",
				"materials.floor.uniforms.color.value.set( 0x262532 );",
				"materials.floor.uniforms.median.value.set( 0x3a394a );",
				"// materials.floor.wireframe = true;",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 64, 64 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"ground.position.y = -1;",
				"// group.add( ground );",
				"",
				"materials.backdrop.uniforms.offset.value = 0.66;",
				"materials.backdrop.uniforms.color.value.set( 0x420c6b );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value ),",
				"\tmaterials.backdrop",
				");",
				"group.add( backdrop );",
				"",
				"var elements = [];",
				"",
				"var material = materials.building;",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = Math.floor( Math.random() * length );",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\t",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"\t\t",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"",
				"\t\tmesh.rotation.reorder( 'ZXY' );",
				"\t\tmesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"\t\t",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"function start () {",
				"",
				"\tcursor.set( 0, 0 );",
				"\tpc.copy( cursor );",
				"",
				"\ttheta.clear();",
				"\tstep.clear();",
				"\tdirection.clear();",
				"",
				"\tannie.userData.age( 'adult' );",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\tgroup.visible = true;",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"\t",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\ttheta.destination = - controllers.previous.rotation.y;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\t// theta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.6;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"",
				"\tupdateDirection();",
				"\t",
				"\ttheta.update( dt );",
				"\tstep.update( dt );",
				"\tdirection.update( dt );",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.value - direction.value );",
				"\tdolly.position.z = - distance * Math.cos( theta.value - direction.value );",
				"\tdolly.lookAt( dolly.userData.target );",
				"\t",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = step.value * ( dt || 0 );",
				"\tvar curvature = Math.min( progress * 2, 1.0 );",
				"",
				"\tcursor.x += amplitude * Math.cos( direction.value );",
				"\tcursor.y += amplitude * Math.sin( direction.value );",
				"\t",
				"\tgroup.rotation.y = direction.value - Math.PI / 2;",
				"",
				"\tground.material.uniforms.curvature.value = curvature;",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"\t\tvar x2 = x * 2;",
				"\t\tvar y2 = y * 2;",
				"",
				"\t\tvar phi =  Math.atan2( - y, - x );",
				"\t\tvar dist = Math.sqrt( x2 * x2 + y2 * y2 );",
				"\t\tvar bend = curvature * dist;",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"",
				"\t\tmesh.rotation.x = Math.sin( phi );",
				"\t\tmesh.rotation.z = Math.cos( phi );",
				"\t\t",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.y = size * ( bend * bend ) / 2;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t\tmesh.rotation.x *= - HALF_PI * bend;",
				"\t\tmesh.rotation.z *= HALF_PI * bend;",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"var pc = new THREE.Vector2();",
				"",
				"function updateDirection () {",
				"",
				"\tvar dx = cursor.x - pc.x;",
				"\tvar dy = cursor.y - pc.y;",
				"",
				"\tif ( dx === 0 && dy === 0) return;",
				"",
				"\tvar tx = dx > 0 ? 1 : ( dx === 0 ? 0 : - 1 );",
				"\tvar ty = dy > 0 ? 1 : ( dy === 0 ? 0 : - 1 );",
				"",
				"\tvar cx = Math.floor( cursor.x * cols );",
				"\tvar cy = Math.floor( cursor.y * rows );",
				"",
				"\tif ( cx !== block.x || cy !== block.y ) { ",
				"\t\tvar angle = TWO_PI * Math.round( 4 * theta.destination / TWO_PI ) / 4;",
				"\t\tdirection.destination += HALF_PI * Math.sin( angle - direction.destination );",
				"\t\tblock.set( cx, cy );",
				"\t}",
				"\t",
				"\tpc.copy( cursor );",
				"\t",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"Neon Lights",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).bedroom;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 512 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 ),",
				"\tforceField: new FRAME.Parameters.Float( 'Field', 0.025 )",
				"};",
				"",
				"var cursor = new THREE.Vector3();",
				"var temp = new THREE.Vector3();",
				"var material = materials.toy;",
				"",
				"var cameraYaw = new Ease( 0, 0.66 );",
				"var cameraPitch = new Ease( 0, 0.66 );",
				"var worldYaw = new Ease( 0, 0.033 );",
				"var worldPitch = new Ease( 0, 0.033 );",
				"var step = new Ease( parameters.step.value, 0.0625 );",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.66 );",
				"",
				"var elements = [];",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tvar seed = Math.random();",
				"\t\tvar scalar = Math.floor( seed * 8 ) + 1;",
				"\t\tmesh.scale.setScalar( scalar );",
				"\t\t",
				"\t\tmesh.userData.velocity = {",
				"\t\t\trotation: new THREE.Euler(",
				"\t\t\t\t( 1 - seed ) * HALF_PI / 2 - HALF_PI / 4,",
				"\t\t\t\t( 1 - seed ) * HALF_PI / 2 - HALF_PI / 4,",
				"\t\t\t\t( 1 - seed ) * HALF_PI / 2 - HALF_PI / 4",
				"\t\t\t)",
				"\t\t};",
				"\t\t",
				"\t\tmesh.userData.offset = new THREE.Vector3(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"\t\t",
				"\t\tvar rv = mesh.userData.velocity.rotation;",
				"",
				"\t\tmesh.rotation.x = rv.x;",
				"\t\tmesh.rotation.y = rv.y;",
				"\t\tmesh.rotation.z = rv.z;",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"} );",
				"",
				"FRAME.addResource( 'Stage 4', {",
				"",
				"} );",
				"",
				"function start () {",
				"",
				"\tcursor.set( 0, 0, 0 );",
				"\t",
				"\tcameraYaw.clear();",
				"\tcameraPitch.clear();",
				"\tworldYaw.clear();",
				"\tworldPitch.clear();",
				"\tstep.clear();",
				"",
				"\tannie.userData.age( 'adult' );",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog = group.fog;",
				"\trenderer.setClearColor( scene.fog.color );",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\t",
				"}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"",
				"\tcameraPitch.destination = - controllers.previous.rotation.x;",
				"\tcameraYaw.destination = - controllers.previous.rotation.y;",
				"",
				"\tcameraPitch.destination = clamp( cameraPitch.destination, - HALF_PI, HALF_PI );",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\t// cameraPitch.destination += controllers.deltas.rotation.x;",
				"\t\t// cameraYaw.destination -= controllers.deltas.rotation.y;",
				"",
				"\t\t// cameraPitch.destination = clamp( cameraPitch.destination, - HALF_PI, HALF_PI );",
				"\t\t",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.6;",
				"\t\t}",
				"\t\t",
				"\t} else { ",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"",
				"\tworldPitch.destination = cameraPitch.value;",
				"\tworldYaw.destination = cameraYaw.value;\t\t",
				"",
				"\tstep.update( dt );",
				"",
				"\tcameraPitch.update( dt );",
				"\tcameraYaw.update( dt );",
				"",
				"\tworldPitch.update( dt );",
				"\tworldYaw.update( dt );",
				"",
				"\tvar direction = Math.cos( cameraPitch.value );",
				"\tvar distance = dolly.userData.distance;",
				"\t",
				"\tdolly.position.x = distance * Math.sin( cameraYaw.value - worldYaw.value );",
				"\tdolly.position.z = - distance * Math.cos( cameraYaw.value - worldYaw.value );",
				"\tdolly.position.y = - distance * Math.sin( cameraPitch.value - worldPitch.value );",
				"\tdolly.lookAt( dolly.userData.target );\t",
				"",
				"\tvar t = ( dt || 0 );",
				"\t",
				"\tvar size = parameters.size.value;",
				"\tvar amplitude = step.value * t;",
				"\tvar forceField = parameters.forceField.value;",
				"\tvar buffer = forceField * ( 128 / size );",
				"",
				"\ttemp.set(",
				"\t\t\tMath.cos( worldYaw.value ),",
				"\t\t\tMath.sin( worldPitch.value ),",
				"\t\t\tMath.sin( worldYaw.value ) )",
				"\t\t.setLength( amplitude );",
				"\t",
				"\tcursor.x += direction * temp.x;",
				"\tcursor.y += temp.y;",
				"\tcursor.z += direction * temp.z;",
				"",
				"\tgroup.rotation.x = worldPitch.value;",
				"\tgroup.rotation.y = worldYaw.value - Math.PI / 2;",
				"\t",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 2 ) - 1;",
				"\t\tvar y = mod( cursor.y + offset.y, 2 ) - 1;",
				"\t\tvar z = mod( cursor.z + offset.z, 2 ) - 1;",
				"\t\t",
				"",
				"\t\tvar angle = Math.atan2( - z, - x );",
				"\t\tvar phi = angle + Math.PI;",
				"\t\t",
				"\t\tmesh.position.x = x;// + Math.cos( phi ) * buffer;",
				"\t\tmesh.position.z = z;// + Math.sin( phi ) * buffer;",
				"",
				"\t\tangle = Math.atan2( - y, 0 );",
				"\t\tphi = angle + Math.PI;",
				"",
				"\t\tmesh.position.y = y;// + Math.sin( phi ) * buffer;",
				"",
				"\t\tvar rv = mesh.userData.velocity.rotation;",
				"\t\t",
				"\t\t/*",
				"\t\tmesh.rotation.x += t * rv.x;",
				"\t\tmesh.rotation.y += t * rv.y;",
				"\t\tmesh.rotation.z += t * rv.z;",
				"\t\t*/",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.z *= - size;",
				"\t\tmesh.position.y *= - size;",
				"",
				"\t}",
				"\t",
				"}",
				"",
				"function clamp ( v, min, max ) {",
				"\treturn Math.min( Math.max( v, min ), max );",
				"}",
				"",
				"function mod ( v, l ) {",
				"\twhile ( v < 0 ) { v += l; }",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"Effect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var clock = FRAME.getResource( 'clock' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"scene.userData.clear();",
				"scene.add( dolly );",
				"scene.add( new THREE.AmbientLight( 0xffffff ) );",
				"scene.add( annie );",
				"",
				"var playing = false;",
				"var p = 0;",
				"",
				"var controls = FRAME.getResource( 'controls' );",
				"var controllers = FRAME.getResource( 'controllers' )",
				"\t.setup( dolly );",
				"",
				"controllers.onTriggerClick = toggleBlink;",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tplaying = progress !== p && dt > 0;",
				"\tp = progress;",
				"",
				"\tTWEEN.update();",
				"",
				"\tcontrols.update();",
				"\tcontrollers.update( camera );",
				"",
				"\tif ( annie.userData.model ) {",
				"\t\tannie.userData.model.mixer.update( dt );",
				"\t}",
				"",
				"\tvar fov = camera.userData.fov;",
				"\tif ( Math.abs( fov.destination - fov.current ) > fov.limit ) {",
				"\t\tfov.current += ( fov.destination - fov.current ) * fov.drag;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t} else if ( fov.current !== fov.destination ) {",
				"\t\tfov.current = fov.destination;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t}",
				"",
				"}",
				"",
				"function toggleBlink ()  {",
				"",
				"\tif ( !playing ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tneon.enabled = !neon.enabled;",
				"",
				"}"
			]
		],
		[
			"Effect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var neon = FRAME.getResource( 'neon' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tneon.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Trigger Single",
			[
				"function start () {",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Trigger All",
			[
				"function start () {",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Trigger All Loop",
			[
				"function start () {}",
				"",
				"function end(){}",
				"",
				"function update ( progress ){",
				"",
				"}"
			]
		],
		[
			"Forest.sections.a.enable",
			[
				"function start () {",
				"",
				"\tvar forest = FRAME.getResource( 'Stage 1' );",
				"\tif ( forest ) {",
				"\t\tforest.sections.a.enable();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Forest.sections.b.enable",
			[
				"function start () {",
				"",
				"\tvar forest = FRAME.getResource( 'Stage 1' );",
				"\tif ( forest ) {",
				"\t\tforest.sections.b.enable();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Forest.sections.c.enable",
			[
				"function start () {",
				"",
				"\tvar forest = FRAME.getResource( 'Stage 1' );",
				"\tif ( forest ) {",
				"\t\tforest.sections.c.enable();",
				"\t}",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		]
	],
	"animations": [
		[
			"Stage 1",
			0,
			73.76897423610774,
			1,
			0
		],
		[
			"VR Update",
			0,
			266.422875,
			0,
			4
		],
		[
			"Render",
			0,
			266.422875,
			5,
			5
		],
		[
			"Enable Grass",
			2.564583333333333,
			26.142806111806447,
			2,
			9
		],
		[
			"Enable Mushrooms",
			26.127659574468087,
			42.02127659574469,
			3,
			10
		],
		[
			"Enable Trees",
			42,
			73.76470588235294,
			2,
			11
		],
		[
			"Stage 2",
			73.25182483810381,
			153.0222356239305,
			1,
			1
		],
		[
			"Vocals, \"As\"",
			73.90833333333329,
			74.55000000000021,
			2,
			6
		],
		[
			"Vocals, \"She\"",
			74.30833333333328,
			74.91666666666625,
			3,
			6
		],
		[
			"Vocals, \"Moves\"",
			74.68333333333334,
			75.33333333333285,
			2,
			6
		],
		[
			"Vocals, \"To\"",
			75.07499999999992,
			75.69166666666638,
			3,
			6
		],
		[
			"Vocals, \"Su-\"",
			75.49999999999996,
			76.14166666666583,
			2,
			6
		],
		[
			"Vocals, \"-i-\"",
			75.77499999999996,
			76.40833333333276,
			4,
			6
		],
		[
			"Vocals, \"-side\"",
			76.13333333333334,
			77.2499999999997,
			3,
			6
		],
		[
			"Vocals, \"In\"",
			77.6822429906542,
			78.29890965732095,
			2,
			6
		],
		[
			"Vocals, \"And\"",
			78.19166666666662,
			78.77500000000003,
			3,
			6
		],
		[
			"Vocals, \"Un-\"",
			78.58333333333333,
			79.20000000000007,
			2,
			6
		],
		[
			"Vocals, \"-der\"",
			78.95,
			79.55000000000008,
			3,
			6
		],
		[
			"Vocals, \"Ne-\"",
			79.28333333333333,
			79.8833333333334,
			2,
			6
		],
		[
			"Vocals, \"-on\"",
			79.61666666666666,
			80.2333333333334,
			3,
			6
		],
		[
			"Vocals, \"Lights\"",
			80.11666666666666,
			81.55000000000003,
			2,
			6
		],
		[
			"Vocals, \"Got\"",
			81.50265957446808,
			82.27003546099299,
			3,
			6
		],
		[
			"Vocals, \"No\"",
			81.83333333333334,
			82.57765957446817,
			2,
			6
		],
		[
			"Vocals, \"Hus-\"",
			82.31666666666668,
			83.06560283687945,
			3,
			6
		],
		[
			"Vocals, \"-band\"",
			82.76666666666668,
			83.5386524822696,
			2,
			6
		],
		[
			"Vocals, \"Got\"",
			83.25,
			84.0202127659575,
			3,
			6
		],
		[
			"Vocals, \"No\"",
			83.71382978723405,
			84.49326241134759,
			2,
			6
		],
		[
			"Vocals, \"Wife\"",
			84.08049645390071,
			85.6971631205674,
			3,
			6
		],
		[
			"Vocals, \"All\"",
			85.59574468085107,
			86.38297872340428,
			2,
			6
		],
		[
			"Vocals, \"I\"",
			86,
			86.78723404255321,
			3,
			6
		],
		[
			"Vocals, \"Want\"",
			86.48936170212765,
			87.25531914893618,
			2,
			6
		],
		[
			"Vocals, \"'s A\"",
			86.9583333333333,
			87.72429078014183,
			3,
			6
		],
		[
			"Vocals, \"View\"",
			87.29875886524819,
			88.06471631205672,
			4,
			6
		],
		[
			"Vocals, \"To-\"",
			87.59999999999995,
			88.23333333333301,
			2,
			6
		],
		[
			"Vocals, \"-night\"",
			88.10000000000001,
			89.47634408602161,
			3,
			6
		],
		[
			"Vocals, \"All\"",
			89.6304347826087,
			90.32608695652182,
			2,
			6
		],
		[
			"Vocals, \"I\"",
			89.96739130434783,
			90.65217391304355,
			3,
			6
		],
		[
			"Vocals, \"Want\"",
			90.51086956521739,
			91.2173913043479,
			2,
			6
		],
		[
			"Vocals, \"-'s A\"",
			90.85869565217392,
			91.57608695652182,
			3,
			6
		],
		[
			"Vocals, \"View\"",
			91.18478260869566,
			91.91304347826095,
			4,
			6
		],
		[
			"Vocals, \"To-\"",
			91.58695652173914,
			92.33695652173921,
			2,
			6
		],
		[
			"Vocals, \"-night\"",
			91.97826086956522,
			93.304347826087,
			3,
			6
		],
		[
			"Vocals, \"All\"",
			93.53079710144918,
			94.18079710144914,
			2,
			6
		],
		[
			"Vocals, \"I\"",
			93.94999999999996,
			94.59166666666636,
			3,
			6
		],
		[
			"Vocals, \"Want\"",
			94.39999999999999,
			95.0666666666662,
			2,
			6
		],
		[
			"Vocals, \"-'s A\"",
			94.82499999999995,
			95.433333333333,
			3,
			6
		],
		[
			"Vocals, \"View\"",
			95.19166666666666,
			95.8749999999996,
			4,
			6
		],
		[
			"Vocals, \"To-\"",
			95.475,
			96.14999999999962,
			2,
			6
		],
		[
			"Vocals, \"Night\"",
			95.99166666666666,
			97.55688405797103,
			3,
			6
		],
		[
			"Vocals, \"All\"",
			97.50649350649351,
			98.22077922077939,
			2,
			7
		],
		[
			"Vocals, \"I\"",
			97.90909090909093,
			98.6103896103898,
			4,
			7
		],
		[
			"Vocals, \"Want\"",
			98.35064935064936,
			99.03896103896122,
			3,
			7
		],
		[
			"Vocals, \"-'s A\"",
			98.72727272727273,
			99.50649350649364,
			2,
			7
		],
		[
			"Vocals, \"View\"",
			99.14285714285715,
			99.90909090909108,
			3,
			7
		],
		[
			"Vocals, \"To\"",
			99.45454545454548,
			100.2207792207794,
			4,
			7
		],
		[
			"Vocals, \"Night\"",
			99.93506493506497,
			101.10897797854328,
			2,
			7
		],
		[
			"Vocals, \"All\"",
			101.51086956521739,
			102.13043478260877,
			3,
			7
		],
		[
			"Vocals, \"I\"",
			101.86956521739131,
			102.4782608695653,
			4,
			7
		],
		[
			"Vocals, \"Want\"",
			102.30434782608695,
			102.94565217391312,
			2,
			7
		],
		[
			"Vocals, \"-'s A\"",
			102.68478260869566,
			103.27173913043487,
			3,
			7
		],
		[
			"Vocals, \"View\"",
			103.09782608695653,
			103.71739130434791,
			4,
			7
		],
		[
			"Vocals, \"To-\"",
			103.47826086956522,
			104.0978260869566,
			2,
			7
		],
		[
			"Vocals, \"-night\"",
			103.91304347826087,
			105.55434782608698,
			3,
			8
		],
		[
			"Stage 3",
			153.02113174668168,
			232.4783855177553,
			1,
			2
		],
		[
			"Stage 4",
			232.47173913043474,
			266.422875,
			1,
			3
		]
	]
}
