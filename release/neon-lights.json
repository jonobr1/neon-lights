{
	"config": {},
	"libraries": [
		"../release/third-party/url.js",
		"../release/third-party/has.js",
		"../release/third-party/three.js",
		"../release/third-party/three/js/effects/VREffect.js",
		"../release/third-party/three/js/loaders/FBXLoader2.js",
		"../release/third-party/three/js/controls/OrbitControls.js",
		"../release/third-party/three/js/controls/DeviceOrientationControls.js",
		"../release/third-party/three/js/controls/VRControls.js",
		"../release/third-party/three/js/vr/DaydreamController.js",
		"../release/third-party/orientation-arm-model.js",
		"../release/third-party/three/js/vr/ViveController.js"
	],
	"includes": [
		[
			"Setup",
			"var dom = FRAME.getDOM();\nvar clock = new THREE.Clock();\n\nvar renderer = new THREE.WebGLRenderer( { antialias: true } );\nrenderer.domElement.style.position = 'absolute';\nrenderer.domElement.style.top = 0;\nrenderer.domElement.style.left = 0;\ndom.appendChild( renderer.domElement );\n\nvar scene = new THREE.Scene();\nscene.userData.clear = function() {\n\n\tvar children = scene.children.slice( 0 );\n\tfor ( var i = 0; i < children.length; i++ ) {\n\t\tvar child  = children[ i ];\n\t\tscene.remove( child );\n\t}\n\t\n};\n\nvar dolly = new THREE.Camera();\nvar camera = new THREE.PerspectiveCamera();\ndolly.add( camera );\n\nvar controls = new THREE.VRControls( camera );\nvar effect = new THREE.VREffect( renderer );\n\nif ( navigator.getVRDisplays ) {\n\n\tnavigator.getVRDisplays()\n\t\t.then( function ( displays ) {\n\t\t\teffect.setVRDisplay( displays[ 0 ] );\n\t\t\tcontrols.setVRDisplay( displays[ 0 ] );\n\t\t} )\n\t\t.catch( function () {\n\t\t\t// no displays\n\t\t} );\n\n}\n\nvar resize = function ( event ) {\n\t\n\tvar width = dom.clientWidth;\n\tvar height = dom.clientHeight;\n\n\trenderer.setSize( width, height );\n\teffect.setSize( width, height );\n\n\tcamera.aspect = width / height;\n\tcamera.updateProjectionMatrix();\n\t\n\teffect.render( scene, camera );\n\t\n};\nwindow.addEventListener( 'resize', resize, false );\nresize();\n\nvar isLocal = /localhost/i.test(window.location.href);\nvar root = isLocal ? '../assets' : '//player-dev.cabrilleros.com/NEON_LIGHTS/assets';\n\nvar controllers = {\n\tdaydream: new THREE.DaydreamController(),\n\tleft: new THREE.ViveController(0),\n\tright: new THREE.ViveController(1),\n\tprevious: {\n\t\tposition: new THREE.Vector3(),\n\t\trotation: new THREE.Euler(),\n\t\tupdate: function( controller ) {\n\t\t\tvar obj = controllers.previous;\n\t\t\tobj.position.copy( controller.position );\n\t\t\tobj.rotation.copy( controller.rotation );\n\t\t}\n\t},\n\tsetup: function(parent) {\n\n\t\tcontrollers.daydream.quaternion = new THREE.Quaternion();\n\t\tcontrollers.daydream.arm = new OrientationArmModel();\n\n\t\t// TODO: Create meshes for controllers here.\n\t\t\n\t\tcontrollers.left.addEventListener( 'triggerdown', function() {\n\t\t\tcontrollers.left.userData.dragging = true;\n\t\t\tcontrollers.previous.update( controllers.left );\n\t\t\tcontrollers.onTriggerDown( controllers.left );\n\t\t});\n\t\tcontrollers.left.addEventListener( 'triggerup', function() {\n\t\t\tcontrollers.left.userData.dragging = false;\n\t\t\tcontrollers.onTriggerUp( controllers.left );\n\t\t});\n\t\t\n\t\tcontrollers.right.addEventListener( 'triggerdown', function() {\n\t\t\tcontrollers.right.userData.dragging = true;\n\t\t\tcontrollers.previous.update( controllers.right );\n\t\t\tcontrollers.onTriggerDown( controllers.right );\n\t\t});\n\t\tcontrollers.right.addEventListener( 'triggerup', function() {\n\t\t\tcontrollers.right.userData.dragging = false;\n\t\t\tcontrollers.onTriggerUp( controllers.right );\n\t\t});\n\t\t\n\t\tcontrollers.daydream.addEventListener( 'touchpaddown', function() {\n\t\t\tcontrollers.daydream.userData.dragging = true;\n\t\t\tcontrollers.previous.update( controllers.daydream );\n\t\t\tcontrollers.onTriggerDown( controllers.daydream );\n\t\t});\n\t\tcontrollers.daydream.addEventListener( 'touchpadup', function() {\n\t\t\tcontrollers.daydream.userData.dragging = false;\n\t\t\tcontrollers.onTriggerUp( controllers.daydream );\n\t\t});\n\n\t},\n\tupdate: function() {\n\n\t\t// TODO: Figure out how to update only\n\t\t// necessary controllers\n\t\t\n\t},\n\tonTriggerDown: function() {\n\t},\n\tonTriggerUp: function() {\n\t}\n};\n\nFRAME.addResource( 'dolly', dolly );\nFRAME.addResource( 'camera', camera );\nFRAME.addResource( 'scene', scene );\nFRAME.addResource( 'renderer', renderer );\nFRAME.addResource( 'clock', clock );\n\nFRAME.addResource( 'effect', effect );\nFRAME.addResource( 'controls', controls );\n\nFRAME.addResource( 'root', root );\nFRAME.addResource( 'controllers', controllers );"
		],
		[
			"Annie",
			"var scene = FRAME.getResource( 'scene' );\nvar path = [FRAME.getResource( 'root' ), '/models/annie/'].join('');\nvar loader = new THREE.FBXLoader();\n\nvar annie = new THREE.Group();\nvar files = {\n\tmodel: 'ani_chr_1-forest_bindpose_v03.fbx',\n\tanimations: {\n\t\trun: 'ani_chr_1-forest_run_v03.fbx'\n\t}\n};\n\nannie.userData.animations = {};\nannie.userData.play = function ( action ) {\n\t\n\tfor ( var k in annie.userData.animations ) {\n\t\n\t\tvar animation = annie.userData.animations[ k ];\n\t\tanimation.action[ k === action ? 'play' : 'stop' ]();\n\t\n\t}\n\t\n};\nloader.load( path + files.model, modelLoaded );\n\nFRAME.addResource( 'annie', annie );\n\nfunction modelLoaded ( fbx ) {\n\t\n\tannie.add( fbx );\n\tannie.userData.model = fbx;\n\tannie.userData.model.mixer = new THREE.AnimationMixer( fbx );\n\t\n\tfbx.traverse( function ( child ) {\n\t\t\n\t\tif ( child.isMesh ) {\n\t\t\t\n\t\t\tchild.material.side = THREE.DoubleSide;\n\n\t\t}\n\t\t\n\t} );\n\t\n\tfor ( var k in files.animations ) {\n\n\t\tvar animation = files.animations[ k ];\n\t\tloader.load( path + animation, animationLoaded( k ) );\n\n\t} \n\t\n}\n\nfunction animationLoaded ( name ) {\n\t\n\treturn function ( fbx ) {\n\n\t\tvar animation = fbx.animations[ 0 ];\n\t\tanimation.name += ': ' + name;\n\t\tanimation.action = annie.userData.model.mixer.clipAction( animation );\n\t\tannie.userData.animations[ name ] = animation;\n\t\t\n\t};\n\t\n}"
		]
	],
	"effects": [
		[
			"Forest",
			"var annie = FRAME.getResource( 'annie' );\nvar path = [FRAME.getResource( 'root' ), '/models/forest/'].join('');\n\nvar parameters = {\n\tsize: new FRAME.Parameters.Integer( 'Size', 72 ),\n\tamount: new FRAME.Parameters.Integer( 'Amount', 512 )\n};\n\nvar files = [\n\t'mdl_env_1_forest_flower_a_v01.fbx',\n\t'mdl_env_1_forest_grass_a01_v01.fbx',\n\t'mdl_env_1_forest_grass_a02_v01.fbx',\n\t'mdl_env_1_forest_grass_b01_v01.fbx',\n\t'mdl_env_1_forest_grass_b02_v01.fbx',\n\t'mdl_env_1_forest_grass_c01_v01.fbx',\n\t'mdl_env_1_forest_grass_c02_v01.fbx',\n\t'mdl_env_1_forest_grass_c03_v01.fbx',\n\t'mdl_env_1_forest_rock_a_v01.fbx',\n\t'mdl_env_1_forest_rock_b_v01.fbx',\n\t'mdl_env_1_forest_tree_a_v01.fbx',\n\t'mdl_env_1_forest_tree_b_v01.fbx',\n\t'mdl_env_1_forest_tree_c_v01.fbx',\n\t'mdl_env_1_forest_tree_d_v01.fbx'\n];\n\nvar dolly = FRAME.getResource( 'dolly' );\nvar scene = FRAME.getResource( 'scene' );\n\nvar group = new THREE.Scene();\ngroup.fog = new THREE.Fog( '#333', parameters.size.value / 8, parameters.size.value / 2 );\n\nvar ground = new THREE.Mesh(\n\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value ),\n\tnew THREE.MeshBasicMaterial({\n\t\tcolor: 0x72fa8c\n\t})\n);\nground.rotation.x = - Math.PI / 2;\ngroup.add( ground );\n\nvar loader = new THREE.FBXLoader();\n\nfiles.forEach(function(file) {\n\tloader.load(path + file, function(obj) {\n\t\t\n\t\tvar reference;\n\t\t\n\t\tobj.traverse( function ( child ) {\n\n\t\t\tif ( child.isMesh ) reference = child;\n\t\t\t\n\t\t} );\n\t\t\n\t\tfor ( var i = 0; i < 5; i ++ ) {\n\n\t\t\tvar clone = reference.clone();\n\t\t\tclone.position.x = Math.random() * 40 - 20;\n\t\t\tclone.position.z = Math.random() * 80 - 40;\n\t\t\tclone.rotation.y = Math.random() * Math.PI * 2;\n\t\t\tclone.userData.startPosition = clone.position.clone();\n\t\t\tgroup.add( clone );\n\t\t\n\t\t}\n\t\n\t});\n});\n\nfunction start () {\n\n\tannie.userData.play( 'run' );\n\t\n\tdolly.position.set( 0, 0.6, - 2 );\n\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );\n\tscene.add( group );\n\n}\n\nfunction end () {\n\t\n\tscene.remove( group );\n\t\n}\n\nfunction update ( progress ) {\n\t\n\tfor ( var i = 0; i < group.children.length; i ++ ) {\n\n\t\tvar mesh = group.children[ i ];\n\t\tvar startPosition = mesh.userData.startPosition;\n\n\t\tif ( startPosition !== undefined ) {\n\n\t\t\tmesh.position.z = ( ( startPosition.z + progress * 800 ) % 80 ) - 40;\n\n\t\t}\n\t\t\n\t}\n\n}"
		],
		[
			"House",
			"var dolly = FRAME.getResource( 'dolly' );\nvar scene = FRAME.getResource( 'scene' );\n\n// House\n\nvar group = new THREE.Group();\n\nvar geometry = new THREE.BoxBufferGeometry( 4, 4, 4 );\ngeometry.translate( 0, 2, 0 );\n\nvar material = new THREE.MeshNormalMaterial( { side: THREE.BackSide } );\nvar mesh = new THREE.Mesh( geometry, material );\ngroup.add( mesh );\n\n// function init(){}\n\nfunction start(){\n\t\n\tscene.add( group );\n\t\n}\n\nfunction end() {\n\t\n\tscene.remove( group );\n\t\n}\n\nfunction update( progress ){\n\n\tdolly.position.set( Math.sin( progress * 80 ) * 2, 0.6, Math.cos( progress * 80 ) * 2 );\n\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );\n\n}"
		],
		[
			"Effect",
			"var dolly = FRAME.getResource( 'dolly' );\nvar scene = FRAME.getResource( 'scene' );\n\nvar group = new THREE.Group();\n\nvar ground = new THREE.Mesh(\n\tnew THREE.PlaneBufferGeometry( 70, 70 ),\n\tnew THREE.MeshBasicMaterial({\n\t\tcolor: 0x72fa8c\n\t})\n);\nground.rotation.x = - Math.PI / 2;\ngroup.add( ground );\n\nvar geometry = new THREE.BoxBufferGeometry( 1, 1, 1 );\ngeometry.translate( 0, 0.5, 0 );\n\nfor ( var i = 0; i < 20; i ++ ) {\n\n\tvar mesh = new THREE.Mesh( geometry );\n\tmesh.position.x = Math.random() * 20 - 10;\n\tmesh.position.z = Math.random() * 60 - 30;\n\tmesh.scale.y = Math.random() * 4.0 + 1;\n\tmesh.userData.startPosition = mesh.position.clone();\n\tgroup.add( mesh );\t\n\n}\n\n// function init(){}\n\nfunction start(){\n\t\n\tscene.add( group );\n}\n\nfunction end() {\n\t\n\tscene.remove( group );\n\t\n}\n\nfunction update( progress ){\n\t\n\tdolly.position.set( 0, 0.6, 2 );\n\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );\n\t\n\tfor ( var i = 0; i < group.children.length; i ++ ) {\n\n\t\tvar mesh = group.children[ i ];\n\t\tvar startPosition = mesh.userData.startPosition;\n\n\t\tif ( startPosition !== undefined ) {\n\n\t\t\tmesh.position.z = ( ( startPosition.z + progress * 800 ) % 60 ) - 30;\n\t\t\n\t\t}\n\t\t\n\t}\n\n}"
		],
		[
			"Effect",
			"var parameters = {\n\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )\n};\n\n// function init(){}\n\nfunction start(){}\n\nfunction update( progress ){}"
		],
		[
			"Effect",
			"var controls = FRAME.getResource( 'controls' );\nvar controllers = FRAME.getResource( 'controllers' );\n\nfunction update( progress ){\n\n\tcontrols.update();\n\tcontrollers.update();\n\n}"
		],
		[
			"Effect",
			"var parameters = {\n\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )\n};\n\nvar dolly = FRAME.getResource( 'dolly' );\nvar clock = FRAME.getResource( 'clock' );\nvar camera = FRAME.getResource( 'camera' );\nvar scene = FRAME.getResource( 'scene' );\nvar effect = FRAME.getResource( 'effect' );\nvar annie = FRAME.getResource( 'annie' );\n\nscene.userData.clear();\nscene.add( dolly );\nscene.add( new THREE.AmbientLight( 0xffffff ) );\nscene.add( annie );\n\nfunction start(){}\n\nfunction end(){}\n\nfunction update( progress ){\n\n\tvar dt = clock.getDelta();\n\n\tif ( annie.userData.model ) {\n\t\tannie.userData.model.mixer.update( dt );\n\t}\n\teffect.render( scene, camera );\n\n}"
		]
	],
	"animations": [
		[
			"VR Update",
			0,
			266.5340909090911,
			3,
			4
		],
		[
			"Render",
			0,
			266.6041954967423,
			4,
			5
		],
		[
			"Stage 1",
			0,
			73.75129510838187,
			0,
			0
		],
		[
			"Stage 2",
			73.75257811002484,
			184.9952466625948,
			0,
			1
		],
		[
			"Stage 3",
			153.02143377001445,
			232.50368754108806,
			1,
			2
		],
		[
			"Stage 4: Neon Lights",
			232.4999999999999,
			266.5124507874008,
			1,
			3
		]
	]
}
