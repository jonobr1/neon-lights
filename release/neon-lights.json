{
	"config": {},
	"libraries": [
		"../release/third-party/url.js",
		"../release/third-party/has.js",
		"../release/third-party/signals.min.js",
		"../release/third-party/tween.js",
		"../release/third-party/three.js",
		"../release/third-party/three/js/ShaderPass.js",
		"../release/third-party/three/js/effects/VREffect.js",
		"../release/third-party/three/js/loaders/FBXLoader2.js",
		"../release/third-party/three/js/controls/DeviceOrientationControls.js",
		"../release/third-party/three/js/controls/VRControls.js",
		"../release/third-party/three/js/vr/MouseController.js",
		"../release/third-party/three/js/vr/DaydreamController.js",
		"../release/third-party/orientation-arm-model.js",
		"../release/third-party/three/js/vr/ViveController.js",
		"../release/src/NeonParticles.js",
		"../release/src/NeonEffect.js",
		"../release/src/NeonShader.js"
	],
	"includes": [
		[
			"Ease",
			[
				"var Ease = function( value, drag ) {",
				"",
				"\tthis.original = value || 0;",
				"",
				"\tthis.value = this.original;",
				"\tthis.destination = this.original;",
				"",
				"\tif ( ( typeof drag ) == 'number' ) {",
				"\t\tthis.drag = drag;",
				"\t}",
				"",
				"};",
				"",
				"Ease.Resolution = 50;",
				"",
				"Ease.prototype = {",
				"",
				"\tdrag: 0.33,",
				"",
				"\tinitial: true,",
				"",
				"\tupdate: function( timeDelta ) {",
				"\t\tif ( this.initial ) {",
				"\t\t\tthis.initial = true;",
				"\t\t\treturn this;",
				"\t\t}",
				"\t\tif ( ( typeof timeDelta ) == 'number' ) {",
				"\t\t\tvar drag = timeDelta * this.drag;",
				"\t\t\tthis.value += ( this.destination - this.value ) * drag * Ease.Resolution;",
				"\t\t\treturn this;",
				"\t\t}",
				"\t\tthis.value += ( this.destination - this.value ) * this.drag;",
				"\t\treturn this;",
				"\t},",
				"",
				"\tset: function(v) {",
				"\t\tthis.destination = this.value = v;",
				"\t\treturn this;",
				"\t},",
				"",
				"\tclear: function() {",
				"\t\tthis.destination = this.value = this.original;",
				"\t\treturn this;",
				"\t},",
				"\t",
				"\treset: function() {",
				"\t\tthis.value = this.destination;",
				"\t\tthis.initial = false;",
				"\t\treturn this;",
				"\t}",
				"",
				"};",
				"",
				"FRAME.addResource( 'Ease', Ease );"
			]
		],
		[
			"List",
			[
				"var List = function() {",
				"\tArray.call( this );",
				"};",
				"",
				"List.prototype = Object.create( Array.prototype );",
				"List.prototype.constructor = List;",
				"",
				"List.prototype.index = 0;",
				"List.prototype.exhausted = false;",
				"List.prototype.next = function () {",
				"\tvar index = this.index;",
				"\tthis.index = ( index + 1 ) % this.length;",
				"\tif ( !this.exhausted && this.index === 0 ) {",
				"\t\tthis.exhausted = true;",
				"\t}",
				"\treturn this[ index ];",
				"};",
				"",
				"FRAME.addResource( 'List', List );"
			]
		],
		[
			"Texture Animator",
			[
				"",
				"var TextureAnimator = function(texture, tilesHoriz, tilesVert) {",
				"\t// texture passed by reference, will be updated by the update function.",
				"",
				"\tthis.tilesHorizontal = tilesHoriz;",
				"\tthis.tilesVertical = tilesVert;",
				"",
				"\tthis.texture = texture;",
				"\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping; ",
				"\ttexture.repeat.set( 1 / this.tilesHorizontal, 1 / this.tilesVertical );",
				"",
				"\t// which image is currently being displayed?",
				"\tthis._currentTile = this.currentTile = 0;",
				"",
				"}",
				"",
				"TextureAnimator.prototype.update = function() {",
				"\tvar currentColumn = this._currentTile % this.tilesHorizontal;",
				"\tthis.texture.offset.x = currentColumn / this.tilesHorizontal;",
				"\tvar currentRow = Math.floor( this._currentTile / this.tilesHorizontal );",
				"\tthis.texture.offset.y = ( - currentRow - 1 ) / this.tilesVertical;",
				"};",
				"",
				"Object.defineProperty(TextureAnimator.prototype, 'currentTile', {",
				"",
				"\tget: function() {",
				"\t\treturn this._currentTile;",
				"\t},",
				"",
				"\tset: function(i) {",
				"",
				"\t\tthis._currentTile = i;",
				"\t\tthis.update();",
				"",
				"\t\treturn this;",
				"",
				"\t}",
				"",
				"});",
				"",
				"FRAME.addResource( 'TextureAnimator', TextureAnimator );"
			]
		],
		[
			"Setup",
			[
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' ) || ( new THREE.WebGLRenderer( { antialias: true } ) );",
				"renderer.domElement.style.position = 'absolute';",
				"renderer.domElement.style.top = 0;",
				"renderer.domElement.style.left = 0;",
				"dom.appendChild( renderer.domElement );",
				"",
				"var scene = new THREE.Scene();",
				"scene.fog = new THREE.Fog( 0x333333 );",
				"scene.userData.clear = function() {",
				"",
				"\tvar children = scene.children.slice( 0 );",
				"\tfor ( var i = 0; i < children.length; i++ ) {",
				"\t\tvar child  = children[ i ];",
				"\t\tscene.remove( child );",
				"\t\tif ( child.dispose ) {",
				"\t\t\tchild.dispose();",
				"\t\t}",
				"\t}",
				"\t",
				"};",
				"",
				"var dolly = new THREE.Camera();",
				"var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 500 );",
				"// camera.position.z = -1; // for animating mouth in editor -david",
				"",
				"dolly.userData.distance = 2;",
				"dolly.userData.target = new THREE.Vector3( 0.0, 0.6, 0 );",
				"dolly.userData.reset = function() {",
				"",
				"\tdolly.position.copy( dolly.userData.target );",
				"\tdolly.position.z -= dolly.userData.distance;",
				"\tdolly.lookAt( dolly.userData.target );",
				"",
				"};",
				"",
				"camera.userData.fov = {",
				"\tcurrent: camera.fov,",
				"\tdestination: camera.fov,",
				"\tdrag: 0.125,",
				"\tlimit: 0.01",
				"};",
				"",
				"dolly.add( camera );",
				"",
				"var controls = {",
				"\tvirtualReality: new THREE.VRControls( camera ),",
				"\tdeviceOrientation: new THREE.DeviceOrientationControls( camera ),",
				"\tupdate: function () {",
				"",
				"\t\tif ( controls.hasWebVR ) {",
				"\t\t\tcontrols.virtualReality.update();",
				"\t\t} else if ( has.mobile ) {",
				"\t\t\tcontrols.deviceOrientation.update();",
				"\t\t}",
				"",
				"\t}",
				"};",
				"\t",
				"var effect = new THREE.VREffect( renderer );",
				"",
				"var neon = new THREE.NeonEffect( effect, renderer );",
				"neon.enabled = false;",
				"neon.scale = 0.3;",
				"",
				"if ( navigator.getVRDisplays ) {",
				"",
				"\tnavigator.getVRDisplays()",
				"\t\t.then( function ( displays ) {",
				"",
				"\t\t\tcontrols.hasWebVR = true;",
				"\t\t",
				"\t\t\tvar hmd = displays[ 0 ];",
				"\t\t\teffect.setVRDisplay( hmd );",
				"\t\t\tcontrols.virtualReality.setVRDisplay( hmd );",
				"",
				"\t\t\twindow.addEventListener( 'vrdisplayactivate', function () {",
				"\t\t\t\tcontrols.virtualReality.resetPose();",
				"\t\t\t}, false );",
				"\t\t",
				"\t\t\twindow.addEventListener( 'vrdisplaypresentchange', function () {",
				"\t\t\t\tdolly.userData.reset();",
				"\t\t\t} );",
				"",
				"\t\t} )",
				"\t\t.catch( function () {",
				"",
				"\t\t} );",
				"",
				"}",
				"",
				"var resize = function ( event ) {",
				"\t",
				"\tvar width = dom.clientWidth || window.innerWidth;",
				"\tvar height = dom.clientHeight || window.innerHeight;",
				"",
				"\trenderer.setSize( width, height );",
				"\teffect.setSize( width, height );",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"\t/*",
				"\tvar materials = FRAME.getResource( 'materials' );",
				"\tif ( materials ) {",
				"\t\tvar filter = materials.filter;",
				"\t\tfilter.vignette.scale.setScalar( Math.max( camera.aspect, 1 ) );",
				"\t}",
				"\t*/",
				"\t",
				"\teffect.render( scene, camera );",
				"\t",
				"};",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"var isLocal = /localhost/i.test(window.location.href);",
				"var root = FRAME.getResource( 'root' ) || ( isLocal ? '../assets' : '//player-dev.cabrilleros.com/NEON_LIGHTS/assets' );",
				"",
				"var loader = new THREE.FBXLoader();",
				"",
				"FRAME.addResource( 'stages', [] );",
				"FRAME.addResource( 'renderer', renderer );",
				"FRAME.addResource( 'scene', scene );",
				"FRAME.addResource( 'dolly', dolly );",
				"FRAME.addResource( 'camera', camera );",
				"",
				"FRAME.addResource( 'controls', controls );",
				"FRAME.addResource( 'effect', effect );",
				"FRAME.addResource( 'neon', neon );",
				"",
				"FRAME.addResource( 'root', root );",
				"FRAME.addResource( 'loader', loader );"
			]
		],
		[
			"Controllers",
			[
				"var renderer = FRAME.getResource( 'renderer' );",
				"var v3 = new THREE.Vector3();",
				"var eu = new THREE.Euler();",
				"",
				"var controllers = {",
				"",
				"\tmouse: new THREE.MouseController( renderer.domElement ),",
				"\tdaydream: new THREE.DaydreamController(),",
				"\tleft: new THREE.ViveController(0),",
				"\tright: new THREE.ViveController(1),",
				"",
				"\tactive: '',",
				"",
				"\tdeltas: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler()",
				"\t},",
				"\t",
				"\torigin: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tthresholds: {",
				"\t\t\tposition: 0.15,",
				"\t\t\trotation: 0.15",
				"\t\t},",
				"\t\tclicked: function ( controller ) {",
				"",
				"\t\t\tvar origin = controllers.origin;",
				"\t\t\tvar tp = origin.thresholds.position;",
				"\t\t\tvar tr = origin.thresholds.rotation;",
				"",
				"\t\t\tv3.x = Math.abs( controller.position.x - origin.position.x );",
				"\t\t\tv3.y = Math.abs( controller.position.y - origin.position.y );",
				"\t\t\tv3.z = Math.abs( controller.position.z - origin.position.z );",
				"",
				"\t\t\teu.x = Math.abs( controller.rotation.x - origin.rotation.x );",
				"\t\t\teu.y = Math.abs( controller.rotation.y - origin.rotation.y );",
				"\t\t\teu.z = Math.abs( controller.rotation.z - origin.rotation.z );",
				"",
				"\t\t\treturn v3.x < tp && v3.y < tp && v3.z < tp",
				"\t\t\t\t&& eu.x < tr && eu.y < tr && eu.z < tr;",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tdragging: function () {",
				"\t\treturn controllers.mouse.userData.dragging",
				"\t\t\t|| controllers.daydream.userData.dragging",
				"\t\t\t|| controllers.left.userData.dragging",
				"\t\t\t|| controllers.right.userData.dragging;",
				"\t},",
				"\t",
				"\tprevious: {",
				"\t\tposition: new THREE.Vector3(),",
				"\t\trotation: new THREE.Euler(),",
				"\t\tupdate: function ( controller ) {",
				"",
				"\t\t\tvar obj = controllers.previous;",
				"\t\t\tvar d = controllers.deltas;",
				"",
				"\t\t\td.position.subVectors( controller.position, obj.position );",
				"",
				"\t\t\td.rotation.x = controller.rotation.x - obj.rotation.x;",
				"\t\t\td.rotation.y = controller.rotation.y - obj.rotation.y;",
				"\t\t\td.rotation.z = controller.rotation.z - obj.rotation.z;",
				"\t\t\t",
				"\t\t\tobj.position.copy( controller.position );",
				"\t\t\tobj.rotation.copy( controller.rotation );",
				"",
				"\t\t},",
				"\t\tset: function ( controller ) {",
				"",
				"\t\t\tvar previous = controllers.previous;",
				"\t\t\tvar deltas = controllers.deltas;",
				"\t\t\tvar origin = controllers.origin;",
				"\t\t\t",
				"\t\t\tdeltas.rotation.x = deltas.rotation.y = deltas.rotation.z = 0;",
				"\t\t\tdeltas.position.set( 0, 0, 0 );",
				"\t\t\t",
				"\t\t\tprevious.position.copy( controller.position );",
				"\t\t\tprevious.rotation.copy( controller.rotation );",
				"",
				"\t\t\torigin.position.copy( controller.position );",
				"\t\t\torigin.rotation.copy( controller.rotation );",
				"",
				"\t\t}",
				"\t},",
				"",
				"\tsetup: function( parent, effect ) {",
				"",
				"\t\tcontrollers.daydream.quaternion = new THREE.Quaternion();",
				"\t\tcontrollers.daydream.arm = new OrientationArmModel();",
				"",
				"\t\tvar root = FRAME.getResource( 'root' );",
				"\t\tvar loader = FRAME.getResource( 'loader' );",
				"\t\tvar url = root + '/models/controllers/controller-ascii.fbx';",
				"\t\t",
				"\t\tloader.load(url, function( fbx ) {",
				"",
				"\t\t\tfbx.scale.setScalar( 0.125 );",
				"",
				"\t\t\tvar handRight = fbx;",
				"\t\t\tvar handLeft = fbx.clone();",
				"\t\t\tvar handDaydream = fbx.clone();",
				"",
				"\t\t\tcontrollers.right.add( handRight );",
				"\t\t\tcontrollers.left.add( handLeft );",
				"\t\t\tcontrollers.daydream.add( handDaydream );",
				"",
				"\t\t});",
				"",
				"\t\tcontrollers.daydream.visible = controllers.left.visible",
				"\t\t\t= controllers.right.visible = false;",
				"",
				"\t\tparent.add( controllers.mouse );",
				"\t\tparent.add( controllers.daydream );",
				"\t\tparent.add( controllers.left );",
				"\t\tparent.add( controllers.right );",
				"",
				"\t\tvar clickTime = 0;",
				"\t\tvar isQuickClick = function () {",
				"\t\t\treturn ( Date.now() - clickTime ) < 100;",
				"\t\t};",
				"\t\tvar couldBeClick = function () {",
				"\t\t\treturn ( Date.now() - clickTime ) < 500;",
				"\t\t};",
				"",
				"\t\twindow.addEventListener( 'vrdisplaypresentchange', function () {",
				"\t\t\tif ( !effect.isPresenting ) {",
				"\t\t\t\tcontrollers.daydream.visible = controllers.left.visible",
				"\t\t\t\t\t= controllers.right.visible = false;",
				"\t\t\t}",
				"\t\t} );\t\t",
				"",
				"\t\tcontrollers.mouse.addEventListener( 'mousedown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.mouse.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'mouse';",
				"\t\t\tcontrollers.previous.set( controllers.mouse );",
				"\t\t\tcontrollers.onTriggerDown( controllers.mouse );",
				"\t\t} );",
				"\t\tcontrollers.mouse.addEventListener( 'mouseup', function () {",
				"\t\t\tcontrollers.mouse.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.mouse );",
				"\t\t\tif ( isQuickClick() || couldBeClick() && controllers.origin.clicked( controllers.mouse ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.mouse );",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\tcontrollers.left.addEventListener( 'triggerdown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.left.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'left';",
				"\t\t\tcontrollers.previous.set( controllers.left );",
				"\t\t\tcontrollers.onTriggerDown( controllers.left );",
				"\t\t} );",
				"\t\tcontrollers.left.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.left.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.left );",
				"\t\t\tif ( isQuickClick() || couldBeClick() && controllers.origin.clicked( controllers.left ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.left );",
				"\t\t\t}",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.right.addEventListener( 'triggerdown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.right.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'right';",
				"\t\t\tcontrollers.previous.set( controllers.right );",
				"\t\t\tcontrollers.onTriggerDown( controllers.right );",
				"\t\t} );",
				"\t\tcontrollers.right.addEventListener( 'triggerup', function () {",
				"\t\t\tcontrollers.right.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.right );",
				"\t\t\tif ( isQuickClick() || couldBeClick() && controllers.origin.clicked( controllers.right ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.right );",
				"\t\t\t}",
				"\t\t} );",
				"\t\t",
				"\t\tcontrollers.daydream.addEventListener( 'touchpaddown', function () {",
				"\t\t\tclickTime = Date.now();",
				"\t\t\tcontrollers.daydream.userData.dragging = true;",
				"\t\t\tcontrollers.active = 'daydream';",
				"\t\t\tcontrollers.previous.set( controllers.daydream );",
				"\t\t\tcontrollers.onTriggerDown( controllers.daydream );",
				"\t\t} );",
				"\t\tcontrollers.daydream.addEventListener( 'touchpadup', function () {",
				"\t\t\tcontrollers.daydream.userData.dragging = false;",
				"\t\t\tcontrollers.onTriggerUp( controllers.daydream );",
				"\t\t\tif ( isQuickClick() || couldBeClick() && controllers.origin.clicked( controllers.daydream ) ) {",
				"\t\t\t\tcontrollers.onTriggerClick( controllers.daydream );",
				"\t\t\t}",
				"\t\t} );",
				"",
				"\t\treturn controllers;",
				"\t\t",
				"\t},",
				"\t",
				"\tupdate: function( camera ) {",
				"",
				"\t\tif ( !navigator.getGamepads ) {",
				"",
				"\t\t\tcontrollers.mouse.update();",
				"\t\t\tvar active = controllers[ controllers.active ];",
				"",
				"\t\t\tif ( active ) {",
				"\t\t\t\tcontrollers.previous.update( active );",
				"\t\t\t}",
				"",
				"\t\t\treturn;\t// Safari hack",
				"",
				"\t\t}",
				"\t\t",
				"\t\tvar daydream, pad;",
				"\t\t",
				"\t\tif ( has.mobile ) {",
				"",
				"\t\t\tdaydream = controllers.daydream;",
				"\t\t\tdaydream.update();",
				"",
				"\t\t\tpad = daydream.getGamepad();",
				"\t\t\t",
				"\t\t\tif ( pad && pad.pose ) {",
				"",
				"\t\t\t\tvar pose = pad.pose;",
				"\t\t\t\tvar orientation = daydream.quaternion",
				"\t\t\t\t\t.fromArray( pose.orientation );",
				"\t\t\t\tvar arm = daydream.arm;",
				"\t\t\t\t",
				"\t\t\t\tarm.setHeadOrientation( camera.quaternion );",
				"\t\t\t\tarm.setHeadPosition( camera.position );",
				"\t\t\t\tarm.setControllerOrientation( orientation );",
				"\t\t\t\tarm.update();",
				"\t\t\t\t",
				"\t\t\t\tpose = arm.getPose();",
				"\t\t\t\tdaydream.position.copy( pose.position );",
				"\t\t\t\t",
				"\t\t\t}",
				"\t\t\t",
				"\t\t} else {",
				"",
				"\t\t\tcontrollers.left.update();",
				"\t\t\tcontrollers.right.update();",
				"\t\t\t",
				"\t\t}",
				"",
				"\t\tcontrollers.mouse.update();",
				"\t\tvar active = controllers[ controllers.active ];",
				"",
				"\t\tif ( active ) {",
				"\t\t\tcontrollers.previous.update( active );",
				"\t\t}",
				"\t\t",
				"\t},",
				"",
				"\tonTriggerDown: function ( controller ) {},",
				"",
				"\tonTriggerUp: function ( controller ) {},",
				"\t",
				"\tonTriggerClick: function ( controller ) {}",
				"",
				"};",
				"",
				"FRAME.addResource( 'controllers', controllers );"
			]
		],
		[
			"Materials",
			[
				"var filter = {",
				"\tsaturation: { type: 'f', value: url.number( 'saturation', 0.5 ) },",
				"\topacity: { type: 'f', value: url.number( 'opacity', 1.6 ) }",
				"};",
				"",
				"var skinnedVertexColors = THREE.neonShader.skinnedShader;",
				"skinnedVertexColors.uniforms.saturation = filter.saturation;",
				"",
				"var sepia = THREE.neonShader.sepiaShader;",
				"sepia.uniforms.opacity = filter.opacity;",
				"",
				"var basicVertexColors = THREE.neonShader.neonBasicShader;",
				"basicVertexColors.uniforms.saturation = filter.saturation;",
				"",
				"var grass = THREE.neonShader.grassShader;",
				"grass.uniforms.saturation = filter.saturation;",
				"",
				"var road = THREE.neonShader.roadShader;",
				"road.uniforms.saturation = filter.saturation;",
				"",
				"var floor = THREE.neonShader.floorShader;",
				"floor.uniforms.saturation = filter.saturation;",
				"",
				"var backdrop = THREE.neonShader.backdropShader;",
				"backdrop.uniforms.saturation = filter.saturation;",
				"",
				"var wave = THREE.neonShader.waveShader;",
				"wave.uniforms.saturation = filter.saturation;",
				"",
				"var materials = {",
				"",
				"\tannie: {",
				"",
				"\t\tskinned: new THREE.ShaderMaterial( {",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\tvertexColors: true,",
				"\t\t\tskinning: true,",
				"\t\t\tfog: true,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( skinnedVertexColors.uniforms ),",
				"\t\t\tvertexShader: skinnedVertexColors.vertexShader,",
				"\t\t\tfragmentShader: skinnedVertexColors.fragmentShader",
				"",
				"\t\t} )",
				"",
				"\t},",
				"",
				"\tforest: {",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tfog: true,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( floor.uniforms ),",
				"\t\t\tvertexShader: floor.vertexShader,",
				"\t\t\tfragmentShader: floor.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: true,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\twave: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tvertexColors: true,",
				"\t\t\tfog: true,",
				"\t\t\tside: THREE.DoubleSide,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( wave.uniforms ),",
				"\t\t\tvertexShader: wave.vertexShader,",
				"\t\t\tfragmentShader: wave.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\tgrass: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tfog: true,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( grass.uniforms ),",
				"\t\t\tvertexShader: grass.vertexShader,",
				"\t\t\tfragmentShader: grass.fragmentShader",
				"",
				"\t\t} )",
				"",
				"\t},",
				"",
				"\thouse: {",
				"",
				"\t\troom: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tvertexColors: true,",
				"\t\t\tfog: true,",
				"\t\t\tside: THREE.FrontSide,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( basicVertexColors.uniforms ),",
				"\t\t\tvertexShader: basicVertexColors.vertexShader,",
				"\t\t\tfragmentShader: basicVertexColors.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\ttoy: new THREE.ShaderMaterial( {",
				"",
				"\t\t\tvertexColors: true,",
				"\t\t\tfog: true,",
				"\t\t\tside: THREE.DoubleSide,",
				"",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( basicVertexColors.uniforms ),",
				"\t\t\tvertexShader: basicVertexColors.vertexShader,",
				"\t\t\tfragmentShader: basicVertexColors.fragmentShader",
				"",
				"\t\t} )",
				"",
				"\t},",
				"",
				"\tcity: {",
				"",
				"\t\tfloor: new THREE.ShaderMaterial( {",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\tfog: true,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( road.uniforms ),",
				"\t\t\tvertexShader: road.vertexShader,",
				"\t\t\tfragmentShader: road.fragmentShader",
				"\t\t} ),",
				"",
				"\t\tbackdrop: new THREE.ShaderMaterial( {",
				"\t\t\tside: THREE.BackSide,",
				"\t\t\tfog: true,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( backdrop.uniforms ),",
				"\t\t\tvertexShader: backdrop.vertexShader,",
				"\t\t\tfragmentShader: backdrop.fragmentShader",
				"",
				"\t\t} ),",
				"",
				"\t\tbuilding: new THREE.ShaderMaterial( {",
				"\t\t\tvertexColors: true,",
				"\t\t\tfog: true,",
				"\t\t\tside: THREE.DoubleSide,",
				"\t\t\tuniforms: THREE.UniformsUtils.clone( basicVertexColors.uniforms ),",
				"\t\t\tvertexShader: basicVertexColors.vertexShader,",
				"\t\t\tfragmentShader: basicVertexColors.fragmentShader",
				"",
				"\t\t} )",
				"",
				"\t},",
				"\t",
				"\tfilter: filter",
				"",
				"};",
				"",
				"filter.sepia = new THREE.ShaderMaterial( {",
				"",
				"\ttransparent: true,",
				"\tblending: THREE.SubtractiveBlending,",
				"\tfog: false,",
				"",
				"\tuniforms: THREE.UniformsUtils.clone( sepia.uniforms ),",
				"\tvertexShader: sepia.vertexShader,",
				"\tfragmentShader: sepia.fragmentShader",
				"",
				"} );",
				"",
				"filter.sepia.uniforms.opacity = filter.opacity;",
				"",
				"var list = [ 'annie', 'forest', 'city', 'house' ];",
				"for ( var i = 0 ; i < list.length; i++ ) {",
				"\tvar name = list[ i ];",
				"\tvar stage = materials[ name ];",
				"\tfor ( var k in stage ) {",
				"\t\tvar material = stage[ k ];",
				"\t\tif ( material.uniforms ) {",
				"\t\t\tmaterial.uniforms.saturation = filter.saturation;",
				"\t\t}",
				"\t}",
				"}",
				"",
				"FRAME.addResource( 'materials', materials );",
				""
			]
		],
		[
			"Annie",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var root = FRAME.getResource( 'root' );",
				"var path = [ root, '/models/annie/' ].join('');",
				"var loader = FRAME.getResource( 'loader' );",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var material = FRAME.getResource( 'materials' ).annie.skinned;",
				"var TextureAnimator = FRAME.getResource( 'TextureAnimator' );",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var annie = new THREE.Group();",
				"var files = {",
				"\tmodels: {",
				"\t\tchild: 'ani_chr_1-forest_bindpose_v02.fbx',",
				"\t\tteenager: 'ani_chr_2-house_bindpose_v02.fbx',",
				"\t\tadult: 'ani_chr_3-city_bindpose_v02.fbx'",
				"\t},",
				"\tanimations: {",
				"\t\tchild: {",
				"\t\t\trun: 'ani_chr_1-forest_run_v02.fbx',",
				"\t\t\tidle: 'ani_chr_1-forest_idle_v02.fbx',",
				"\t\t\twalk: 'ani_chr_1-forest_walk_v02.fbx',",
				"\t\t\ttransition: 'ani_chr_1-forest_flyAnnie_v02.fbx'",
				"\t\t},",
				"\t\tteenager: {",
				"\t\t\trun: 'ani_chr_2-house_run_v02.fbx',",
				"\t\t\tidle: 'ani_chr_2-house_idle_v02.fbx',",
				"\t\t\twalk: 'ani_chr_2-house_walk_v02.fbx'",
				"\t\t},",
				"\t\tadult: {",
				"\t\t\trun: 'ani_chr_3-city_run_v02.fbx',",
				"\t\t\tidle: 'ani_chr_3-city_idle_v02.fbx'",
				"\t\t}",
				"\t}",
				"};",
				"",
				"annie.userData.models = {};",
				"annie.userData.animations = { child: {}, teenager: {}, adult: {} };",
				"annie.userData.model = null;",
				"",
				"enhance( annie.userData.models, 4 );",
				"enhance( annie.userData.animations, 6 );",
				"",
				"annie.userData.age = function ( age ) {",
				"\tannie.userData.models.complete.ready( function () {",
				"",
				"\t\tvar model = annie.userData.models[ age ];",
				"\t\tmodel.visible = true;",
				"",
				"\t\tif (annie.userData.model != model && annie.userData.model) {",
				"\t\t\tannie.userData.prevModel = annie.userData.model;",
				"\t\t\tannie.userData.transitionTime = 0;",
				"\t\t}",
				"\t\t",
				"\t\tannie.userData.model = model;",
				"\t\tannie.userData.currentAnimation = model.userData.currentAnimation;",
				"",
				"\t\tvar bb = model.userData.boundingBox;",
				"\t\tvar height = bb.max.y - bb.min.y;",
				"\t\tdolly.userData.target.y = height * 0.66;",
				"",
				"\t} );",
				"};",
				"",
				"annie.userData.prevModel = null;",
				"annie.userData.transitionLength = 1;",
				"annie.userData.transitionTime = 1;",
				"",
				"annie.userData.updateAnimation = function( dt ) {",
				"\tannie.userData.transitionTime += dt;",
				"\tif ( dt == 0 || dt > 0.1) annie.userData.transitionTime = 1;",
				"\tvar weight = annie.userData.transitionTime / annie.userData.transitionLength;",
				"\tif ( annie.userData.model ) {",
				"\t\tannie.userData.model.mixer.update( dt );",
				"\t\tsetClipRange( annie.userData.model, 0 , weight * 2 );",
				"\t}",
				"\tif ( annie.userData.prevModel ) {",
				"\t\tannie.userData.prevModel.mixer.update( dt );",
				"\t\tif (weight > 1) {",
				"\t\t\tannie.userData.prevModel.visible = false;",
				"\t\t\tdelete annie.userData.prevModel;",
				"\t\t} else {",
				"\t\t\tsetClipRange( annie.userData.prevModel, 2 * weight, 2 );",
				"\t\t}",
				"\t}",
				"}",
				"",
				"annie.userData.play = function ( action, forced ) {",
				"",
				"\tannie.userData.animations.complete.ready( function () {",
				"\t\tif ( !annie.userData.model ) return;",
				"",
				"\t\tvar model = annie.userData.model;",
				"\t\tvar animations = model.userData.animations;",
				"\t\tvar current = model.userData.currentAnimation;",
				"\t\t",
				"\t\tif ( current && current.type === action ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tfor ( var k in animations ) {",
				"\t\t\tvar animation = animations[ k ];",
				"\t\t\tif ( k !== action ) {",
				"\t\t\t\tcontinue;",
				"\t\t\t}",
				"\t\t\tif ( current ) {",
				"\t\t\t\tif ( current === animation ) {",
				"\t\t\t\t\tbreak;",
				"\t\t\t\t}",
				"\t\t\t\tif ( !!forced ) {",
				"\t\t\t\t\tcurrent.action.stop();",
				"\t\t\t\t} else {",
				"\t\t\t\t\tanimation.action.crossFadeFrom( current.action, 0.35 );",
				"\t\t\t\t}",
				"\t\t\t\tanimation.action.stop().play();",
				"\t\t\t} else {",
				"\t\t\t\tanimation.action.play();",
				"\t\t\t}",
				"\t\t\tmodel.userData.currentAnimation = animation;",
				"\t\t\tannie.userData.currentAnimation = animation;",
				"\t\t}",
				"",
				"\t} );",
				"\t",
				"};",
				"",
				"for ( var age in files.models ) {",
				"",
				"\tloader.load( path + files.models[ age ], loadModel( age ) );",
				"",
				"\tvar animations = files.animations[ age ];",
				"",
				"\tfor ( var action in animations ) {",
				"",
				"\t\tvar animation = animations[ action ];",
				"\t\tloader.load( path + animation, animationLoaded( age, action ) );",
				"",
				"\t}",
				"",
				"}",
				"",
				"var faceImage = document.createElement('img');",
				"faceImage.crossOrigin = 'anonymous';",
				"faceImage.src = root + '/textures/TX_annieFacial_A01_C_v02.png';",
				"",
				"faceImage.onload = function() {",
				"",
				"\tvar models = annie.userData.models;",
				"",
				"\tmodels.complete.ready( function () {",
				"",
				"\t\tfor ( var age in files.models ) {",
				"",
				"\t\t\tmodels[ age ].userData.eyeLeft.texture.needsUpdate = true;",
				"\t\t\tmodels[ age ].userData.eyeRight.texture.needsUpdate = true;",
				"\t\t\tmodels[ age ].userData.mouth.texture.needsUpdate = true;",
				"",
				"\t\t}",
				"",
				"\t} );",
				"",
				"\tmodels.complete();",
				"",
				"};",
				"",
				"annie.userData.models.complete.ready( function () {",
				"",
				"\tvar models = annie.userData.models;",
				"",
				"\t// child",
				"",
				"\tmodels.child.userData.eyeLeft.animator.currentTile = 0;",
				"\tmodels.child.userData.eyeRight.animator.currentTile = 0;",
				"",
				"\tvar childEyeLeft = models.child.userData.eyeLeft.mesh;",
				"\tchildEyeLeft.position.set( 0.106, 0.129, 0.134 );",
				"\tchildEyeLeft.rotation.x = THREE.Math.degToRad( 11.182 );",
				"\tchildEyeLeft.rotation.y = THREE.Math.degToRad( 22.183 );",
				"\tchildEyeLeft.rotation.z = THREE.Math.degToRad( 1.924 );",
				"\tchildEyeLeft.scale.set( 0.77, 0.77, 0.77 );",
				"",
				"\tvar childEyeRight = models.child.userData.eyeRight.mesh;",
				"\tchildEyeRight.position.set( -0.106, 0.129, 0.134 );",
				"\tchildEyeRight.rotation.x = THREE.Math.degToRad( 11.182 );",
				"\tchildEyeRight.rotation.y = THREE.Math.degToRad( -22.183 );",
				"\tchildEyeRight.rotation.z = THREE.Math.degToRad( 1.924 );",
				"\tchildEyeRight.scale.set( 0.77, 0.77, 0.77 );",
				"",
				"\tvar childMouth = models.child.userData.mouth.mesh;",
				"\tchildMouth.position.set( 0, 0.058, 0.131 );",
				"\tchildMouth.rotation.x = THREE.Math.degToRad( 29.534 );",
				"\tchildMouth.scale.set( 1.28, 1.28, 1.28 );",
				"",
				"\t// teen",
				"",
				"\tmodels.teenager.userData.eyeLeft.animator.currentTile = 2;",
				"\tmodels.teenager.userData.eyeRight.animator.currentTile = 2;",
				"",
				"\tvar teenEyeLeft = models.teenager.userData.eyeLeft.mesh;",
				"\tteenEyeLeft.position.set( 0.081, 0.116, 0.164 );",
				"\tteenEyeLeft.rotation.x = THREE.Math.degToRad( 15.641 );",
				"\tteenEyeLeft.rotation.y = THREE.Math.degToRad( 33.377 );",
				"\tteenEyeLeft.rotation.z = THREE.Math.degToRad( 0.148 );",
				"",
				"\tvar teenEyeRight = models.teenager.userData.eyeRight.mesh;",
				"\tteenEyeRight.position.set( -0.081, 0.116, 0.164 );",
				"\tteenEyeRight.rotation.x = THREE.Math.degToRad( 15.641 );",
				"\tteenEyeRight.rotation.y = THREE.Math.degToRad( -33.377 );",
				"\tteenEyeRight.rotation.z = THREE.Math.degToRad( 0.148 );",
				"",
				"\tvar teenMouth = models.teenager.userData.mouth.mesh;",
				"\tteenMouth.position.set( 0, 0.049, 0.154 );",
				"\tteenMouth.rotation.x = THREE.Math.degToRad( 28.713 );",
				"\tteenMouth.scale.set( 1.1, 1.1, 1.1 );",
				"",
				"\t// adult",
				"",
				"\tmodels.adult.userData.eyeLeft.animator.currentTile = 2;",
				"\tmodels.adult.userData.eyeRight.animator.currentTile = 2;",
				"",
				"\tvar adultEyeLeft = models.adult.userData.eyeLeft.mesh;",
				"\tadultEyeLeft.position.set( 0.099, 0.139, 0.165 );",
				"\tadultEyeLeft.rotation.x = THREE.Math.degToRad( 5.452 );",
				"\tadultEyeLeft.rotation.y = THREE.Math.degToRad( 30.268 );",
				"\tadultEyeLeft.scale.set( 1.2, 1.2, 1.2 );",
				"",
				"\tvar adultEyeRight = models.adult.userData.eyeRight.mesh;",
				"\tadultEyeRight.position.set( -0.099, 0.139, 0.165 );",
				"\tadultEyeRight.rotation.x = THREE.Math.degToRad( 5.452 );",
				"\tadultEyeRight.rotation.y = THREE.Math.degToRad( -30.268 );",
				"\tadultEyeRight.scale.set( 1.2, 1.2, 1.2 );",
				"",
				"\tvar adultMouth = models.adult.userData.mouth.mesh;",
				"\tadultMouth.position.set( 0, 0.056, 0.167 );",
				"\tadultMouth.rotation.x = THREE.Math.degToRad( 28.975 );",
				"\tadultMouth.scale.set( 1.28, 1.28, 1.28 );",
				"",
				"\tneon.setMaterials( annie );",
				"",
				"} );",
				"",
				"var facePlaneGeo = new THREE.PlaneBufferGeometry( 0.1, 0.1, 0.1 );",
				"",
				"",
				"var FacePlane = function( parent ) {",
				"\tvar texture = this.texture = new THREE.Texture( faceImage );",
				"\tthis.animator = new TextureAnimator( texture, 4, 4 );",
				"\tthis.animator.currentTile = 0;",
				"\tvar material = new THREE.MeshBasicMaterial({ transparent: true, map: texture });",
				"\tvar mesh = this.mesh = new THREE.Mesh( facePlaneGeo, material );",
				"\tparent.add( mesh );",
				"}",
				"",
				"FRAME.addResource( 'annie', annie );",
				"",
				"function loadModel ( age ) {",
				"",
				"\treturn function ( fbx ) {",
				"",
				"\t\tannie.userData.models[ age ] = fbx;",
				"\t\t",
				"\t\tfbx.traverse( function ( child ) {",
				"",
				"\t\t\tif ( child.isMesh ) {",
				"",
				"\t\t\t\tvar lambert = child.material;",
				"\t\t\t\tchild.material = material.clone();",
				"\t\t\t\tlambert.dispose();",
				"",
				"\t\t\t\tchild.geometry.computeBoundingBox();",
				"\t\t\t\tfbx.userData.boundingBox = child.geometry.boundingBox;",
				"",
				"\t\t\t}",
				"",
				"\t\t} );",
				"",
				"\t\tfbx.mixer = new THREE.AnimationMixer( fbx );",
				"\t\tfbx.visible = false;",
				"\t\tfbx.userData.animations = {};",
				"\t\t",
				"\t\t// fbx.rotation.y = Math.PI; // for animating mouth in editor -david",
				"",
				"\t\tannie.add( fbx );",
				"",
				"\t\tvar headBones = {",
				"\t\t\tchild: 'annieHead',",
				"\t\t\tteenager: 'annieTeenHead',",
				"\t\t\tadult: 'annieGrownHead'",
				"\t\t};",
				"",
				"\t\tvar headBone = fbx.children[0].getObjectByName( headBones[age] );",
				"",
				"\t\tfbx.userData.eyeLeft = new FacePlane( headBone );",
				"\t\tfbx.userData.eyeRight = new FacePlane( headBone );",
				"\t\tfbx.userData.mouth = new FacePlane( headBone );",
				"\t\tfbx.userData.mouth.animator.currentTile = 4;",
				"",
				"\t\tannie.userData.models.complete();",
				"",
				"\t};",
				"\t",
				"}",
				"",
				"function animationLoaded ( age, action ) {",
				"\t",
				"\treturn function ( fbx ) {",
				"",
				"\t\tannie.userData.models.complete.ready( function () {",
				"",
				"\t\t\tvar model = annie.userData.models[ age ];",
				"",
				"\t\t\tvar animation = fbx.animations[ 0 ];",
				"\t\t\tanimation.name += ': ' + age + ' : ' + action;",
				"\t\t\tanimation.type = action;",
				"\t\t\tanimation.action = model.mixer.clipAction( animation );",
				"",
				"\t\t\tif ( /turn/.test( action ) ) {",
				"\t\t\t\tanimation.action.loop = THREE.LoopOnce;",
				"\t\t\t\tanimation.action.loopCount = 1;",
				"\t\t\t}",
				"",
				"\t\t\tmodel.userData.animations[ action ] = animation;",
				"\t\t\tannie.userData.animations[ age ][ action ] = animation;",
				"\t\t\tannie.userData.animations.complete();",
				"",
				"\t\t} );",
				"\t\t",
				"\t};",
				"\t",
				"}",
				"",
				"function setClipRange ( obj, clipStart, clipEnd )  {",
				"",
				"\tobj.traverse( function( child ) {",
				"",
				"\t\tif ( child.material && child.material.uniforms && child.material.uniforms.clipy ) {",
				"\t\t  child.material.uniforms.clipy.value.set( clipStart, clipEnd );",
				"\t\t}",
				"",
				"\t} );",
				"",
				"}",
				"",
				"function enhance ( obj, length ) {",
				"",
				"\tvar complete = function () {",
				"",
				"\t\tcomplete.index++;",
				"",
				"\t\tif ( !complete.completed && complete.index >= complete.amount ) {",
				"\t\t\tfor ( var i = 0; i < complete.callbacks.length; i++ ) {",
				"\t\t\t\tcomplete.callbacks[ i ]();",
				"\t\t\t}",
				"\t\t\tcomplete.callbacks.length = 0;",
				"\t\t\tcomplete.completed = true;",
				"\t\t}",
				"",
				"\t};",
				"",
				"\tcomplete.ready = function ( func ) {",
				"\t\tif ( complete.completed ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tcomplete.callbacks.push( func );",
				"\t};",
				"",
				"\tcomplete.completed = false;",
				"\tcomplete.index = 0;",
				"\tcomplete.amount = length;",
				"\tcomplete.callbacks = [];",
				"",
				"\tobj.complete = complete;",
				"",
				"}"
			]
		],
		[
			"Models",
			[
				"// BufferGeometryLoader",
				"",
				"var Signal = signals.Signal;",
				"var root = FRAME.getResource( 'root' );",
				"var loader = new THREE.BufferGeometryLoader();",
				"",
				"var models = {",
				"\t",
				"\tforest: {",
				"\t\tname: 'forest',",
				"\t\tfiles: [",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_flower_a_v01.json',",
				"",
				"\t\t\t'mdl_env_1_forest_grass_a01_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_a02_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_b01_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_b02_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_c01_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_c02_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_c03_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_d_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_e_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_f_v01.json',",
				"\t\t\t'mdl_env_1_forest_grass_g_v01.json',",
				"\t\t\t",
				"\t\t\t'mdl_env_1_forest_rock_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_rock_b_v01.json',",
				"",
				"\t\t\t'mdl_env_1_forest_mushroom_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_mushroom_b_v01.json',",
				"\t\t\t'mdl_env_1_forest_mushroom_c_v01.json',",
				"",
				"\t\t\t'mdl_env_1_forest_tree_a_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_b_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_c_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_d_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_e_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_f_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_g_v01.json',",
				"\t\t\t'mdl_env_1_forest_tree_h_v01.json'",
				"\t\t\t",
				"\t\t]",
				"\t},",
				"",
				"\texterior: {",
				"\t\tname: 'house',",
				"\t\tfiles: [",
				"\t\t\t'house-with-hallway.json'",
				"\t\t]",
				"\t},",
				"",
				"\thouse: {",
				"\t\tname: 'house',",
				"\t\tfiles: [",
				"\t\t\t'bedroom.json',",
				"\t\t\t'kitchen.json',",
				"\t\t\t'living-room.json',",
				"\t\t\t'office.json'",
				"\t\t]",
				"\t},",
				"",
				"\t/**",
				"\t * Interactive Files for Stage 2",
				"\t */",
				"\tbedroom: {",
				"\t\tname: 'bedroom/interactive',",
				"\t\tfiles: [",
				"",
				"\t\t\t'ball-blue.json',",
				"\t\t\t'ball-green.json',",
				"\t\t\t'ball-purple.json',",
				"",
				"\t\t\t'pyramid-green.json',",
				"\t\t\t'pyramid-orange.json',",
				"",
				"\t\t\t'cube-blue.json',",
				"\t\t\t'cube-orange.json',",
				"\t\t\t'cube-purple.json',",
				"\t\t\t'cube-yellow.json',",
				"",
				"\t\t\t'bunny.json',",
				"\t\t\t'elephant.json',",
				"\t\t\t'giraffe.json',",
				"\t\t\t'teddy.json',",
				"\t\t\t'tricycle.json'",
				"",
				"\t\t]",
				"\t},",
				"\t",
				"\tcity: {",
				"\t\tname: 'city',",
				"\t\tfiles: [",
				"\t\t\t'bb-mid-ascii.json',",
				"\t\t\t'bb-small-ascii.json',",
				"\t\t\t'bb-tall-ascii.json',",
				"\t\t\t'pavement-ascii.json'",
				"\t\t]",
				"\t}",
				"\t",
				"};",
				"",
				"for ( var name in models ) {",
				"",
				"\tvar stage = models[ name ];",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"",
				"\tenhance( stage );",
				"\t",
				"\tfor ( var i = 0; i < length; i++ ) {",
				"",
				"\t\tload( stage, files[ i ] );",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"function enhance ( stage ) {",
				"",
				"\tvar files = stage.files;",
				"\tvar length = files.length;",
				"\tvar loaded = 0;",
				"\tvar isComplete = false;",
				"\t",
				"\tstage.geometries = [];",
				"\tstage.onLoad = new Signal();",
				"\tstage.ready = function ( func ) {",
				"\t\tif ( isComplete ) {",
				"\t\t\tfunc();",
				"\t\t\treturn;",
				"\t\t}",
				"\t\tstage.onLoad.add( func );",
				"\t};",
				"\t",
				"\tfiles.complete = function ( path ) {",
				"",
				"\t\tloaded++;",
				"\t\t",
				"\t\tif ( !isComplete && loaded >= length ) {",
				"\t\t\tisComplete = true;",
				"\t\t\tstage.onLoad.dispatch();",
				"\t\t}",
				"\t\t",
				"\t\t",
				"\t};",
				"\t",
				"}",
				"",
				"function load ( stage, path ) {",
				"\t",
				"\tvar files = stage.files;",
				"\tvar url = [ root, 'models', stage.name, path ].join ( '/' );",
				"",
				"\tloader.load( url, function ( geometry ) {",
				"",
				"\t\tgeometry.name = path;",
				"\t\tgeometry.computeBoundingSphere();",
				"",
				"\t\tstage.geometries.push( geometry );",
				"\t\tfiles.complete( path );",
				"\t\t",
				"\t} );",
				"\t",
				"}",
				"",
				"function extract ( stage, fbx, path ) {",
				"\t",
				"\tvar geometries = stage.geometries;",
				"",
				"\tfbx.traverse( function( child ) {",
				"",
				"\t\tif ( child.isMesh ) {",
				"",
				"\t\t\tif ( child.rotation.x !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateX( child.rotation.x );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.y !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateY( child.rotation.y );",
				"\t\t\t}",
				"\t\t\tif ( child.rotation.z !== 0 ) {",
				"\t\t\t\tchild.geometry.rotateZ( child.rotation.z );",
				"\t\t\t}",
				"",
				"\t\t\tchild.geometry.name = path;",
				"\t\t\tchild.geometry.computeBoundingSphere();",
				"",
				"\t\t\tgeometries.push( child.geometry );",
				"",
				"\t\t}",
				"\t\t",
				"\t} );",
				"",
				"}",
				"",
				"FRAME.addResource( 'models', models );"
			]
		],
		[
			"Vignette",
			[
				"var camera = FRAME.getResource( 'camera' );",
				"var materials = FRAME.getResource( 'materials' );",
				"",
				"var plane = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry(1, 1, 1, 1),",
				"\tmaterials.filter.sepia",
				");",
				"",
				"camera.add( plane );",
				"plane.position.z = - ( camera.near + 0.001 );",
				"",
				"materials.filter.vignette = plane;"
			]
		]
	],
	"effects": [
		[
			"Forest",
			[
				"var TWO_PI = Math.PI * 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var List = FRAME.getResource( 'List' );",
				"var clock = new THREE.Clock();",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).forest;",
				"var materials = FRAME.getResource( 'materials' ).forest;",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 512 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 ),",
				"\tforceField: new FRAME.Parameters.Float( 'Field', 0.025 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var material = materials.wave;",
				"",
				"var theta = new Ease( 0, 0.66 );",
				"var step = new Ease( 0.1 * parameters.step.value, 0.0625 );",
				"var direction = new Ease( 0, 0.033 );",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( 0x333333, 0, parameters.size.value * 0.66 );",
				"",
				"materials.floor.uniforms.color.value.set( 0x72fa8c );",
				"materials.floor.uniforms.size.value = parameters.size.value;",
				"materials.floor.uniforms.fogColor.value.set( group.fog.color );",
				"",
				"materials.backdrop.uniforms.color.value.set( 0xdde9ab );",
				"",
				"materials.wave.uniforms.fogColor.value.set( group.fog.color );",
				"",
				"materials.grass.uniforms.size.value = parameters.size.value;",
				"materials.grass.uniforms.base.value.set( 0x72fa8c );",
				"materials.grass.uniforms.fogColor.value.set( group.fog.color );",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value - 1 ),",
				"\tmaterials.backdrop",
				");",
				"",
				"neon.setMaterials( backdrop );",
				"",
				"var field = [];",
				"field.geometry = new THREE.CylinderBufferGeometry( 0.2, 0.2, 1, 4, 16, true );",
				"field.material = materials.grass;",
				"field.geometry.translate( 0, 0.5, 0 );",
				"",
				"var elements = [];",
				"var types = {",
				"\tflower: new List(),",
				"\tmushroom: new List(),",
				"\tgrass: new List(),",
				"\trock: new List(),",
				"\ttree: new List(),",
				"\tlist: ['flower', 'mushroom', 'grass', 'rock', 'tree']",
				"};",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"",
				"\t\tmesh.scale.setScalar( Math.random() / 2 + 0.5 );",
				"\t\tmesh.rotation.y = Math.random() * TWO_PI;",
				"\t\tmesh.visible = false;",
				"\t\tmesh.userData.placed = false;",
				"\t\t",
				"\t\tfor ( var k in types ) {",
				"\t\t\tvar list = types[ k ];",
				"\t\t\tif ( !list.regex ) {",
				"\t\t\t\tlist.regex = new RegExp( '(' + k + ')', 'i' );",
				"\t\t\t}",
				"\t\t\tif ( list.regex.test( name ) ) {",
				"\t\t\t\tlist.push( mesh );",
				"\t\t\t}",
				"\t\t}",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t\tvar grass = new THREE.Mesh( field.geometry, field.material );",
				"\t\tgrass.userData.offset = new THREE.Vector2(",
				"\t\t\tMath.random(),",
				"\t\t\tMath.random()",
				"\t\t);",
				"\t\tgrass.scale.setScalar( Math.random() * 0.66 + 0.33 );",
				"\t\tgrass.scale.y += Math.random() * 0.5;",
				"\t\tgrass.position.y -= 0.05;",
				"",
				"\t\tgroup.add( grass );",
				"\t\tfield.push( grass );",
				"\t}",
				"",
				"\tneon.setMaterials( group );",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( { ",
				"",
				"\tinTransition: false,",
				"\tbackdrop: backdrop,",
				"\ttypes: types,",
				"\tscene: group,",
				"\tstep: step,",
				"\tadd: add,",
				"\tbuffer: { value: 1 },",
				"\tclear: function() {",
				"\t\tscene.remove( backdrop );",
				"\t}",
				"",
				"} );",
				"var stage = stages[ stages.length - 1 ];",
				"",
				"function start () {",
				"",
				"\tstages.current = stages[ 0 ];",
				"\tstages.index = 0;",
				"",
				"\tgroup.position.y = 0;",
				"\tstage.buffer.value = 1;",
				"\tcursor.set( 0, 0 );",
				"\t",
				"\ttheta.reset();",
				"\tstep.reset();",
				"\tdirection.reset();",
				"",
				"\tannie.userData.age( 'child' );",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog.color.set( group.fog.color );",
				"\tscene.fog.far = group.fog.far;",
				"\tscene.fog.near = group.fog.near;",
				"\trenderer.setClearColor( group.fog.color );",
				"\tclock.getDelta();",
				"",
				"\tscene.add( backdrop );",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\t",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"\t\telements[ i ].visible = false;",
				"\t\telements[ i ].userData.placed = false;",
				"\t}",
				"\t",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar dt = clock.getDelta();",
				"",
				"\tif ( material.uniforms && material.uniforms.time ) {",
				"\t\tmaterial.uniforms.time.value += (dt || 0 ) * 4;",
				"\t}",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t// theta.destination = - controllers.previous.rotation.y;",
				"",
				"\tif ( stage.inTransition ) {",
				"",
				"\t\ttheta.destination += ( direction.destination - theta.destination ) * 0.0625;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t} else if ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"\t\tdirection.destination = theta.value;",
				"",
				"\t}",
				"",
				"\tif ( step.blinking ) {",
				"\t\tstep.set( 0 );",
				"\t} else {",
				"\t\ttheta.update( dt );",
				"\t\tstep.update( dt );",
				"\t\tdirection.update( dt );",
				"\t}",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.value - direction.value );",
				"\tdolly.position.z = - distance * Math.cos( theta.value - direction.value );",
				"\tdolly.lookAt( dolly.userData.target );\t",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar amplitude = step.value * ( dt || 0 );",
				"\tvar forceField = parameters.forceField.value;",
				"\tvar buffer = forceField * ( 128 / size );",
				"\tbuffer *= stage.buffer.value;",
				"",
				"\tcursor.x += amplitude * Math.cos( direction.value );",
				"\tcursor.y += amplitude * Math.sin( direction.value );",
				"",
				"\tgroup.rotation.y = direction.value - Math.PI / 2;",
				"",
				"\tneon.motionVector.x = -amplitude * Math.cos( direction.value ) * size;",
				"    neon.motionVector.y = 0;",
				"    neon.motionVector.z = -amplitude * Math.sin( direction.value ) * size;",
				"    neon.motionVector.applyAxisAngle( new THREE.Vector3( 0, 1, 0 ), group.rotation.y );",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar offset, x, y, angle, phi;",
				"\t\tvar mesh = elements[ i ];",
				"",
				"\t\tif ( mesh.userData.placed ) {",
				"",
				"\t\t\toffset = mesh.userData.offset;",
				"\t\t\tx = mod( cursor.x + offset.x, 2 ) - 1;",
				"\t\t\ty = mod( cursor.y + offset.y, 2 ) - 1;",
				"",
				"\t\t\tangle = Math.atan2( - y, - x );",
				"\t\t\tphi = angle + Math.PI;",
				"",
				"\t\t\tmesh.position.x = x + Math.cos( phi ) * buffer;",
				"\t\t\tmesh.position.z = y + Math.sin( phi ) * buffer;",
				"",
				"\t\t\tmesh.position.x *= - size;",
				"\t\t\tmesh.position.z *= - size;",
				"",
				"\t\t\tif ( !mesh.visible ) {",
				"\t\t\t\tmesh.visible = true;",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t\tvar grass = field[ i ];",
				"\t\toffset = grass.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"\t\t",
				"\t\tvar angle = Math.atan2( - y, - x );",
				"\t\tvar phi = angle + Math.PI;",
				"\t\t",
				"\t\tgrass.position.x = x + Math.cos( phi ) * buffer * 0.66;",
				"\t\tgrass.position.z = y + Math.sin( phi ) * buffer * 0.66;",
				"",
				"\t\tgrass.position.x *= - size;",
				"\t\tgrass.position.z *= - size;",
				"",
				"\t}",
				"\t",
				"}",
				"",
				"function add ( obj, a, rad ) {",
				"",
				"\tvar angle = a || 0;",
				"\tvar theta = direction.destination + ( Math.random() * angle - angle / 2 );",
				"\tvar amp = ( typeof rad == 'number' ) ? rad : 1;",
				"",
				"\tvar x = - cursor.x - amp * Math.cos( theta ) + 1;",
				"\tvar y = - cursor.y - amp * Math.sin( theta ) + 1;",
				"",
				"\tobj.userData.offset.set( x, y );",
				"\tobj.userData.placed = true;",
				"",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e * l;",
				"\t}",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"House",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var clock = new THREE.Clock();",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var roomModels = FRAME.getResource( 'models' ).house;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"var bedroomModels = FRAME.getResource( 'models' ).bedroom;",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Float( 'Size', 12 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 9 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.75 ),",
				"\tdistance: new FRAME.Parameters.Float( 'Distance', 2 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"var theta = new Ease( 0, 0.33 );",
				"var step = new Ease( 0.1 * parameters.step.value, 0.0625 );",
				"var direction = new Ease( 0, 0.125 );",
				"",
				"var room = new THREE.Vector2();",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( 0x333333, parameters.size.value, parameters.size.value * 1.5 );",
				"var elements = [];",
				"var material = materials.room;",
				"",
				"var raycaster = new THREE.Raycaster();",
				"var interactiveObjects = [];",
				"var INTERSECTED;",
				"",
				"roomModels.ready( function () {",
				"",
				"\tvar geometries = roomModels.geometries;",
				"",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\tvar size = parameters.size.value;",
				"",
				"\t// create meshes for empty kitchen, office, living-room, bedroom",
				"\tvar roomMeshes = {};",
				"\tfor ( var i = 0; i < geometries.length; i++ ) {",
				"\t\tvar geometry = geometries[ i ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tmesh.name = geometry.name;",
				"\t\troomMeshes[ mesh.name ] = mesh;",
				"\t}",
				"",
				"\tfunction addElephant( parent ) {",
				"\t\tbedroomModels.ready( function() {",
				"\t\t\tfor ( var i = 0; i < bedroomModels.geometries.length; i++ ) {",
				"",
				"\t\t\t\tvar geometry = bedroomModels.geometries[ i ];",
				"",
				"\t\t\t\tif ( geometry.name == 'elephant.json') {",
				"\t\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\t\t\t\tmesh.position.set( -4.074, 0, 3.18 );",
				"\t\t\t\t\tmesh.rotation.y = THREE.Math.degToRad( 46.947 + 90 );",
				"\t\t\t\t\tmesh.scale.set( 0.932, 0.932, 0.932 );",
				"\t\t\t\t\tparent.add( mesh );",
				"\t\t\t\t\tinteractiveObjects.push( mesh );",
				"\t\t\t\t}",
				"",
				"\t\t\t}",
				"\t\t});",
				"\t}",
				"",
				"\t// house architecture",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar name = roomModels.files[ id ];",
				"\t\tvar mesh = roomMeshes[ name ].clone();",
				"",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"\t\tmesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t\t/*",
				"\t\tif ( mesh.name == 'bedroom.json') {",
				"\t\t\taddElephant( mesh );",
				"\t\t}",
				"\t\t*/",
				"",
				"\t}",
				"",
				"\tneon.setMaterials( group );",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( {",
				"",
				"\telements: elements,",
				"\tstep: step",
				"",
				"} );",
				"",
				"function start () {",
				"",
				"\tstages[ 0 ].clear();",
				"\tstages.current = stages[ 1 ];",
				"\tstages.index = 1;",
				"",
				"\tstages[ 0 ].clear();",
				"\tcursor.set( - 0.5, 0 );",
				"\tpc.copy( cursor );",
				"\t",
				"\ttheta.reset();",
				"\tstep.reset();",
				"\tdirection.reset();",
				"",
				"\tannie.userData.age( 'teenager' );",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog.color.set( group.fog.color );",
				"\tscene.fog.far = group.fog.far;",
				"\tscene.fog.near = group.fog.near;",
				"\trenderer.setClearColor( group.fog.color );",
				"\tclock.getDelta();",
				"\t",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"}",
				"",
				"function end () {",
				"",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\t",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar dt = clock.getDelta();",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\t// theta.destination = - controllers.previous.rotation.y;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"",
				"\t} else {",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"",
				"\tif ( step.blinking ) {",
				"\t\tstep.set( 0 );",
				"\t} else {",
				"\t\ttheta.update( dt );",
				"\t\tstep.update( dt );",
				"\t\tdirection.update( dt );",
				"\t}",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.value - direction.value );",
				"\tdolly.position.z = - distance * Math.cos( theta.value - direction.value );",
				"\tdolly.lookAt( dolly.userData.target );",
				"",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = step.value * ( dt || 0 );",
				"",
				"\tcursor.x += amplitude * Math.cos( direction.value );",
				"\tcursor.y += amplitude * Math.sin( direction.value );",
				"",
				"\tgroup.rotation.y = direction.value - HALF_PI;",
				"\t",
				"\tneon.motionVector.x = -amplitude * Math.cos( direction.value ) * size * cols;",
				"    neon.motionVector.y = 0;",
				"    neon.motionVector.z = -amplitude * Math.sin( direction.value ) * size * rows;",
				"    neon.motionVector.applyAxisAngle( new THREE.Vector3( 0, 1, 0 ), group.rotation.y );",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"\t\t",
				"\t\tmesh.position.x *= - size * cols;",
				"\t\tmesh.position.z *= - size * rows;",
				"",
				"\t}",
				"",
				"\tupdateDirection();",
				"",
				"//\thover();",
				"",
				"}",
				"",
				"var pc = new THREE.Vector2();",
				"",
				"function updateDirection () {",
				"",
				"\tvar dx = cursor.x - pc.x;",
				"\tvar dy = cursor.y - pc.y;",
				"",
				"\tif ( dx === 0 && dy === 0) return;",
				"",
				"\tvar tx = dx > 0 ? 1 : ( dx === 0 ? 0 : - 1 );",
				"\tvar ty = dy > 0 ? 1 : ( dy === 0 ? 0 : - 1 );",
				"",
				"\tvar cx = Math.floor( cursor.x * cols + 0.0625 * tx );",
				"\tvar cy = Math.floor( cursor.y * rows + 0.0625 * ty );",
				"",
				"\tif ( cx !== room.x || cy !== room.y ) { ",
				"\t\tvar angle = TWO_PI * Math.round( 4 * theta.destination / TWO_PI ) / 4;",
				"\t\tdirection.destination += HALF_PI * Math.sin( angle - direction.destination );",
				"\t\troom.set( cx, cy );",
				"\t\t// theta.destination = direction.destination;",
				"\t}",
				"\t",
				"\tpc.copy( cursor );",
				"\t",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e;",
				"\t}",
				"\treturn v % l;",
				"}",
				"",
				"function hover () {",
				"",
				"\tvar controller = controllers.right;",
				"",
				"\tvar position = controller.getWorldPosition();",
				"\tvar direction = controller.getWorldDirection().negate();",
				"",
				"\traycaster.set( position, direction );",
				"",
				"\tvar intersects = raycaster.intersectObjects( interactiveObjects );",
				"",
				"\tif ( intersects.length > 0 ) {",
				"",
				"\t\tif ( INTERSECTED != intersects[ 0 ].object ) {",
				"",
				"\t\t\tif ( INTERSECTED ) {",
				"\t\t\t\tvar scale = INTERSECTED.currentScale;",
				"\t\t\t\tINTERSECTED.scale.set( scale, scale, scale );",
				"\t\t\t}",
				"",
				"\t\t\tINTERSECTED = intersects[ 0 ].object;",
				"\t\t\tINTERSECTED.currentScale = INTERSECTED.scale.x;",
				"\t\t\tINTERSECTED.scale.multiplyScalar( 1.2 );",
				"",
				"\t\t}",
				"",
				"\t} else {",
				"",
				"\t\tif ( INTERSECTED ) {",
				"\t\t\tvar scale = INTERSECTED.currentScale;",
				"\t\t\tINTERSECTED.scale.set( scale, scale, scale );",
				"\t\t}",
				"",
				"\t\tINTERSECTED = null;",
				"",
				"\t}",
				"",
				"}"
			]
		],
		[
			"City",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var List = FRAME.getResource( 'List' );",
				"var clock = new THREE.Clock();",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).city;",
				"var materials = FRAME.getResource( 'materials' ).city;",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var parameters = {",
				"\tblock: new FRAME.Parameters.Integer( 'Block Size', 64 ),",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 540 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 36 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 0.1 ),",
				"\tdistance: new FRAME.Parameters.Float( 'Distance', 2 )",
				"};",
				"",
				"var cursor = new THREE.Vector2();",
				"var cols = Math.sqrt( parameters.amount.value );",
				"var rows = Math.ceil( parameters.amount.value / cols );",
				"",
				"var theta = new Ease( 0, 0.66 );",
				"var step = new Ease( 0.1 * parameters.step.value, 0.0625 );",
				"var direction = new Ease( 0, 0.125 );",
				"",
				"var block = new THREE.Vector2();",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.4 );",
				"",
				"var blocks = new THREE.Group();",
				"blocks.position.y = 1;",
				"group.add( blocks );",
				"",
				"materials.floor.uniforms.cursor.value = cursor;",
				"materials.floor.uniforms.subdivisions.value = cols;",
				"materials.floor.uniforms.size.value = parameters.size.value;",
				"materials.floor.uniforms.color.value.set( 0x262532 );",
				"materials.floor.uniforms.median.value.set( 0x3a394a );",
				"// materials.floor.wireframe = true;",
				"",
				"var ground = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 64, 64 ),",
				"\tmaterials.floor",
				");",
				"ground.rotation.x = - Math.PI / 2;",
				"group.add( ground );",
				"",
				"materials.backdrop.uniforms.offset.value = 0.66;",
				"materials.backdrop.uniforms.color.value.set( 0x420c6b );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( parameters.size.value ),",
				"\tmaterials.backdrop",
				");",
				"group.add( backdrop );",
				"",
				"var elements = [];",
				"var types = {",
				"\tbuildings: new List(),",
				"\tpavements: new List()",
				"};",
				"",
				"var material = materials.building;",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries.slice( 0 );",
				"\tvar pavement = stripPavement( geometries );",
				"",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = Math.floor( Math.random() * length );",
				"\t\tvar mesh = new THREE.Group();",
				"\t\tvar a = new THREE.Mesh( geometries[ id ], material );",
				"\t\tvar b = new THREE.Mesh( pavement, material );",
				"",
				"\t\tmesh.add( a );",
				"\t\tmesh.add( b );",
				"",
				"\t\ttypes.buildings.push( a );",
				"\t\ttypes.pavements.push( b );",
				"",
				"\t\ta.scale.y = - 1;",
				"",
				"\t\tvar col = ( i + 0.5 ) % cols;",
				"\t\tvar row = Math.floor( i / cols ) + 0.5;",
				"\t\t",
				"\t\tmesh.userData.offset = new THREE.Vector2(",
				"\t\t\tcol / cols,",
				"\t\t\trow / rows",
				"\t\t);",
				"",
				"\t\tmesh.rotation.reorder( 'ZXY' );",
				"\t\tmesh.rotation.y = Math.PI * 2 * Math.floor( Math.random() * 4 ) / 4;",
				"",
				"\t\tblocks.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"\t",
				"\tneon.setMaterials( group );",
				"\t",
				"} );",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( {",
				"",
				"\tscene: group,",
				"\ttypes: types,",
				"\tstep: step,",
				"\tcurvature: { value: 0 }",
				"",
				"} );",
				"var stage = stages[ stages.length - 1 ];",
				"",
				"function start () {",
				"",
				"\tstages[ 0 ].clear();",
				"\tstage.curvature.value = 0;",
				"\tstages.current = stages[ 2 ];",
				"\tstages.index = 2;",
				"",
				"\tcursor.set( 0, 0 );",
				"\tpc.copy( cursor );",
				"\t",
				"\ttheta.reset();",
				"\tstep.reset();",
				"\tdirection.reset();",
				"",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog.color.set( group.fog.color );",
				"\tscene.fog.far = group.fog.far;",
				"\tscene.fog.near = group.fog.near;",
				"\trenderer.setClearColor( group.fog.color );",
				"\tclock.getDelta();",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"}",
				"",
				"function end () {",
				"",
				"\tscene.remove( group );",
				"\tgroup.visible = true;",
				"\t",
				"}",
				"",
				"function update ( progress ) {",
				"\t",
				"\tvar dt = clock.getDelta();",
				"\tvar animation = annie.userData.currentAnimation;",
				"\t",
				"\t// theta.destination = - controllers.previous.rotation.y;",
				"\t",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\ttheta.destination -= controllers.deltas.rotation.y;",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.6;",
				"\t\t}",
				"\t\t",
				"\t} else {",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"",
				"\tupdateDirection();",
				"\t",
				"\tif ( step.blinking ) {",
				"\t\tstep.set( 0 );",
				"\t} else {",
				"\t\ttheta.update( dt );",
				"\t\tstep.update( dt );",
				"\t\tdirection.update( dt );",
				"\t}",
				"",
				"\tvar distance = dolly.userData.distance;",
				"\tdolly.position.x = distance * Math.sin( theta.value - direction.value );",
				"\tdolly.position.z = - distance * Math.cos( theta.value - direction.value );",
				"\tdolly.lookAt( dolly.userData.target );",
				"\t",
				"\tvar size = parameters.size.value;",
				"\tvar cs = 1 / cols;",
				"\tvar amplitude = step.value * ( dt || 0 );",
				"\tvar curvature = stage.curvature.value;",
				"",
				"\tcursor.x += amplitude * Math.cos( direction.value );",
				"\tcursor.y += amplitude * Math.sin( direction.value );",
				"\t",
				"\tgroup.rotation.y = direction.value - Math.PI / 2;",
				"\tblocks.position.y = 5 * Math.sqrt( curvature ) + 0.5;",
				"",
				"\tground.material.uniforms.curvature.value = curvature;",
				"",
				"\tneon.motionVector.x = -amplitude * Math.cos( direction.value ) * size;",
				"    neon.motionVector.y = 0;",
				"    neon.motionVector.z = -amplitude * Math.sin( direction.value ) * size;",
				"    neon.motionVector.applyAxisAngle( new THREE.Vector3( 0, 1, 0 ), group.rotation.y );",
				"",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;",
				"\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;",
				"\t\tvar x2 = x * 2;",
				"\t\tvar y2 = y * 2;",
				"",
				"\t\tvar phi =  Math.atan2( - y, - x );",
				"\t\tvar dist = Math.sqrt( x2 * x2 + y2 * y2 );",
				"\t\tvar bend = curvature * dist;",
				"",
				"\t\tmesh.position.x = x;",
				"\t\tmesh.position.z = y;",
				"",
				"\t\tmesh.rotation.x = Math.sin( phi );",
				"\t\tmesh.rotation.z = Math.cos( phi );",
				"\t\t",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.y = size * ( bend * bend ) / 2;",
				"\t\tmesh.position.z *= - size;",
				"",
				"\t\tmesh.rotation.x *= - HALF_PI * bend;",
				"\t\tmesh.rotation.z *= HALF_PI * bend;",
				"\t\t",
				"\t}",
				"\t",
				"}",
				"",
				"var pc = new THREE.Vector2();",
				"",
				"function updateDirection () {",
				"",
				"\tvar dx = cursor.x - pc.x;",
				"\tvar dy = cursor.y - pc.y;",
				"",
				"\tif ( dx === 0 && dy === 0) return;",
				"",
				"\tvar tx = dx > 0 ? 1 : ( dx === 0 ? 0 : - 1 );",
				"\tvar ty = dy > 0 ? 1 : ( dy === 0 ? 0 : - 1 );",
				"",
				"\tvar cx = Math.floor( cursor.x * cols );",
				"\tvar cy = Math.floor( cursor.y * rows );",
				"",
				"\tif ( cx !== block.x || cy !== block.y ) { ",
				"\t\tvar angle = TWO_PI * Math.round( 4 * theta.destination / TWO_PI ) / 4;",
				"\t\tdirection.destination += HALF_PI * Math.sin( angle - direction.destination );",
				"\t\tblock.set( cx, cy );",
				"\t}",
				"\t",
				"\tpc.copy( cursor );",
				"\t",
				"}",
				"",
				"function stripPavement ( geometries ) {",
				"\tvar list = geometries.slice( 0 );",
				"\tvar regex = new RegExp( 'pavement', 'i' );",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar geometry = list[ i ];",
				"\t\tif ( regex.test( geometry.name ) ) {",
				"\t\t\tgeometries.splice( i, 1 );",
				"\t\t\treturn geometry",
				"\t\t}",
				"\t}",
				"\treturn null;",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e * l;",
				"\t}",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"Neon Lights",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var Ease = FRAME.getResource( 'Ease' );",
				"var clock = new THREE.Clock();",
				"",
				"var annie = FRAME.getResource( 'annie' );",
				"var renderer = FRAME.getResource( 'renderer' );",
				"var controllers = FRAME.getResource( 'controllers' );",
				"",
				"var model = FRAME.getResource( 'models' ).bedroom;",
				"var materials = FRAME.getResource( 'materials' ).house;",
				"var neon = FRAME.getResource( 'neon' );",
				"var filter = FRAME.getResource( 'materials' ).filter;",
				"",
				"var parameters = {",
				"\tsize: new FRAME.Parameters.Integer( 'Size', 32 ),",
				"\tamount: new FRAME.Parameters.Integer( 'Amount', 512 ),",
				"\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),",
				"\tstep: new FRAME.Parameters.Float( 'Step', 1 ),",
				"\tforceField: new FRAME.Parameters.Float( 'Field', 0.025 )",
				"};",
				"",
				"var cursor = new THREE.Vector3();",
				"var temp = new THREE.Vector3();",
				"var material = materials.toy;",
				"",
				"var cameraYaw = new Ease( 0, 0.66 );",
				"var cameraPitch = new Ease( 0, 0.66 );",
				"var worldYaw = new Ease( 0, 0.033 );",
				"var worldPitch = new Ease( 0, 0.033 );",
				"var step = new Ease( parameters.step.value, 0.0625 );",
				"",
				"var dolly = FRAME.getResource( 'dolly' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var camera = FRAME.getResource( 'camera' );",
				"",
				"var group = new THREE.Scene();",
				"group.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.66 );",
				"",
				"var elements = [];",
				"",
				"model.ready( function () {",
				"",
				"\tvar geometries = model.geometries;",
				"\tvar length = geometries.length;",
				"\tvar amount = parameters.amount.value;",
				"\t",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar id = i % length;",
				"\t\tvar geometry = geometries[ id ];",
				"\t\tvar mesh = new THREE.Mesh( geometry, material );",
				"\t\tvar name = geometry.name;",
				"",
				"\t\tvar seed = Math.random();",
				"\t\tvar scalar = Math.floor( seed * 8 ) + 1;",
				"\t\tmesh.scale.setScalar( scalar );",
				"\t\t",
				"\t\tmesh.userData.velocity = {",
				"\t\t\trotation: new THREE.Euler(",
				"\t\t\t\t( 1 - seed ) * HALF_PI / 2 - HALF_PI / 4,",
				"\t\t\t\t( 1 - seed ) * HALF_PI / 2 - HALF_PI / 4,",
				"\t\t\t\t( 1 - seed ) * HALF_PI / 2 - HALF_PI / 4",
				"\t\t\t)",
				"\t\t};",
				"\t\t",
				"\t\tmesh.userData.offset = new THREE.Vector3(",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2,",
				"\t\t\tMath.random() * 2",
				"\t\t);",
				"\t\t",
				"\t\tvar rv = mesh.userData.velocity.rotation;",
				"",
				"\t\tmesh.rotation.x = rv.x;",
				"\t\tmesh.rotation.y = rv.y;",
				"\t\tmesh.rotation.z = rv.z;",
				"",
				"\t\tgroup.add( mesh );",
				"\t\telements.push( mesh );",
				"",
				"\t}",
				"",
				"\tneon.setMaterials( group );",
				"} );",
				"",
				"var Stage4 = {",
				"\tplaying: false,",
				"\tstep: step",
				"};",
				"",
				"var stages = FRAME.getResource( 'stages' );",
				"stages.push( Stage4 );",
				"",
				"function start () {",
				"",
				"\tstages[ 0 ].clear();",
				"\tstages.current = stages[ 3 ];",
				"\tstages.index = 3;",
				"",
				"\t// cursor.set( 0, 0, 0 );",
				"\t",
				"\tcameraYaw.reset();",
				"\tcameraPitch.reset();",
				"\tworldYaw.reset();",
				"\tworldPitch.reset();",
				"\tstep.reset();",
				"",
				"\tannie.userData.age( 'adult' );",
				"\tannie.userData.play( 'run' );",
				"\tannie.rotation.y = 0;",
				"\tdolly.userData.reset();",
				"",
				"\tscene.fog.color.set( group.fog.color );",
				"\trenderer.setClearColor( group.fog.color );",
				"\tclock.getDelta();",
				"",
				"\tscene.add( group );",
				"\tgroup.visible = true;",
				"\t",
				"\tneon.enabled = true;",
				"",
				"\tStage4.playing = true;",
				"\t",
				"\tfilter.saturation.value = 0;",
				"\tfilter.vignette.visible = false;",
				"",
				"}",
				"",
				"function end () {",
				"\t",
				"\tscene.remove( group );",
				"\tgroup.visible = false;",
				"\tneon.enabled = false;",
				"\tStage4.playing = false;",
				"\tfilter.saturation.value = ( filter.saturation.initialValue || 0 );",
				"\tfilter.vignette.visible = true;",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar dt = clock.getDelta();",
				"\tvar animation = annie.userData.currentAnimation;",
				"",
				"\t// cameraPitch.destination = - controllers.previous.rotation.x;",
				"\t// cameraYaw.destination = - controllers.previous.rotation.y;",
				"",
				"\t// cameraPitch.destination = clamp( cameraPitch.destination, - HALF_PI, HALF_PI );",
				"",
				"\tif ( controllers.dragging() ) {",
				"",
				"\t\tcameraPitch.destination += controllers.deltas.rotation.x;",
				"\t\tcameraYaw.destination -= controllers.deltas.rotation.y;",
				"",
				"\t\tcameraPitch.destination = clamp( cameraPitch.destination, - HALF_PI, HALF_PI );",
				"\t\t",
				"\t\tstep.destination = 0.2 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 50;",
				"",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.6;",
				"\t\t}",
				"\t\t",
				"\t} else { ",
				"\t\t",
				"\t\tif ( animation ) {",
				"\t\t\tanimation.action.timeScale = 1.3;",
				"\t\t}",
				"",
				"\t\tstep.destination = 0.1 * parameters.step.value;",
				"\t\tcamera.userData.fov.destination = 75;",
				"",
				"\t}",
				"",
				"\tworldPitch.destination = cameraPitch.value;",
				"\tworldYaw.destination = cameraYaw.value;\t\t",
				"",
				"\tstep.update( dt );",
				"",
				"\tcameraPitch.update( dt );",
				"\tcameraYaw.update( dt );",
				"",
				"\tworldPitch.update( dt );",
				"\tworldYaw.update( dt );",
				"",
				"\tvar direction = Math.cos( cameraPitch.value );",
				"\tvar distance = dolly.userData.distance;",
				"\t",
				"\tdolly.position.x = distance * Math.sin( cameraYaw.value - worldYaw.value );",
				"\tdolly.position.z = - distance * Math.cos( cameraYaw.value - worldYaw.value );",
				"\tdolly.position.y = - distance * Math.sin( cameraPitch.value - worldPitch.value );",
				"\tdolly.lookAt( dolly.userData.target );\t",
				"",
				"\tvar t = ( dt || 0 );",
				"\t",
				"\tvar size = parameters.size.value;",
				"\tvar amplitude = step.value * t;",
				"\tvar forceField = parameters.forceField.value;",
				"\tvar buffer = forceField * ( 128 / size );",
				"",
				"\ttemp.set(",
				"\t\t\tMath.cos( worldYaw.value ),",
				"\t\t\tMath.sin( worldPitch.value ),",
				"\t\t\tMath.sin( worldYaw.value ) )",
				"\t\t.setLength( amplitude );",
				"\t",
				"\tcursor.x += direction * temp.x;",
				"\tcursor.y += temp.y;",
				"\tcursor.z += direction * temp.z;",
				"",
				"\tgroup.rotation.x = worldPitch.value;",
				"\tgroup.rotation.y = worldYaw.value - Math.PI / 2;",
				"",
				"\tneon.motionVector.x = -direction * temp.x * size;",
				"    neon.motionVector.y = temp.y * size;",
				"    neon.motionVector.z = -direction * temp.z * size;",
				"    neon.motionVector.applyAxisAngle( new THREE.Vector3( 1, 0, 0 ), group.rotation.x );",
				"\tneon.motionVector.applyAxisAngle( new THREE.Vector3( 0, 1, 0 ), group.rotation.y );",
				"\t",
				"\tfor ( var i = 0; i < elements.length; i++ ) {",
				"",
				"\t\tvar mesh = elements[ i ];",
				"\t\tvar offset = mesh.userData.offset;",
				"\t\t",
				"\t\tvar x = mod( cursor.x + offset.x, 2 ) - 1;",
				"\t\tvar y = mod( cursor.y + offset.y, 2 ) - 1;",
				"\t\tvar z = mod( cursor.z + offset.z, 2 ) - 1;",
				"\t\t",
				"",
				"\t\tvar angle = Math.atan2( - z, - x );",
				"\t\tvar phi = angle + Math.PI;",
				"\t\t",
				"\t\tmesh.position.x = x;// + Math.cos( phi ) * buffer;",
				"\t\tmesh.position.z = z;// + Math.sin( phi ) * buffer;",
				"",
				"\t\tangle = Math.atan2( - y, 0 );",
				"\t\tphi = angle + Math.PI;",
				"",
				"\t\tmesh.position.y = y;// + Math.sin( phi ) * buffer;",
				"",
				"\t\tvar rv = mesh.userData.velocity.rotation;",
				"\t\t",
				"\t\t/*",
				"\t\tmesh.rotation.x += t * rv.x;",
				"\t\tmesh.rotation.y += t * rv.y;",
				"\t\tmesh.rotation.z += t * rv.z;",
				"\t\t*/",
				"",
				"\t\tmesh.position.x *= - size;",
				"\t\tmesh.position.z *= - size;",
				"\t\tmesh.position.y *= - size;",
				"",
				"\t}",
				"\t",
				"}",
				"",
				"function clamp ( v, min, max ) {",
				"\treturn Math.min( Math.max( v, min ), max );",
				"}",
				"",
				"function mod ( v, l ) {",
				"\tif ( v < 0 ) {",
				"\t\tvar e = Math.floor( v / l );",
				"\t\tv -= e * l;",
				"\t}",
				"\treturn v % l;",
				"}"
			]
		],
		[
			"VRUpdateEffect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var clock = FRAME.getResource( 'clock' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var annie = FRAME.getResource( 'annie' );",
				"var neon = FRAME.getResource( 'neon' );",
				"var materials = FRAME.getResource( 'materials' );",
				"var filter = materials.filter;",
				"var stages = FRAME.getResource( 'stages' );",
				"",
				"filter.saturation.initialValue = filter.saturation.value;",
				"filter.opacity.initialValue = filter.opacity.value;",
				"",
				"scene.userData.clear();",
				"scene.add( dolly );",
				"scene.add( new THREE.AmbientLight( 0xffffff ) );",
				"scene.add( annie );",
				"",
				"neon.annie = annie;",
				"",
				"var playing = false;",
				"var p = 0;",
				"",
				"var controls = FRAME.getResource( 'controls' );",
				"var controllers = FRAME.getResource( 'controllers' )",
				"\t.setup( dolly, effect );",
				"",
				"controllers.onTriggerClick = toggleBlink;",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tplaying = progress !== p && dt > 0;",
				"\tp = progress;",
				"",
				"\tTWEEN.update();",
				"",
				"\tcontrols.update();",
				"\tcontrollers.update( camera );",
				"",
				"\tannie.userData.updateAnimation( dt );",
				"",
				"\tvar fov = camera.userData.fov;",
				"\tif ( Math.abs( fov.destination - fov.current ) > fov.limit ) {",
				"\t\tfov.current += ( fov.destination - fov.current ) * fov.drag;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t} else if ( fov.current !== fov.destination ) {",
				"\t\tfov.current = fov.destination;",
				"\t\tcamera.fov = fov.current;",
				"\t\tcamera.updateProjectionMatrix();",
				"\t}",
				"",
				"}",
				"",
				"var enabled = false;",
				"",
				"function toggleBlink ()  {",
				"",
				"\t//return;",
				"",
				"\tif ( !playing || stages[ 3 ].playing || ( stages.current && stages.current.step.blinking ) ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar enabled = !neon.enabled;",
				"",
				"\tif ( enabled ) {",
				"\t\tfilter.saturation.value = 1;",
				"\t\tfilter.opacity.value = 0;",
				"\t\tfilter.vignette = false;",
				"\t\tneon.enabled = true;",
				"\t} else {",
				"\t\tfilter.saturation.value = filter.saturation.initialValue;",
				"\t\tfilter.opacity.value = filter.opacity.initialValue;",
				"\t\tfilter.vignette.visible = true;",
				"\t\tneon.enabled = false;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"RenderEffect",
			[
				"var dolly = FRAME.getResource( 'dolly' );",
				"var camera = FRAME.getResource( 'camera' );",
				"var scene = FRAME.getResource( 'scene' );",
				"var effect = FRAME.getResource( 'effect' );",
				"var neon = FRAME.getResource( 'neon' );",
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update ( progress, dt ) {",
				"",
				"\tneon.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Trigger Single",
			[
				"function start () {",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Trigger All",
			[
				"function start () {",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Trigger All Loop",
			[
				"function start () {}",
				"",
				"function end(){}",
				"",
				"function update ( progress ){",
				"",
				"}"
			]
		],
		[
			"Mouth Half Open",
			[
				"function start(){",
				"",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar model = annie.userData.model;",
				"\t",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"\t",
				"\tanimator.currentTile = 5;",
				"\t",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Mouth Open",
			[
				"function start(){",
				"",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar model = annie.userData.model;",
				"\t",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"\t",
				"\tanimator.currentTile = 7;",
				"\t",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Mouth Half Open Wide",
			[
				"function start(){",
				"\t",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar model = annie.userData.model;",
				"\t",
				"\tif ( !model ) return;",
				"",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"\t",
				"\tanimator.currentTile = 6;",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Mouth Closed",
			[
				"function start(){",
				"\t",
				"\tvar annie = FRAME.getResource( 'annie' );",
				"",
				"\tif ( !annie )return;",
				"",
				"\tvar model = annie.userData.model;",
				"\t",
				"\tif ( !model ) return;",
				"\t",
				"\tvar mouth = model.userData.mouth;",
				"\tvar animator = mouth.animator;",
				"\t",
				"\tanimator.currentTile = 4;",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Recede Fog 1/10",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var stages = FRAME.getResource( 'stages' );",
				"",
				"function start () {",
				"",
				"\tfog.far = 1;",
				"\tfog.near = 0;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar scene = stages.current.scene;",
				"\tfog.far = progress * scene.fog.far / 10 + 1;",
				"",
				"}"
			]
		],
		[
			"Add Forest Object 'til Exhausted",
			[
				"var stage;",
				"var types;",
				"var list;",
				"var type;",
				"",
				"function start () {",
				"",
				"\tstage = FRAME.getResource( 'stages' )[ 0 ];",
				"\ttypes = stage.types;",
				"\tlist = types.list;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"}",
				"",
				"function update( progress ) {",
				"\t",
				"\tvar type = list[ Math.floor( Math.random() * list.length ) ];",
				"\tvar items = types[ type ];",
				"",
				"\tif ( items.exhausted ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\telem = items.next();",
				"\tstage.add( elem, Math.PI / 2, 0.75 );",
				"",
				"}"
			]
		],
		[
			"Recede Fog 1/2",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var stages = FRAME.getResource( 'stages' );",
				"var startValue = 0;",
				"",
				"function start () {",
				"",
				"\tstartValue = fog.far;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar scene = stages.current.scene;",
				"\tvar dest = scene.fog.far * 0.5;",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( dest - startValue ) + startValue;",
				"",
				"}"
			]
		],
		[
			"Add Mushroom in FOV",
			[
				"var elem;",
				"",
				"function start () {",
				"",
				"\tvar stage = FRAME.getResource( 'stages' )[ 0 ];",
				"\telem = stage.types.mushroom.next();",
				"\tstage.add( elem, Math.PI / 12, 0.16 );",
				"\t",
				"",
				"}",
				"",
				"function end () {",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Add random Forest Object in FOV",
			[
				"var elem;",
				"",
				"function start () {",
				"",
				"\treturn;",
				"",
				"\tvar stage = FRAME.getResource( 'stages' )[ 0 ];",
				"\tvar types = stage.types;",
				"\tvar list = types.list;",
				"\tvar type = 'tree';",
				"",
				"\telem = types[ type ].next();",
				"\telem.userData.scalar = 1;",
				"\telem.scale.setScalar( 0.001 );",
				"\tstage.add( elem, Math.PI / 4, 0.25 );",
				"",
				"}",
				"",
				"function end () {",
				"",
				"}",
				"",
				"function update( progress ) {",
				"/*",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tconsole.log( elem.userData.scalar );",
				"\telem.scale.setScalar( ( elem.userData.scalar * t ) || 0.001 );",
				"*/",
				"}"
			]
		],
		[
			"Recede Fog",
			[
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var stages = FRAME.getResource( 'stages' );",
				"var startValue = 0;",
				"",
				"function start () {",
				"",
				"\tstartValue = fog.far;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar scene = stages.current.scene;",
				"\tvar dest = scene.fog.far;",
				"\tvar t = TWEEN.Easing.Back.Out( progress );",
				"\tfog.far = t * ( dest - startValue ) + startValue;",
				"",
				"}"
			]
		],
		[
			"Effect",
			[
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"// function init(){}",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Annie Age Adult",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.age( 'adult' );",
				"\tannie.userData.play( 'run' );",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"// function init(){}",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Building Y Scale",
			[
				"var stage = FRAME.getResource( 'stages' )[ 2 ];",
				"",
				"function start () {",
				"",
				"\tvar types = stage.types;",
				"\tif ( !types ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = 0.01;",
				"\t}\t",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tvar t = TWEEN.Easing.Elastic.Out( progress );",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = t || 0.01;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Building Y Scale + 0.5",
			[
				"var stage = FRAME.getResource( 'stages' )[ 2 ];",
				"",
				"function start () {",
				"",
				"\tvar types = stage.types;",
				"\tif ( !types ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = 0.5;",
				"\t}\t",
				"",
				"}",
				"",
				"function end(){}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tvar t = 0.5 * TWEEN.Easing.Elastic.Out( progress ) + 0.5;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = t;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"City Curvature",
			[
				"var stage = FRAME.getResource( 'stages' )[ 2 ];",
				"",
				"function start () {",
				"",
				"\tstage.curvature.value = 0;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tstage.curvature.value = 0;",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar t = Math.sin( progress * Math.PI );",
				"\tt = TWEEN.Easing.Sinusoidal.InOut( t );",
				"\tstage.curvature.value = t;",
				"\t",
				"}"
			]
		],
		[
			"Randomize Building Y",
			[
				"var stage = FRAME.getResource( 'stages' )[ 2 ];",
				"",
				"function start () {",
				"",
				"\tvar types = stage.types;",
				"\tif ( !types ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = 1;",
				"\t}\t",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar buildings = stage.types.buildings;",
				"\tvar amp = Math.sin( progress * Math.PI );",
				"\tfor ( var i = 0; i < buildings.length; i++ ) {",
				"\t\tvar building = buildings[ i ];",
				"\t\tbuilding.scale.y = amp * Math.random() * 0.5 + 1;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Effect",
			[
				"var stage = FRAME.getResource( 'stages' )[ 2 ];",
				"",
				"function start () {",
				"",
				"\tstage.curvature.value = 0;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tstage.curvature.value = 2;",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.InOut( progress );",
				"\tstage.curvature.value = 2 * t;",
				"\t",
				"}"
			]
		],
		[
			"Forest Position Y",
			[
				"var stage = FRAME.getResource( 'stages' )[ 0 ];",
				"var scene = stage.scene;",
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"",
				"function start () {",
				"",
				"\tif ( stage && stage.scene ) {",
				"\t\tstage.scene.position.y = 0;",
				"\t}",
				"\tstage.inTransition = true;",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tstage.inTransition = false;",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"",
				"\tif ( stage && stage.scene ) {",
				"\t\tvar t = TWEEN.Easing.Circular.In( progress );",
				"\t\tvar it = 1 - t;",
				"\t\tstage.scene.position.y = - 64 * t;",
				"\t\tstage.buffer.value = 2 * t + 1;",
				"\t\tfog.far = scene.fog.far * it;",
				"\t\tstage.backdrop.scale.setScalar( t * 3 + 1 );",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Exterior House",
			[
				"var scene = FRAME.getResource( 'scene' );",
				"var models = FRAME.getResource( 'models' ).exterior;",
				"var stages = FRAME.getResource( 'stages' );",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var group = new THREE.Scene();",
				"var house;",
				"",
				"models.ready( function () {",
				"",
				"\tvar geometry = models.geometries[ 0 ];",
				"\tvar material = THREE.neonShader.neonBasicShader.clone();",
				"",
				"\thouse = new THREE.Mesh( geometry, material );",
				"\thouse.rotation.y = Math.PI / 2;",
				"\thouse.position.x = - 0.65;",
				"\tgroup.add( house );",
				"",
				"\tneon.setMaterials( group );",
				"} );",
				"",
				"stages.exterior = {",
				"\tscene: group",
				"};",
				"",
				"function start() {",
				"",
				"\tgroup.visible = true;",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function end () {",
				"",
				"\tgroup.visible = false;",
				"\tscene.remove( group );",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"House Position",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var exterior = stages.exterior;",
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var scene;",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var destination = new THREE.Vector3( 0, - 16.55, 3 );",
				"var origin = new THREE.Vector3( 0, - 25, 25 );",
				"",
				"function start () {\t",
				"",
				"\tscene = exterior.scene;",
				"\tscene.position.copy( origin );",
				"",
				"\tfog.far = 16;",
				"\tfog.near = 0;",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Sinusoidal.InOut( progress );",
				"\tscene.position.y = t * ( destination.y - origin.y ) + origin.y;",
				"\tscene.position.z = progress * ( destination.z - origin.z ) + origin.z;",
				"\tfog.far = progress * ( 4 - 16 ) + 16;",
				"",
				"\tneon.motionVector.x = 0;",
				"    neon.motionVector.y = 0;",
				"    neon.motionVector.z = 0;",
				"}"
			]
		],
		[
			"Exterior Position Z",
			[
				"var stages = FRAME.getResource( 'stages' );",
				"var exterior = stages.exterior;",
				"var annie = FRAME.getResource( 'annie' );",
				"var fog = FRAME.getResource( 'scene' ).fog;",
				"var scene;",
				"var neon = FRAME.getResource( 'neon' );",
				"",
				"var origin = new THREE.Vector3( 0, - 16.55, 3 );",
				"var destination = new THREE.Vector3( 0, - 16.55, - 4.5 );",
				"",
				"function start () {\t",
				"",
				"\tscene = exterior.scene;",
				"\tscene.position.copy( origin );",
				"",
				"\tfog.far = 4;",
				"\tfog.near = 0;",
				"",
				"}",
				"",
				"function end () {}",
				"",
				"function update ( progress ) {",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"",
				"\tif ( animation ) {",
				"\t\tanimation.action.timeScale += ( 0.66 - animation.action.timeScale ) * 0.33;",
				"\t}",
				"",
				"\tscene.position.z = progress * ( destination.z - origin.z ) + origin.z;",
				"",
				"\tneon.motionVector.x = 0;",
				"    neon.motionVector.y = 0;",
				"    neon.motionVector.z = 0;",
				"}"
			]
		],
		[
			"Effect",
			[
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"// function init(){}",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Annie Fly Animation Triggers",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.play( 'transition' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar action = animation.action;",
				"",
				"\taction.timeScale = 1;",
				"\taction.loop = THREE.LoopOnce;",
				"\t",
				"}",
				"",
				"function end () {",
				"}",
				"",
				"function update( progress ) {",
				"}"
			]
		],
		[
			"Effect",
			[
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"// function init(){}",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Effect",
			[
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"// function init(){}",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Annie Run 0.6",
			[
				"var annie = FRAME.getResource( 'annie' );",
				"",
				"function start () {",
				"",
				"\tannie.userData.play( 'run' );",
				"",
				"\tvar animation = annie.userData.currentAnimation;",
				"\tvar action = animation.action;",
				"",
				"\taction.timeScale = 0.6;",
				"\t",
				"}",
				"",
				"function end () {",
				"}",
				"",
				"function update( progress ) {",
				"}"
			]
		]
	],
	"animations": [
		[
			"VR Update",
			0,
			266.422875,
			0,
			4
		],
		[
			"Stage 1",
			0,
			69,
			1,
			0
		],
		[
			"Reveal Scene 1/10",
			0,
			10.25,
			2,
			13
		],
		[
			"Lip Sync",
			0,
			10.75758082497216,
			5,
			12
		],
		[
			"Render",
			0,
			266.42287499999986,
			6,
			5
		],
		[
			"Reveal Scene 1/3",
			10.252427564173855,
			10.75,
			2,
			15
		],
		[
			"U",
			10.75758082497216,
			10.888585858585877,
			5,
			10
		],
		[
			"N",
			10.888585858585877,
			11.025000000000015,
			5,
			11
		],
		[
			"D",
			11.025000000000015,
			11.148979591836712,
			5,
			9
		],
		[
			"ER",
			11.148979591836712,
			11.26799999999999,
			5,
			9
		],
		[
			"NE",
			11.26799999999999,
			11.42934751773048,
			5,
			11
		],
		[
			"O",
			11.42934751773048,
			11.623999999999983,
			5,
			10
		],
		[
			"O",
			11.623999999999983,
			11.748000000000008,
			5,
			9
		],
		[
			"N",
			11.748000000000008,
			11.93302664366495,
			5,
			11
		],
		[
			"LIGH",
			11.93302664366495,
			12.520821631269143,
			5,
			10
		],
		[
			"TSSS",
			12.520821631269143,
			14.016528110469183,
			5,
			11
		],
		[
			"Closed",
			14.016528110469183,
			14.75,
			5,
			12
		],
		[
			"U",
			14.75,
			14.881005033613716,
			5,
			10
		],
		[
			"N",
			14.881005033613716,
			15.017419175027854,
			5,
			11
		],
		[
			"D",
			15.017419175027854,
			15.141398766864551,
			5,
			9
		],
		[
			"ER",
			15.141398766864551,
			15.26041917502783,
			5,
			9
		],
		[
			"NE",
			15.26041917502783,
			15.42176669275832,
			5,
			11
		],
		[
			"O",
			15.42176669275832,
			15.616419175027822,
			5,
			10
		],
		[
			"O",
			15.616419175027822,
			15.740419175027847,
			5,
			9
		],
		[
			"N",
			15.740419175027847,
			15.92544581869279,
			5,
			11
		],
		[
			"LIGH",
			15.92544581869279,
			16.513240806296984,
			5,
			10
		],
		[
			"TSSS",
			16.513240806296984,
			18.008947285497023,
			5,
			11
		],
		[
			"Closed",
			18.008947285497023,
			18.572289156626525,
			5,
			12
		],
		[
			"G",
			18.572289156626525,
			18.62631092699308,
			5,
			9
		],
		[
			"O",
			18.62631092699308,
			18.738666305085662,
			5,
			10
		],
		[
			"T",
			18.738666305085662,
			18.786690440965966,
			5,
			9
		],
		[
			"Closed",
			18.786690440965966,
			18.89371454250168,
			5,
			12
		],
		[
			"N",
			18.89371454250168,
			18.94905279144129,
			5,
			9
		],
		[
			"NO",
			18.94905279144129,
			19.008486495443766,
			5,
			10
		],
		[
			"O",
			19.008486495443766,
			19.1234043665483,
			5,
			9
		],
		[
			"Closed",
			19.1234043665483,
			19.214118571294485,
			5,
			12
		],
		[
			"H",
			19.214118571294485,
			19.29355724959631,
			5,
			11
		],
		[
			"U",
			19.29355724959631,
			19.424142772161737,
			5,
			10
		],
		[
			"S",
			19.424142772161737,
			19.543802299139216,
			5,
			11
		],
		[
			"B",
			19.543802299139216,
			19.652148356949766,
			5,
			12
		],
		[
			"A",
			19.652148356949766,
			19.785684836945155,
			5,
			11
		],
		[
			"A",
			19.785684836945155,
			19.911169130684907,
			5,
			10
		],
		[
			"N",
			19.911169130684907,
			20.083661790445234,
			5,
			11
		],
		[
			"D ",
			20.083661790445234,
			22.59,
			5,
			12
		],
		[
			"G",
			22.59,
			22.644021770366557,
			5,
			9
		],
		[
			"O",
			22.644021770366557,
			22.756377148459137,
			5,
			10
		],
		[
			"T",
			22.756377148459137,
			22.80440128433944,
			5,
			9
		],
		[
			"Closed",
			22.80440128433944,
			22.911425385875155,
			5,
			12
		],
		[
			"N",
			22.911425385875155,
			22.966763634814765,
			5,
			9
		],
		[
			"NO",
			22.966763634814765,
			23.02619733881724,
			5,
			10
		],
		[
			"O",
			23.02619733881724,
			23.197115209921748,
			5,
			9
		],
		[
			"Closed",
			23.197115209921748,
			23.277829414667956,
			5,
			12
		],
		[
			"W",
			23.277829414667956,
			23.45437714845917,
			5,
			9
		],
		[
			"I",
			23.45437714845917,
			24.09284222840064,
			5,
			10
		],
		[
			"F",
			24.09284222840064,
			24.941980941430717,
			5,
			11
		],
		[
			"Closed",
			24.941980941430717,
			26.55604729648752,
			5,
			12
		],
		[
			"Early Beat",
			26,
			28,
			2,
			16
		],
		[
			"A",
			26.55604729648752,
			26.624030813595432,
			5,
			11
		],
		[
			"A",
			26.624030813595432,
			26.710155215509303,
			5,
			10
		],
		[
			"L",
			26.710155215509303,
			26.79701167254278,
			5,
			11
		],
		[
			"L",
			26.79701167254278,
			26.896426877221145,
			5,
			12
		],
		[
			"I",
			26.896426877221145,
			26.989131287470997,
			5,
			11
		],
		[
			"I",
			26.989131287470997,
			27.094394445365737,
			5,
			10
		],
		[
			"I",
			27.094394445365737,
			27.17334181378679,
			5,
			11
		],
		[
			"I",
			27.17334181378679,
			27.238685212155513,
			5,
			12
		],
		[
			"W",
			27.238685212155513,
			27.3177717861822,
			5,
			9
		],
		[
			"A",
			27.3177717861822,
			27.751673037212992,
			5,
			10
		],
		[
			"N",
			27.751673037212992,
			27.826261821196073,
			5,
			11
		],
		[
			"T",
			27.826261821196073,
			30.501703475291446,
			5,
			12
		],
		[
			"Early Beat",
			30,
			32,
			2,
			16
		],
		[
			"A",
			30.501703475291446,
			30.569686992399358,
			5,
			11
		],
		[
			"A",
			30.569686992399358,
			30.65581139431323,
			5,
			10
		],
		[
			"L",
			30.65581139431323,
			30.742667851346706,
			5,
			11
		],
		[
			"L",
			30.742667851346706,
			30.84208305602507,
			5,
			12
		],
		[
			"I",
			30.84208305602507,
			30.94236322385068,
			5,
			11
		],
		[
			"I",
			30.94236322385068,
			31.040050624169663,
			5,
			10
		],
		[
			"I",
			31.040050624169663,
			31.118997992590717,
			5,
			11
		],
		[
			"I",
			31.118997992590717,
			31.18434139095944,
			5,
			12
		],
		[
			"W",
			31.18434139095944,
			31.263427964986125,
			5,
			9
		],
		[
			"A",
			31.263427964986125,
			31.697329216016918,
			5,
			10
		],
		[
			"N",
			31.697329216016918,
			31.771918,
			5,
			11
		],
		[
			"T",
			31.771918,
			34.493455618935315,
			5,
			12
		],
		[
			"Early Beat",
			34,
			36,
			2,
			16
		],
		[
			"A",
			34.493455618935315,
			34.56143913604323,
			5,
			11
		],
		[
			"A",
			34.56143913604323,
			34.6475635379571,
			5,
			10
		],
		[
			"L",
			34.6475635379571,
			34.734419994990574,
			5,
			11
		],
		[
			"L",
			34.734419994990574,
			34.83383519966894,
			5,
			12
		],
		[
			"I",
			34.83383519966894,
			34.92653960991879,
			5,
			11
		],
		[
			"I",
			34.92653960991879,
			35.03180276781353,
			5,
			10
		],
		[
			"I",
			35.03180276781353,
			35.110750136234586,
			5,
			11
		],
		[
			"I",
			35.110750136234586,
			35.176093534603304,
			5,
			12
		],
		[
			"W",
			35.176093534603304,
			35.25518010862999,
			5,
			9
		],
		[
			"A",
			35.25518010862999,
			35.68908135966078,
			5,
			10
		],
		[
			"N",
			35.68908135966078,
			35.763670143643864,
			5,
			11
		],
		[
			"T",
			35.763670143643864,
			38.1485484219198,
			5,
			12
		],
		[
			"In the Forest",
			37.5,
			56,
			2,
			14
		],
		[
			"Early Beat",
			38,
			40,
			3,
			16
		],
		[
			"I",
			38.1485484219198,
			38.19342670019561,
			5,
			9
		],
		[
			"I",
			38.19342670019561,
			38.2863049784714,
			5,
			10
		],
		[
			"S",
			38.2863049784714,
			38.43718325674727,
			5,
			11
		],
		[
			"S",
			38.43718325674727,
			38.48518325674723,
			5,
			12
		],
		[
			"TH",
			38.48518325674723,
			38.590304978471465,
			5,
			11
		],
		[
			"I",
			38.590304978471465,
			38.67206153502305,
			5,
			10
		],
		[
			"S  ",
			38.67206153502305,
			38.78206153502311,
			5,
			11
		],
		[
			"S",
			38.78206153502311,
			38.81942670019568,
			5,
			12
		],
		[
			"R",
			38.81942670019568,
			38.882304978471474,
			5,
			9
		],
		[
			"EA",
			38.882304978471474,
			39.01895042391193,
			5,
			10
		],
		[
			"LL",
			39.01895042391193,
			39.295162035521095,
			5,
			11
		],
		[
			"Y",
			39.295162035521095,
			39.70804031379693,
			5,
			12
		],
		[
			"A",
			39.70804031379693,
			39.77602383090484,
			5,
			11
		],
		[
			"A",
			39.77602383090484,
			39.86214823281871,
			5,
			10
		],
		[
			"L",
			39.86214823281871,
			39.94900468985219,
			5,
			11
		],
		[
			"L",
			39.94900468985219,
			40.048419894530554,
			5,
			12
		],
		[
			"I",
			40.048419894530554,
			40.141124304780405,
			5,
			11
		],
		[
			"I",
			40.141124304780405,
			40.246387462675145,
			5,
			10
		],
		[
			"I",
			40.246387462675145,
			40.3253348310962,
			5,
			11
		],
		[
			"I",
			40.3253348310962,
			40.39067822946492,
			5,
			12
		],
		[
			"W",
			40.39067822946492,
			40.46976480349161,
			5,
			9
		],
		[
			"A",
			40.46976480349161,
			40.55623748309381,
			5,
			10
		],
		[
			"N",
			40.55623748309381,
			40.636397695648334,
			5,
			11
		],
		[
			"T",
			40.636397695648334,
			57.38099025963841,
			5,
			12
		],
		[
			"Reveal Scene",
			42,
			42.5,
			3,
			18
		],
		[
			"Guitar Riff",
			42.011034090630375,
			43.01103405341384,
			4,
			17
		],
		[
			"Guitar Riff",
			42.49883891240055,
			43.49883887518401,
			3,
			17
		],
		[
			"Guitar Riff",
			43.01103524434323,
			44.011035207126696,
			4,
			17
		],
		[
			"Guitar Riff",
			43.49884006611331,
			44.49884002889677,
			3,
			17
		],
		[
			"Guitar Riff",
			44.011035207126696,
			45.01103516991016,
			4,
			17
		],
		[
			"Guitar Riff",
			44.49884002889677,
			45.498839991680235,
			3,
			17
		],
		[
			"Guitar Riff",
			45.01103516991016,
			46.01103513269362,
			4,
			17
		],
		[
			"Guitar Riff",
			45.498839991680235,
			46.4988399544637,
			3,
			17
		],
		[
			"Guitar Riff",
			46.01103513269362,
			47.011035095477084,
			4,
			17
		],
		[
			"Guitar Riff",
			46.4988399544637,
			47.49883991724716,
			3,
			17
		],
		[
			"Guitar Riff",
			47.011035095477084,
			48.011035058260546,
			4,
			17
		],
		[
			"Guitar Riff",
			47.49883991724716,
			48.49883988003062,
			3,
			17
		],
		[
			"Guitar Riff",
			48.011035058260546,
			49.01103502104401,
			4,
			17
		],
		[
			"Guitar Riff",
			48.49883988003062,
			49.498839842814085,
			3,
			17
		],
		[
			"Guitar Riff",
			49.01103502104401,
			50.01103498382747,
			4,
			17
		],
		[
			"Guitar Riff",
			49.498839842814085,
			50.49883980559755,
			3,
			17
		],
		[
			"Guitar Riff",
			50.01103498382747,
			51.011034946610934,
			4,
			17
		],
		[
			"Guitar Riff",
			50.49883980559755,
			51.49883976838101,
			3,
			17
		],
		[
			"Guitar Riff",
			51.011034946610934,
			52.0110349093944,
			4,
			17
		],
		[
			"Guitar Riff",
			51.49883976838101,
			52.49883973116447,
			3,
			17
		],
		[
			"Guitar Riff",
			52.0110349093944,
			53.01103487217786,
			4,
			17
		],
		[
			"Guitar Riff",
			52.49883973116447,
			53.498839693947936,
			3,
			17
		],
		[
			"Guitar Riff",
			53.01103487217786,
			54.01103483496132,
			4,
			17
		],
		[
			"Guitar Riff",
			53.498839693947936,
			54.4988396567314,
			3,
			17
		],
		[
			"Guitar Riff",
			54.01103483496132,
			55.011034797744784,
			4,
			17
		],
		[
			"Guitar Riff",
			54.4988396567314,
			55.49883961951486,
			3,
			17
		],
		[
			"Guitar Riff",
			55.011034797744784,
			56.01103476052825,
			4,
			17
		],
		[
			"Guitar Riff",
			55.49883961951486,
			56.498839582298324,
			3,
			17
		],
		[
			"Guitar Riff",
			56.01103476052825,
			57.01103472331171,
			4,
			17
		],
		[
			"Guitar Riff",
			56.498839582298324,
			57.498839545081786,
			3,
			17
		],
		[
			"Guitar Riff",
			57.01103472331171,
			58.01103468609517,
			4,
			17
		],
		[
			"AH",
			57.38099025963841,
			57.83624534950841,
			5,
			11
		],
		[
			"Guitar Riff",
			57.498839545081786,
			58.49883950786525,
			3,
			17
		],
		[
			"C",
			57.83624534950841,
			58.10993522198711,
			5,
			12
		],
		[
			"Guitar Riff",
			58.01103468609517,
			59.011034648878635,
			4,
			17
		],
		[
			"L",
			58.10993522198711,
			58.13625566771417,
			5,
			11
		],
		[
			"E",
			58.13625566771417,
			58.1643298289402,
			5,
			10
		],
		[
			"T",
			58.1643298289402,
			58.19240399016627,
			5,
			11
		],
		[
			"C",
			58.19240399016627,
			58.21558336297488,
			5,
			12
		],
		[
			"I",
			58.21558336297488,
			58.242580023582555,
			5,
			11
		],
		[
			"T",
			58.242580023582555,
			58.26966199723625,
			5,
			10
		],
		[
			"T",
			58.26966199723625,
			58.29537208948789,
			5,
			11
		],
		[
			"C",
			58.29537208948789,
			58.3181352503317,
			5,
			12
		],
		[
			"G",
			58.3181352503317,
			58.344420074518204,
			5,
			9
		],
		[
			"O",
			58.344420074518204,
			58.37333496082625,
			5,
			10
		],
		[
			"O",
			58.37333496082625,
			58.40058234127589,
			5,
			9
		],
		[
			"C",
			58.40058234127589,
			58.86652455932203,
			5,
			12
		],
		[
			"L",
			58.86652455932203,
			58.89284500504909,
			5,
			11
		],
		[
			"E",
			58.89284500504909,
			58.92091916627512,
			5,
			10
		],
		[
			"T",
			58.92091916627512,
			58.94899332750119,
			5,
			11
		],
		[
			"C",
			58.94899332750119,
			58.972172700309805,
			5,
			12
		],
		[
			"I",
			58.972172700309805,
			58.99916936091748,
			5,
			11
		],
		[
			"T",
			58.99916936091748,
			59.02625133457117,
			5,
			10
		],
		[
			"T",
			59.02625133457117,
			59.051961426822814,
			5,
			11
		],
		[
			"C",
			59.051961426822814,
			59.07472458766662,
			5,
			12
		],
		[
			"G",
			59.07472458766662,
			59.10100941185313,
			5,
			9
		],
		[
			"O",
			59.10100941185313,
			59.12992429816117,
			5,
			10
		],
		[
			"O",
			59.12992429816117,
			59.157171678610815,
			5,
			9
		],
		[
			"C",
			59.157171678610815,
			61.34442537206686,
			5,
			12
		],
		[
			"Lift Off (Models)",
			60.72,
			73.75,
			4,
			32
		],
		[
			"AH",
			61.34442537206686,
			61.79968046193686,
			5,
			11
		],
		[
			"C",
			61.79968046193686,
			62.07337033441556,
			5,
			12
		],
		[
			"Lift Off (Environment)",
			62,
			69,
			2,
			27
		],
		[
			"L",
			62.07337033441556,
			62.099690780142616,
			5,
			11
		],
		[
			"E",
			62.099690780142616,
			62.127764941368646,
			5,
			10
		],
		[
			"T",
			62.127764941368646,
			62.15583910259472,
			5,
			11
		],
		[
			"C",
			62.15583910259472,
			62.17901847540333,
			5,
			12
		],
		[
			"I",
			62.17901847540333,
			62.206015136011004,
			5,
			11
		],
		[
			"T",
			62.206015136011004,
			62.2330971096647,
			5,
			10
		],
		[
			"T",
			62.2330971096647,
			62.25880720191634,
			5,
			11
		],
		[
			"C",
			62.25880720191634,
			62.28157036276015,
			5,
			12
		],
		[
			"G",
			62.28157036276015,
			62.307855186946654,
			5,
			9
		],
		[
			"O",
			62.307855186946654,
			62.3367700732547,
			5,
			10
		],
		[
			"O",
			62.3367700732547,
			62.36401745370434,
			5,
			9
		],
		[
			"C",
			62.36401745370434,
			62.82995967175048,
			5,
			12
		],
		[
			"L",
			62.82995967175048,
			62.85628011747754,
			5,
			11
		],
		[
			"E",
			62.85628011747754,
			62.88435427870357,
			5,
			10
		],
		[
			"T",
			62.88435427870357,
			62.91242843992964,
			5,
			11
		],
		[
			"C",
			62.91242843992964,
			62.935607812738255,
			5,
			12
		],
		[
			"I",
			62.935607812738255,
			62.96260447334593,
			5,
			11
		],
		[
			"T",
			62.96260447334593,
			62.98968644699962,
			5,
			10
		],
		[
			"T",
			62.98968644699962,
			63.01539653925126,
			5,
			11
		],
		[
			"C",
			63.01539653925126,
			63.03815970009507,
			5,
			12
		],
		[
			"G",
			63.03815970009507,
			63.064444524281576,
			5,
			9
		],
		[
			"O",
			63.064444524281576,
			63.09335941058962,
			5,
			10
		],
		[
			"O",
			63.09335941058962,
			63.120606791039265,
			5,
			9
		],
		[
			"C",
			63.120606791039265,
			65.30786048449531,
			5,
			12
		],
		[
			"AH",
			65.30786048449531,
			65.76311557436532,
			5,
			11
		],
		[
			"C",
			65.76311557436532,
			66.03680544684401,
			5,
			12
		],
		[
			"L",
			66.03680544684401,
			66.06312589257107,
			5,
			11
		],
		[
			"E",
			66.06312589257107,
			66.0912000537971,
			5,
			10
		],
		[
			"T",
			66.0912000537971,
			66.11927421502317,
			5,
			11
		],
		[
			"C",
			66.11927421502317,
			66.14245358783178,
			5,
			12
		],
		[
			"I",
			66.14245358783178,
			66.16945024843946,
			5,
			11
		],
		[
			"T",
			66.16945024843946,
			66.19653222209315,
			5,
			10
		],
		[
			"T",
			66.19653222209315,
			66.2222423143448,
			5,
			11
		],
		[
			"C",
			66.2222423143448,
			66.2450054751886,
			5,
			12
		],
		[
			"G",
			66.2450054751886,
			66.27129029937511,
			5,
			9
		],
		[
			"O",
			66.27129029937511,
			66.30020518568315,
			5,
			10
		],
		[
			"O",
			66.30020518568315,
			66.32745256613279,
			5,
			9
		],
		[
			"C",
			66.32745256613279,
			66.79339478417893,
			5,
			12
		],
		[
			"L",
			66.79339478417893,
			66.81971522990598,
			5,
			11
		],
		[
			"E",
			66.81971522990598,
			66.84778939113201,
			5,
			10
		],
		[
			"T",
			66.84778939113201,
			66.87586355235808,
			5,
			11
		],
		[
			"C",
			66.87586355235808,
			66.8990429251667,
			5,
			12
		],
		[
			"I",
			66.8990429251667,
			66.92603958577438,
			5,
			11
		],
		[
			"T",
			66.92603958577438,
			66.95312155942807,
			5,
			10
		],
		[
			"T",
			66.95312155942807,
			66.97883165167971,
			5,
			11
		],
		[
			"C",
			66.97883165167971,
			67.00159481252352,
			5,
			12
		],
		[
			"G",
			67.00159481252352,
			67.02787963671003,
			5,
			9
		],
		[
			"O",
			67.02787963671003,
			67.05679452301807,
			5,
			10
		],
		[
			"O",
			67.05679452301807,
			67.0840419034677,
			5,
			9
		],
		[
			"C",
			67.0840419034677,
			69.27129559692375,
			5,
			12
		],
		[
			"Stage 1 to 2 Transition",
			69,
			81.75,
			2,
			28
		],
		[
			"Landing in Room",
			69,
			73.75,
			3,
			29
		],
		[
			"AH",
			69.27129559692375,
			69.72655068679376,
			5,
			11
		],
		[
			"C",
			69.72655068679376,
			70.00024055927246,
			5,
			12
		],
		[
			"L",
			70.00024055927246,
			70.02656100499951,
			5,
			11
		],
		[
			"E",
			70.02656100499951,
			70.05463516622554,
			5,
			10
		],
		[
			"T",
			70.05463516622554,
			70.08270932745161,
			5,
			11
		],
		[
			"C",
			70.08270932745161,
			70.10588870026022,
			5,
			12
		],
		[
			"I",
			70.10588870026022,
			70.1328853608679,
			5,
			11
		],
		[
			"T",
			70.1328853608679,
			70.1599673345216,
			5,
			10
		],
		[
			"T",
			70.1599673345216,
			70.18567742677324,
			5,
			11
		],
		[
			"C",
			70.18567742677324,
			70.20844058761705,
			5,
			12
		],
		[
			"G",
			70.20844058761705,
			70.23472541180355,
			5,
			9
		],
		[
			"O",
			70.23472541180355,
			70.2636402981116,
			5,
			10
		],
		[
			"O",
			70.2636402981116,
			70.29088767856123,
			5,
			9
		],
		[
			"C",
			70.29088767856123,
			70.75682989660737,
			5,
			12
		],
		[
			"L",
			70.75682989660737,
			70.78315034233442,
			5,
			11
		],
		[
			"E",
			70.78315034233442,
			70.81122450356045,
			5,
			10
		],
		[
			"T",
			70.81122450356045,
			70.83929866478653,
			5,
			11
		],
		[
			"C",
			70.83929866478653,
			70.86247803759514,
			5,
			12
		],
		[
			"I",
			70.86247803759514,
			70.88947469820282,
			5,
			11
		],
		[
			"T",
			70.88947469820282,
			70.91655667185651,
			5,
			10
		],
		[
			"T",
			70.91655667185651,
			70.94226676410815,
			5,
			11
		],
		[
			"C",
			70.94226676410815,
			70.96502992495196,
			5,
			12
		],
		[
			"G",
			70.96502992495196,
			70.99131474913847,
			5,
			9
		],
		[
			"O",
			70.99131474913847,
			71.02022963544651,
			5,
			10
		],
		[
			"O",
			71.02022963544651,
			71.04747701589615,
			5,
			9
		],
		[
			"C",
			71.04747701589615,
			73.23473070935219,
			5,
			12
		],
		[
			"AH",
			73.23473070935219,
			73.6899857992222,
			5,
			11
		],
		[
			"Annie Hallway Walk",
			73.55,
			75.5,
			1,
			35
		],
		[
			"C",
			73.6899857992222,
			73.9636756717009,
			5,
			12
		],
		[
			"Run Through Hallway",
			73.75,
			81.75,
			3,
			30
		],
		[
			"Stage 2",
			81.75,
			144,
			1,
			1
		],
		[
			"Stage 3",
			144,
			232.5408855177553,
			1,
			2
		],
		[
			"Streetlight FOV",
			144,
			154,
			2,
			13
		],
		[
			"Adult Transformation",
			153,
			155,
			3,
			20
		],
		[
			"Streetlight FOV",
			165,
			167,
			2,
			15
		],
		[
			"Reveal Buildings",
			169,
			170,
			3,
			22
		],
		[
			"Bounce Buildings",
			172.96875,
			173.96875,
			3,
			23
		],
		[
			"Bounce Buildings",
			177.03125,
			178.03125,
			3,
			23
		],
		[
			"Bounce Buildings",
			180.90625,
			181.90625,
			3,
			23
		],
		[
			"Bounce Buildings",
			184.78125,
			186.03125,
			3,
			23
		],
		[
			"Reveal City",
			184.81862228776058,
			187.01411100956508,
			2,
			18
		],
		[
			"Bounce Buildings",
			188.75,
			190,
			3,
			23
		],
		[
			"Bounce Buildings",
			192.71875,
			193.96875,
			3,
			23
		],
		[
			"Bounce Buildings",
			196.75,
			198,
			3,
			23
		],
		[
			"Radical Riff",
			198.66336633663371,
			200.66336633663371,
			2,
			25
		],
		[
			"Bend City",
			200,
			205,
			4,
			24
		],
		[
			"Bounce Buildings",
			208.70544554455435,
			209.95544554455435,
			3,
			23
		],
		[
			"Bounce Buildings",
			212.57920792079193,
			213.82920792079193,
			3,
			23
		],
		[
			"Radical Riff",
			214.72277227722773,
			216.72277227722773,
			2,
			25
		],
		[
			"Inception Curve",
			218.56435643564362,
			232.4950495049505,
			4,
			26
		],
		[
			"Stage 4",
			232.4790920716112,
			266.43022794117644,
			1,
			3
		]
	]
}
