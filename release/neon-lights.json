{
	"config": {},
	"libraries": [
		"../release/third-party/url.js",
		"../release/third-party/has.js",
		"../release/third-party/three.js",
		"../release/third-party/three/js/effects/VREffect.js",
		"../release/third-party/three/js/loaders/FBXLoader2.js",
		"../release/third-party/three/js/controls/OrbitControls.js",
		"../release/third-party/three/js/controls/DeviceOrientationControls.js",
		"../release/third-party/three/js/controls/VRControls.js",
		"../release/third-party/three/js/vr/DaydreamController.js",
		"../release/third-party/orientation-arm-model.js",
		"../release/third-party/three/js/vr/ViveController.js"
	],
	"includes": [
		[
			"Setup",
			"var dom = FRAME.getDOM();\n\nvar renderer = new THREE.WebGLRenderer( { antialias: true } );\nrenderer.domElement.style.position = 'absolute';\nrenderer.domElement.style.top = 0;\nrenderer.domElement.style.left = 0;\ndom.appendChild( renderer.domElement );\n\nvar scene = new THREE.Scene();\nscene.userData.clear = function() {\n\n\tvar children = scene.children.slice( 0 );\n\tfor ( var i = 0; i < children.length; i++ ) {\n\t\tvar child  = children[ i ];\n\t\tscene.remove( child );\n\t\tif ( child.dispose ) {\n\t\t\tchild.dispose();\n\t\t}\n\t}\n\t\n};\n\nvar dolly = new THREE.Camera();\nvar camera = new THREE.PerspectiveCamera();\ndolly.add( camera );\n\nvar controls = {\n\tvirtualReality: new THREE.VRControls( camera ),\n\tdeviceOrientation: new THREE.DeviceOrientationControls( camera ),\n\tmouse: {\n\t\t// TODO\n\t\tupdate: function () {}\n\t}\n};\n\ncontrols.current = controls.virtualReality;\n\t\nvar effect = new THREE.VREffect( renderer );\n\nif ( navigator.getVRDisplays ) {\n\n\tnavigator.getVRDisplays()\n\t\t.then( function ( displays ) {\n\n\t\t\tvar hmd = displays[ 0 ];\n\t\t\teffect.setVRDisplay( hmd );\n\t\t\tcontrols.setVRDisplay( hmd );\n\t\t} )\n\t\t.catch( function () {\n\n\t\t\tif ( has.mobile ) {\n\t\t\t\tcontrols.current = controls.deviceOrientation;\n\t\t\t} else {\n\t\t\t\tcontrols.current = controls.mouse;\n\t\t\t}\n\t\t\n\t\t} );\n\n}\n\nvar resize = function ( event ) {\n\t\n\tvar width = dom.clientWidth;\n\tvar height = dom.clientHeight;\n\n\trenderer.setSize( width, height );\n\teffect.setSize( width, height );\n\n\tcamera.aspect = width / height;\n\tcamera.updateProjectionMatrix();\n\t\n\teffect.render( scene, camera );\n\t\n};\nwindow.addEventListener( 'resize', resize, false );\nresize();\n\nvar isLocal = /localhost/i.test(window.location.href);\nvar root = isLocal ? '../assets' : '//player-dev.cabrilleros.com/NEON_LIGHTS/assets';\n\nvar loader = new THREE.FBXLoader();\n\nFRAME.addResource( 'renderer', renderer );\nFRAME.addResource( 'scene', scene );\nFRAME.addResource( 'dolly', dolly );\nFRAME.addResource( 'camera', camera );\n\nFRAME.addResource( 'controls', controls );\nFRAME.addResource( 'effect', effect );\n\nFRAME.addResource( 'root', root );\nFRAME.addResource( 'loader', loader );"
		],
		[
			"Controllers",
			"var camera = FRAME.getResource( 'camera' );\n\nvar controllers = {\n\n\tdaydream: new THREE.DaydreamController(),\n\tleft: new THREE.ViveController(0),\n\tright: new THREE.ViveController(1),\n\n\tprevious: {\n\t\tposition: new THREE.Vector3(),\n\t\trotation: new THREE.Euler(),\n\t\tupdate: function( controller ) {\n\t\t\tvar obj = controllers.previous;\n\t\t\tobj.position.copy( controller.position );\n\t\t\tobj.rotation.copy( controller.rotation );\n\t\t}\n\t},\n\n\tsetup: function( parent ) {\n\n\t\tcontrollers.daydream.quaternion = new THREE.Quaternion();\n\t\tcontrollers.daydream.arm = new OrientationArmModel();\n\n\t\t// TODO: Create meshes for controllers here.\n\t\t\n\t\tcontrollers.left.addEventListener( 'triggerdown', function() {\n\t\t\tcontrollers.left.userData.dragging = true;\n\t\t\tcontrollers.previous.update( controllers.left );\n\t\t\tcontrollers.onTriggerDown( controllers.left );\n\t\t});\n\t\tcontrollers.left.addEventListener( 'triggerup', function() {\n\t\t\tcontrollers.left.userData.dragging = false;\n\t\t\tcontrollers.onTriggerUp( controllers.left );\n\t\t});\n\t\t\n\t\tcontrollers.right.addEventListener( 'triggerdown', function() {\n\t\t\tcontrollers.right.userData.dragging = true;\n\t\t\tcontrollers.previous.update( controllers.right );\n\t\t\tcontrollers.onTriggerDown( controllers.right );\n\t\t});\n\t\tcontrollers.right.addEventListener( 'triggerup', function() {\n\t\t\tcontrollers.right.userData.dragging = false;\n\t\t\tcontrollers.onTriggerUp( controllers.right );\n\t\t});\n\t\t\n\t\tcontrollers.daydream.addEventListener( 'touchpaddown', function() {\n\t\t\tcontrollers.daydream.userData.dragging = true;\n\t\t\tcontrollers.previous.update( controllers.daydream );\n\t\t\tcontrollers.onTriggerDown( controllers.daydream );\n\t\t});\n\t\tcontrollers.daydream.addEventListener( 'touchpadup', function() {\n\t\t\tcontrollers.daydream.userData.dragging = false;\n\t\t\tcontrollers.onTriggerUp( controllers.daydream );\n\t\t});\n\n\t},\n\t\n\tupdate: function() {\n\n\t\tvar daydream, pad;\n\t\t\n\t\tif ( has.mobile ) {\n\n\t\t\tdaydream = controllers.daydream;\n\t\t\tpad = daydream.getGamepad();\n\t\t\t\n\t\t\tif ( pad ) {\n\n\t\t\t\tvar pose = pad.pose;\n\t\t\t\tvar orientation = daydream.quaternion\n\t\t\t\t\t.fromArray( pose.orientation );\n\t\t\t\tvar arm = daydream.arm;\n\t\t\t\t\n\t\t\t\tarm.setHeadOrientation( camera.quaternion );\n\t\t\t\tarm.setHeadPosition( camera.position );\n\t\t\t\tarm.setControllerOrientation( orientation );\n\t\t\t\tarm.update();\n\t\t\t\t\n\t\t\t\tpose = arm.getPose();\n\t\t\t\tdaydream.position.copy( pose.position );\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\n\t\t\tcontrollers.left.update();\n\t\t\tcontrollers.right.update();\n\t\t\t\n\t\t}\n\t\t\n\t},\n\n\tonTriggerDown: function( controller ) {},\n\tonTriggerUp: function( controller ) {}\n\n};\n\nFRAME.addResource( 'controllers', controllers );"
		],
		[
			"Annie",
			"var scene = FRAME.getResource( 'scene' );\nvar path = [FRAME.getResource( 'root' ), '/models/annie/'].join('');\nvar loader = FRAME.getResource( 'loader' );\n\nvar annie = new THREE.Group();\nvar files = {\n\tmodel: 'ani_chr_1-forest_bindpose_v03.fbx',\n\tanimations: {\n\t\trun: 'ani_chr_1-forest_run_v03.fbx'\n\t}\n};\n\nannie.userData.animations = {};\nannie.userData.play = function ( action ) {\n\t\n\tfor ( var k in annie.userData.animations ) {\n\t\n\t\tvar animation = annie.userData.animations[ k ];\n\t\tanimation.action[ k === action ? 'play' : 'stop' ]();\n\t\n\t}\n\t\n};\nloader.load( path + files.model, modelLoaded );\n\nFRAME.addResource( 'annie', annie );\n\nfunction modelLoaded ( fbx ) {\n\t\n\tannie.add( fbx );\n\tannie.userData.model = fbx;\n\tannie.userData.model.mixer = new THREE.AnimationMixer( fbx );\n\t\n\tfbx.traverse( function ( child ) {\n\t\t\n\t\tif ( child.isMesh ) {\n\t\t\t\n\t\t\tchild.material.side = THREE.DoubleSide;\n\n\t\t}\n\t\t\n\t} );\n\t\n\tfor ( var k in files.animations ) {\n\n\t\tvar animation = files.animations[ k ];\n\t\tloader.load( path + animation, animationLoaded( k ) );\n\n\t} \n\t\n}\n\nfunction animationLoaded ( name ) {\n\t\n\treturn function ( fbx ) {\n\n\t\tvar animation = fbx.animations[ 0 ];\n\t\tanimation.name += ': ' + name;\n\t\tanimation.action = annie.userData.model.mixer.clipAction( animation );\n\t\tannie.userData.animations[ name ] = animation;\n\t\t\n\t};\n\t\n}"
		],
		[
			"Models",
			"var Signal = signals.Signal;\nvar root = FRAME.getResource( 'root' );\nvar loader = FRAME.getResource( 'loader' );\n\nvar models = {\n\t\n\tforest: {\n\t\tname: 'forest',\n\t\tfiles: [\n\t\t\t'mdl_env_1_forest_flower_a_v01.fbx',\n\t\t\t'mdl_env_1_forest_grass_a01_v01.fbx',\n\t\t\t'mdl_env_1_forest_grass_a02_v01.fbx',\n\t\t\t'mdl_env_1_forest_grass_b01_v01.fbx',\n\t\t\t'mdl_env_1_forest_grass_b02_v01.fbx',\n\t\t\t'mdl_env_1_forest_grass_c01_v01.fbx',\n\t\t\t'mdl_env_1_forest_grass_c02_v01.fbx',\n\t\t\t'mdl_env_1_forest_grass_c03_v01.fbx',\n\t\t\t'mdl_env_1_forest_rock_a_v01.fbx',\n\t\t\t'mdl_env_1_forest_rock_b_v01.fbx',\n\t\t\t'mdl_env_1_forest_tree_a_v01.fbx',\n\t\t\t'mdl_env_1_forest_tree_b_v01.fbx',\n\t\t\t'mdl_env_1_forest_tree_c_v01.fbx',\n\t\t\t'mdl_env_1_forest_tree_d_v01.fbx'\n\t\t]\n\t},\n\n\thouse: {\n\t\tname: 'house',\n\t\tfiles: []\n\t},\n\t\n\tcity: {\n\t\tname: 'city',\n\t\tfiles: []\n\t}\n\t\n};\n\nfor ( var name in models ) {\n\n\tvar stage = models[ name ];\n\tvar files = stage.files;\n\tvar length = files.length;\n\n\tenhance( stage );\n\t\n\tfor ( var i = 0; i < length; i++ ) {\n\n\t\tload( stage, files[ i ] );\n\t\t\n\t}\n\t\n}\n\nfunction enhance ( stage ) {\n\n\tvar files = stage.files;\n\tvar length = files.length;\n\tvar loaded = 0;\n\tvar isComplete = false;\n\n\tstage.geometries = [];\n\tstage.onLoad = new Signal();\n\tstage.ready = function ( func ) {\n\t\tif ( isComplete ) {\n\t\t\tfunc();\n\t\t\treturn;\n\t\t}\n\t\tstage.onLoad.add( func );\n\t};\n\t\n\tfiles.complete = function () {\n\n\t\tloaded++;\n\n\t\tif ( !isComplete && loaded >= length ) {\n\t\t\tisComplete = true;\n\t\t\tstage.onLoad.dispatch();\n\t\t}\n\t\t\n\t\t\n\t};\n\t\n}\n\nfunction load ( stage, path ) {\n\n\tvar files = stage.files;\n\tvar url = [ root, 'models', stage.name, path ].join ( '/' );\n\t\n\tloader.load( url, function ( fbx ) {\n\n\t\textract( stage, fbx );\n\t\tfiles.complete();\n\t\t\n\t} );\n\t\n}\n\nfunction extract ( stage, fbx ) {\n\t\n\tvar geometries = stage.geometries;\n\t\n\tfbx.traverse( function( child ) {\n\n\t\tif ( child.isMesh ) {\n\t\t\tgeometries.push( child.geometry );\n\t\t}\n\t\t\n\t} );\n\n}\n\nFRAME.addResource( 'models', models );"
		],
		[
			"Materials",
			"var floor = {\n\n\tuniforms: {\n\t\tamount: { type: 'f', value: 5 },\n\t\tcolor: { type: 'c', value: new THREE.Color( 0x72fa8c ) },\n\t\tfog: { type: 'c', value: new THREE.Color( 0x333333 ) }\n\t},\n\n\tvertexShader: [\n\n\t\t'varying vec2 vUv;',\n\n\t\t'void main() {',\n\n\t\t\t'vUv = uv;',\n\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t'}'\n\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\n\t\t'uniform float amount;',\n\t\t'uniform vec3 fog;',\n\t\t'uniform vec3 color;',\n\t\t'varying vec2 vUv;',\n\n\t\t'void main() {',\n\n\t\t\t'float dist = length( vec2( 0.5 ) - vUv );',\n\t\t\t'float t = clamp( floor( pow( dist, 0.4 ) * amount ) / amount, 0.0, 1.0 );',\n\t\t\t'gl_FragColor = vec4( mix( color, fog, pow( t, 0.66 ) ), 1.0 );',\n\n\t\t'}'\n\n\t].join( '\\n' )\n\n};\n\nvar materials = {\n\n\tforest: {\n\t\t\n\t\tfloor: new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: THREE.UniformsUtils.clone( floor.uniforms ),\n\t\t\tvertexShader: floor.vertexShader,\n\t\t\tfragmentShader: floor.fragmentShader\n\t\t\t\n\t\t} )\n\n\t}\n\t\n};\n\nFRAME.addResource( 'materials', materials );"
		]
	],
	"effects": [
		[
			"Forest",
			"var TWO_PI = Math.PI * 2;\nvar annie = FRAME.getResource( 'annie' );\nvar model = FRAME.getResource( 'models' ).forest;\nvar materials = FRAME.getResource( 'materials' ).forest;\nvar renderer = FRAME.getResource( 'renderer' );\n\nvar parameters = {\n\tsize: new FRAME.Parameters.Integer( 'Size', 72 ),\n\tamount: new FRAME.Parameters.Integer( 'Amount', 512 ),\n\ttheta: new FRAME.Parameters.Float( 'Theta', 10 ),\n\tstep: new FRAME.Parameters.Float( 'Step', 0.1 ),\n\tforceField: new FRAME.Parameters.Float( 'Field', 0.08 )\n};\n\nvar cursor = new THREE.Vector2();\n\nvar theta = {\n\tdestination: 0,\n\tcurrent: 0\n};\n\nvar step = {\n\tdestination: 0.1,\n\tcurrent: 0.1\n};\n\nvar dolly = FRAME.getResource( 'dolly' );\nvar scene = FRAME.getResource( 'scene' );\n\nvar group = new THREE.Scene();\ngroup.fog = new THREE.Fog( '#333', 0, parameters.size.value * 0.5 );\n\nvar ground = new THREE.Mesh(\n\tnew THREE.PlaneBufferGeometry( parameters.size.value, parameters.size.value, 1, 1 ),\n\tmaterials.floor\n);\nground.rotation.x = - Math.PI / 2;\ngroup.add( ground );\n\nvar elements = [];\n\n// TODO: Replace with custom Shaders\nvar material = new THREE.MeshBasicMaterial( {\n\tcolor: 'white',\n\tvertexColors: true\n} );\n\nmodel.ready( function () {\n\n\tvar geometries = model.geometries;\n\tvar length = geometries.length;\n\tvar amount = parameters.amount.value;\n\t\n\tfor ( var i = 0; i < amount; i++ ) {\n\n\t\tvar id = i % length;\n\t\tvar geometry = geometries[ id ];\n\t\tvar mesh = new THREE.Mesh( geometry, material );\n\n\t\tmesh.userData.offset = new THREE.Vector2(\n\t\t\tMath.random(),\n\t\t\tMath.random()\n\t\t);\n\t\t\n\t\tmesh.scale.setScalar( Math.random() + 1 );\n\t\tmesh.rotation.y = Math.random() * TWO_PI;\n\t\t\n\t\tgroup.add( mesh );\n\t\telements.push( mesh );\n\n\t}\n\t\n} );\n\nfunction start () {\n\n\tannie.userData.play( 'run' );\n\t\n\tdolly.position.set( 0, 0.6, - 2 );\n\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );\n\tscene.fog = group.fog;\n\trenderer.setClearColor( scene.fog.color );\n\tscene.add( group );\n\n}\n\nfunction end () {\n\t\n\tscene.remove( group );\n\t\n}\n\nfunction update ( progress, dt ) {\n\t\n\tvar size = parameters.size.value;\n\tvar amplitude = step.current * ( dt || 0 );\n\tvar forceField = parameters.forceField.value;\n\t\n\tcursor.x += amplitude * Math.cos( theta.current );\n\tcursor.y += amplitude * Math.sin( theta.current );\n\t\n\tgroup.rotation.y = theta.current - Math.PI / 2;\n\t\n\tfor ( var i = 0; i < elements.length; i++ ) {\n\n\t\tvar mesh = elements[ i ];\n\t\tvar offset = mesh.userData.offset;\n\t\t\n\t\tvar x = mod( cursor.x + offset.x, 1 ) - 0.5;\n\t\tvar y = mod( cursor.y + offset.y, 1 ) - 0.5;\n\t\t\n\t\tvar angle = Math.atan2( - y, - x );\n\t\tvar buffer = forceField * ( 128 / size );\n\t\tvar phi = angle + Math.PI;\n\t\t\n\t\tmesh.position.x = x + Math.cos( phi ) * buffer;\n\t\tmesh.position.z = y + Math.sin( phi ) * buffer;\n\n\t\tmesh.position.x *= - size;\n\t\tmesh.position.z *= - size;\n\n\t}\n\t\n}\n\nfunction mod ( v, l ) {\n\twhile ( v < 0 ) { v += l; }\n\treturn v % l;\n}"
		],
		[
			"House",
			"var dolly = FRAME.getResource( 'dolly' );\nvar scene = FRAME.getResource( 'scene' );\n\n// House\n\nvar group = new THREE.Group();\n\nvar geometry = new THREE.BoxBufferGeometry( 4, 4, 4 );\ngeometry.translate( 0, 2, 0 );\n\nvar material = new THREE.MeshNormalMaterial( { side: THREE.BackSide } );\nvar mesh = new THREE.Mesh( geometry, material );\ngroup.add( mesh );\n\n// function init(){}\n\nfunction start(){\n\t\n\tscene.add( group );\n\t\n}\n\nfunction end() {\n\t\n\tscene.remove( group );\n\t\n}\n\nfunction update( progress ){\n\n\tdolly.position.set( Math.sin( progress * 80 ) * 2, 0.6, Math.cos( progress * 80 ) * 2 );\n\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );\n\n}"
		],
		[
			"Effect",
			"var dolly = FRAME.getResource( 'dolly' );\nvar scene = FRAME.getResource( 'scene' );\n\nvar group = new THREE.Group();\n\nvar ground = new THREE.Mesh(\n\tnew THREE.PlaneBufferGeometry( 70, 70 ),\n\tnew THREE.MeshBasicMaterial({\n\t\tcolor: 0x72fa8c\n\t})\n);\nground.rotation.x = - Math.PI / 2;\ngroup.add( ground );\n\nvar geometry = new THREE.BoxBufferGeometry( 1, 1, 1 );\ngeometry.translate( 0, 0.5, 0 );\n\nfor ( var i = 0; i < 20; i ++ ) {\n\n\tvar mesh = new THREE.Mesh( geometry );\n\tmesh.position.x = Math.random() * 20 - 10;\n\tmesh.position.z = Math.random() * 60 - 30;\n\tmesh.scale.y = Math.random() * 4.0 + 1;\n\tmesh.userData.startPosition = mesh.position.clone();\n\tgroup.add( mesh );\t\n\n}\n\n// function init(){}\n\nfunction start(){\n\t\n\tscene.add( group );\n}\n\nfunction end() {\n\t\n\tscene.remove( group );\n\t\n}\n\nfunction update( progress ){\n\t\n\tdolly.position.set( 0, 0.6, 2 );\n\tdolly.lookAt( new THREE.Vector3( 0, 0.6, 0 ) );\n\t\n\tfor ( var i = 0; i < group.children.length; i ++ ) {\n\n\t\tvar mesh = group.children[ i ];\n\t\tvar startPosition = mesh.userData.startPosition;\n\n\t\tif ( startPosition !== undefined ) {\n\n\t\t\tmesh.position.z = ( ( startPosition.z + progress * 800 ) % 60 ) - 30;\n\t\t\n\t\t}\n\t\t\n\t}\n\n}"
		],
		[
			"Effect",
			"var parameters = {\n\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )\n};\n\n// function init(){}\n\nfunction start(){}\n\nfunction update( progress ){}"
		],
		[
			"Effect",
			"var controls = FRAME.getResource( 'controls' );\nvar controllers = FRAME.getResource( 'controllers' );\n\nfunction update ( progress ) {\n\n\tcontrols.current.update();\n\tcontrollers.update();\n\n}"
		],
		[
			"Effect",
			"var dolly = FRAME.getResource( 'dolly' );\nvar camera = FRAME.getResource( 'camera' );\nvar scene = FRAME.getResource( 'scene' );\nvar effect = FRAME.getResource( 'effect' );\nvar annie = FRAME.getResource( 'annie' );\n\nscene.userData.clear();\nscene.add( dolly );\nscene.add( new THREE.AmbientLight( 0xffffff ) );\nscene.add( annie );\n\nfunction start(){}\n\nfunction end(){}\n\nfunction update ( progress, dt ) {\n\n\tif ( annie.userData.model ) {\n\t\tannie.userData.model.mixer.update( dt );\n\t}\n\n\teffect.render( scene, camera );\n\n}"
		],
		[
			"Clear",
			"var dolly = FRAME.getResource( 'dolly' );\nvar clock = FRAME.getResource( 'clock' );\nvar camera = FRAME.getResource( 'camera' );\nvar scene = FRAME.getResource( 'scene' );\nvar effect = FRAME.getResource( 'effect' );\nvar annie = FRAME.getResource( 'annie' );\n\nscene.userData.clear();\nscene.add( dolly );\nscene.add( new THREE.AmbientLight( 0xffffff ) );\nscene.add( annie );\n\nfunction start(){}\n\nfunction end(){}\n\nfunction update( progress ){}"
		]
	],
	"animations": [
		[
			"Introduction",
			0,
			266.422875,
			0,
			6
		],
		[
			"VR Update",
			0,
			266.422875,
			3,
			4
		],
		[
			"Render",
			0,
			266.422875,
			4,
			5
		],
		[
			"Stage 1",
			0,
			73.7606409027744,
			1,
			0
		],
		[
			"Stage 2",
			73.7442447766915,
			184.98691332926148,
			1,
			1
		],
		[
			"Stage 3",
			153.00015717426976,
			232.48241094534336,
			2,
			2
		],
		[
			"Stage 4: Neon Lights",
			232.4999999999999,
			266.422875,
			1,
			3
		]
	]
}